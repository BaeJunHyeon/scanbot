
_3D_scanner_hubmotor_0.0.4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000a2a  00000abe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800118  00800118  00000ad6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ce  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf1  00000000  00000000  0000221e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ed  00000000  00000000  00002e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  000037fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000653  00000000  00000000  00003a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c7  00000000  00000000  000040c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004a8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8c c0       	rjmp	.+280    	; 0x11a <__ctors_end>
   2:	00 00       	nop
   4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
   6:	00 00       	nop
   8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
   a:	00 00       	nop
   c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
   e:	00 00       	nop
  10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
  12:	00 00       	nop
  14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
  16:	00 00       	nop
  18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	10 c1       	rjmp	.+544    	; 0x23e <__vector_7>
  1e:	00 00       	nop
  20:	1f c1       	rjmp	.+574    	; 0x260 <__vector_8>
  22:	00 00       	nop
  24:	98 c0       	rjmp	.+304    	; 0x156 <__vector_9>
  26:	00 00       	nop
  28:	95 c0       	rjmp	.+298    	; 0x154 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	93 c0       	rjmp	.+294    	; 0x154 <__bad_interrupt>
  2e:	00 00       	nop
  30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
  32:	00 00       	nop
  34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
  36:	00 00       	nop
  38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e9 c0       	rjmp	.+466    	; 0x210 <__vector_15>
  3e:	00 00       	nop
  40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
  42:	00 00       	nop
  44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
  46:	00 00       	nop
  48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
  4e:	00 00       	nop
  50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
  52:	00 00       	nop
  54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
  56:	00 00       	nop
  58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
  5e:	00 00       	nop
  60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
  62:	00 00       	nop
  64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
  66:	00 00       	nop
  68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
  6e:	00 00       	nop
  70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
  72:	00 00       	nop
  74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
  76:	00 00       	nop
  78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
  7e:	00 00       	nop
  80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
  82:	00 00       	nop
  84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
  86:	00 00       	nop
  88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	11 02       	muls	r17, r17
  8e:	49 02       	muls	r20, r25
  90:	b3 02       	muls	r27, r19
  92:	0c 03       	fmul	r16, r20
  94:	4f 03       	fmul	r20, r23
  96:	c6 01       	movw	r24, r12
  98:	7d 03       	fmul	r23, r21
  9a:	87 03       	fmuls	r16, r23
  9c:	9c 03       	fmulsu	r17, r20
  9e:	c6 01       	movw	r24, r12
  a0:	c6 01       	movw	r24, r12
  a2:	c6 01       	movw	r24, r12
  a4:	c6 01       	movw	r24, r12
  a6:	c6 01       	movw	r24, r12
  a8:	c6 01       	movw	r24, r12
  aa:	c6 01       	movw	r24, r12
  ac:	c6 01       	movw	r24, r12
  ae:	c6 01       	movw	r24, r12
  b0:	c6 01       	movw	r24, r12
  b2:	c6 01       	movw	r24, r12
  b4:	c6 01       	movw	r24, r12
  b6:	c6 01       	movw	r24, r12
  b8:	c6 01       	movw	r24, r12
  ba:	c6 01       	movw	r24, r12
  bc:	c6 01       	movw	r24, r12
  be:	c6 01       	movw	r24, r12
  c0:	c6 01       	movw	r24, r12
  c2:	c6 01       	movw	r24, r12
  c4:	c6 01       	movw	r24, r12
  c6:	c6 01       	movw	r24, r12
  c8:	c6 01       	movw	r24, r12
  ca:	c6 01       	movw	r24, r12
  cc:	c6 01       	movw	r24, r12
  ce:	c6 01       	movw	r24, r12
  d0:	c6 01       	movw	r24, r12
  d2:	c6 01       	movw	r24, r12
  d4:	c6 01       	movw	r24, r12
  d6:	c6 01       	movw	r24, r12
  d8:	c6 01       	movw	r24, r12
  da:	c6 01       	movw	r24, r12
  dc:	c6 01       	movw	r24, r12
  de:	c6 01       	movw	r24, r12
  e0:	c6 01       	movw	r24, r12
  e2:	c6 01       	movw	r24, r12
  e4:	c6 01       	movw	r24, r12
  e6:	c6 01       	movw	r24, r12
  e8:	c6 01       	movw	r24, r12
  ea:	c6 01       	movw	r24, r12
  ec:	c6 01       	movw	r24, r12
  ee:	c6 01       	movw	r24, r12
  f0:	b1 03       	fmuls	r19, r17
  f2:	c6 01       	movw	r24, r12
  f4:	00 02       	muls	r16, r16
  f6:	c6 01       	movw	r24, r12
  f8:	c6 01       	movw	r24, r12
  fa:	c6 01       	movw	r24, r12
  fc:	c6 01       	movw	r24, r12
  fe:	c6 01       	movw	r24, r12
 100:	c6 01       	movw	r24, r12
 102:	c6 01       	movw	r24, r12
 104:	c6 01       	movw	r24, r12
 106:	c6 01       	movw	r24, r12
 108:	c6 01       	movw	r24, r12
 10a:	c6 01       	movw	r24, r12
 10c:	d7 01       	movw	r26, r14
 10e:	c6 01       	movw	r24, r12
 110:	c6 01       	movw	r24, r12
 112:	c6 01       	movw	r24, r12
 114:	c6 01       	movw	r24, r12
 116:	c6 01       	movw	r24, r12
 118:	ea 01       	movw	r28, r20

0000011a <__ctors_end>:
 11a:	11 24       	eor	r1, r1
 11c:	1f be       	out	0x3f, r1	; 63
 11e:	cf ef       	ldi	r28, 0xFF	; 255
 120:	d0 e1       	ldi	r29, 0x10	; 16
 122:	de bf       	out	0x3e, r29	; 62
 124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_copy_data>:
 126:	11 e0       	ldi	r17, 0x01	; 1
 128:	a0 e0       	ldi	r26, 0x00	; 0
 12a:	b1 e0       	ldi	r27, 0x01	; 1
 12c:	ea e2       	ldi	r30, 0x2A	; 42
 12e:	fa e0       	ldi	r31, 0x0A	; 10
 130:	00 e0       	ldi	r16, 0x00	; 0
 132:	0b bf       	out	0x3b, r16	; 59
 134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x14>
 136:	07 90       	elpm	r0, Z+
 138:	0d 92       	st	X+, r0
 13a:	a8 31       	cpi	r26, 0x18	; 24
 13c:	b1 07       	cpc	r27, r17
 13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0x10>

00000140 <__do_clear_bss>:
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	a8 e1       	ldi	r26, 0x18	; 24
 144:	b1 e0       	ldi	r27, 0x01	; 1
 146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
 148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
 14a:	aa 33       	cpi	r26, 0x3A	; 58
 14c:	b2 07       	cpc	r27, r18
 14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
 150:	b6 d0       	rcall	.+364    	; 0x2be <main>
 152:	69 c4       	rjmp	.+2258   	; 0xa26 <_exit>

00000154 <__bad_interrupt>:
 154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <__vector_9>:
unsigned int servo3deg=18;		//front2 servo 90'=158
unsigned int servo4deg=90-20;		//tilt servo

struct STEPPER headMotor;

ISR(TIMER2_COMP_vect) {		//motor2 & UltraSonic sensor count
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	0b b6       	in	r0, 0x3b	; 59
 162:	0f 92       	push	r0
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
	PORTE = PORTE^(timer2Token<<PINE5);
 17c:	23 b1       	in	r18, 0x03	; 3
 17e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <timer2Token>
 182:	30 e2       	ldi	r19, 0x20	; 32
 184:	93 9f       	mul	r25, r19
 186:	c0 01       	movw	r24, r0
 188:	11 24       	eor	r1, r1
 18a:	82 27       	eor	r24, r18
 18c:	83 b9       	out	0x03, r24	; 3
	headMotor.stepCnt += headMotor.dir*timer2Token;
 18e:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <timer2Token>
 192:	ef e1       	ldi	r30, 0x1F	; 31
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	82 81       	ldd	r24, Z+2	; 0x02
 198:	93 81       	ldd	r25, Z+3	; 0x03
 19a:	28 9f       	mul	r18, r24
 19c:	a0 01       	movw	r20, r0
 19e:	29 9f       	mul	r18, r25
 1a0:	50 0d       	add	r21, r0
 1a2:	11 24       	eor	r1, r1
 1a4:	05 2e       	mov	r0, r21
 1a6:	00 0c       	add	r0, r0
 1a8:	66 0b       	sbc	r22, r22
 1aa:	77 0b       	sbc	r23, r23
 1ac:	84 81       	ldd	r24, Z+4	; 0x04
 1ae:	95 81       	ldd	r25, Z+5	; 0x05
 1b0:	a6 81       	ldd	r26, Z+6	; 0x06
 1b2:	b7 81       	ldd	r27, Z+7	; 0x07
 1b4:	48 0f       	add	r20, r24
 1b6:	59 1f       	adc	r21, r25
 1b8:	6a 1f       	adc	r22, r26
 1ba:	7b 1f       	adc	r23, r27
 1bc:	44 83       	std	Z+4, r20	; 0x04
 1be:	55 83       	std	Z+5, r21	; 0x05
 1c0:	66 83       	std	Z+6, r22	; 0x06
 1c2:	77 83       	std	Z+7, r23	; 0x07
	headMotor.steps = headMotor.stepCnt/2;
 1c4:	db 01       	movw	r26, r22
 1c6:	ca 01       	movw	r24, r20
 1c8:	77 23       	and	r23, r23
 1ca:	1c f4       	brge	.+6      	; 0x1d2 <__vector_9+0x7c>
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	a1 1d       	adc	r26, r1
 1d0:	b1 1d       	adc	r27, r1
 1d2:	b5 95       	asr	r27
 1d4:	a7 95       	ror	r26
 1d6:	97 95       	ror	r25
 1d8:	87 95       	ror	r24
 1da:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <headMotor+0x8>
 1de:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <headMotor+0x9>
 1e2:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <headMotor+0xa>
 1e6:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <headMotor+0xb>
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0b be       	out	0x3b, r0	; 59
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_15>:
ISR(TIMER0_COMP_vect) {
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
	sonicCNT++;
 21e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <sonicCNT>
 222:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <sonicCNT+0x1>
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <sonicCNT+0x1>
 22c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <sonicCNT>
}
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <__vector_7>:
ISR(INT6_vect) {		//UltraSonic rising edge
 23e:	1f 92       	push	r1
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	8f 93       	push	r24

	TIMSK |= (1<<OCIE0);
 24a:	87 b7       	in	r24, 0x37	; 55
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	87 bf       	out	0x37, r24	; 55
	OCR0 = 19;
 250:	83 e1       	ldi	r24, 0x13	; 19
 252:	81 bf       	out	0x31, r24	; 49
}
 254:	8f 91       	pop	r24
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <__vector_8>:
ISR(INT7_vect) {		//UltraSonic falling edge
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	2f 93       	push	r18
 26c:	3f 93       	push	r19
 26e:	6f 93       	push	r22
 270:	7f 93       	push	r23
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
	TIMSK &= (0<<OCIE0);
 27a:	87 b7       	in	r24, 0x37	; 55
 27c:	17 be       	out	0x37, r1	; 55
	dist = sonicCNT/6;
 27e:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <sonicCNT>
 282:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <sonicCNT+0x1>
 286:	ab ea       	ldi	r26, 0xAB	; 171
 288:	ba ea       	ldi	r27, 0xAA	; 170
 28a:	be d3       	rcall	.+1916   	; 0xa08 <__umulhisi3>
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <dist+0x1>
 298:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <dist>
	sonicCNT = 0;
 29c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sonicCNT+0x1>
 2a0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <sonicCNT>
}
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <main>:

int main(void){
	cli();	
 2be:	f8 94       	cli
	stepperInit(&headMotor,2,2);
 2c0:	42 e0       	ldi	r20, 0x02	; 2
 2c2:	62 e0       	ldi	r22, 0x02	; 2
 2c4:	8f e1       	ldi	r24, 0x1F	; 31
 2c6:	91 e0       	ldi	r25, 0x01	; 1
	//	sensorInit();
	servoInit();
 2c8:	c7 d2       	rcall	.+1422   	; 0x858 <stepperInit>
 2ca:	6e d2       	rcall	.+1244   	; 0x7a8 <servoInit>
	servoMoveTo(1,servo1deg);
 2cc:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <servo1deg>
 2d0:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <servo1deg+0x1>
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	85 d2       	rcall	.+1290   	; 0x7e2 <servoMoveTo>
	servoMoveTo(2,servo2deg);
 2d8:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <servo2deg>
 2dc:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <servo2deg+0x1>
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	7f d2       	rcall	.+1278   	; 0x7e2 <servoMoveTo>
	servoMoveTo(3,servo3deg);
 2e4:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <servo3deg>
 2e8:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <servo3deg+0x1>
 2ec:	83 e0       	ldi	r24, 0x03	; 3
	servoMoveTo(4,servo4deg);
 2ee:	79 d2       	rcall	.+1266   	; 0x7e2 <servoMoveTo>
 2f0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2f4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
	
	USART_Init(38400);
 2f8:	84 e0       	ldi	r24, 0x04	; 4
 2fa:	73 d2       	rcall	.+1254   	; 0x7e2 <servoMoveTo>
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	96 e9       	ldi	r25, 0x96	; 150
	sonicCNT=0;
 300:	0a d3       	rcall	.+1556   	; 0x916 <USART_Init>
 302:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sonicCNT+0x1>
 306:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <sonicCNT>
	sonicFlag=0;
 30a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <sonicFlag>
	dist=0;
 30e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <dist+0x1>
	unsigned int H1 = 1650;
	unsigned int H2 = 2100;
	unsigned int H3 = 1250;
	unsigned int H4 = 500;
	
	stepSpeed(&headMotor,headRPM);
 312:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <dist>
 316:	6e e1       	ldi	r22, 0x1E	; 30
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	8f e1       	ldi	r24, 0x1F	; 31
 31c:	91 e0       	ldi	r25, 0x01	; 1
	
	data='0';
 31e:	ae d2       	rcall	.+1372   	; 0x87c <stepSpeed>
 320:	80 e3       	ldi	r24, 0x30	; 48
 322:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <data>
	unsigned char data1;
	sei();
	
	isReady=1;
 326:	78 94       	sei
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	unsigned int deltaCNT = 0;

	unsigned int H1 = 1650;
	unsigned int H2 = 2100;
	unsigned int H3 = 1250;
	unsigned int H4 = 500;
 32e:	0f 2e       	mov	r0, r31
 330:	f4 ef       	ldi	r31, 0xF4	; 244
 332:	ef 2e       	mov	r14, r31
 334:	ff 24       	eor	r15, r15
 336:	f3 94       	inc	r15
	unsigned int deltaFlag = 1;
	unsigned int deltaCNT = 0;

	unsigned int H1 = 1650;
	unsigned int H2 = 2100;
	unsigned int H3 = 1250;
 338:	f0 2d       	mov	r31, r0
 33a:	02 ee       	ldi	r16, 0xE2	; 226
	unsigned int delta = 70;
	unsigned int deltaFlag = 1;
	unsigned int deltaCNT = 0;

	unsigned int H1 = 1650;
	unsigned int H2 = 2100;
 33c:	14 e0       	ldi	r17, 0x04	; 4
 33e:	c4 e3       	ldi	r28, 0x34	; 52

	unsigned int delta = 70;
	unsigned int deltaFlag = 1;
	unsigned int deltaCNT = 0;

	unsigned int H1 = 1650;
 340:	d8 e0       	ldi	r29, 0x08	; 8
 342:	0f 2e       	mov	r0, r31
 344:	f2 e7       	ldi	r31, 0x72	; 114
 346:	cf 2e       	mov	r12, r31
 348:	f6 e0       	ldi	r31, 0x06	; 6
 34a:	df 2e       	mov	r13, r31
	unsigned int tiltDelay=300;
	unsigned int tilt_deg= 100*tiltDelay;

	unsigned int delta = 70;
	unsigned int deltaFlag = 1;
	unsigned int deltaCNT = 0;
 34c:	f0 2d       	mov	r31, r0
 34e:	81 2c       	mov	r8, r1
	unsigned int heightMM=100;
	
	unsigned int tiltDelay=300;
	unsigned int tilt_deg= 100*tiltDelay;

	unsigned int delta = 70;
 350:	91 2c       	mov	r9, r1
 352:	0f 2e       	mov	r0, r31
 354:	f6 e4       	ldi	r31, 0x46	; 70
 356:	af 2e       	mov	r10, r31
 358:	b1 2c       	mov	r11, r1
			headHeight = H2;
			if(headMotor.steps<headHeight && headMotor.steps>=0){
				stepperMove(&headMotor,1);
				//TX0_string("1");
				deltaCNT++;
				if(deltaCNT%10000 == 0 && delta > 54){
 35a:	f0 2d       	mov	r31, r0
 35c:	0f 2e       	mov	r0, r31
 35e:	f0 e1       	ldi	r31, 0x10	; 16
 360:	6f 2e       	mov	r6, r31
 362:	f7 e2       	ldi	r31, 0x27	; 39
 364:	7f 2e       	mov	r7, r31

			case 'e':
			H1 = 1850;
			H2 = 2400;
			H3 = 1350;
			H4 = 600;
 366:	f0 2d       	mov	r31, r0
 368:	0f 2e       	mov	r0, r31
 36a:	f8 e5       	ldi	r31, 0x58	; 88
 36c:	4f 2e       	mov	r4, r31
 36e:	f0 2d       	mov	r31, r0
 370:	68 94       	set
 372:	55 24       	eor	r5, r5
			break;

			case 'e':
			H1 = 1850;
			H2 = 2400;
			H3 = 1350;
 374:	51 f8       	bld	r5, 1
 376:	0f 2e       	mov	r0, r31
 378:	f6 e4       	ldi	r31, 0x46	; 70
 37a:	3f 2e       	mov	r3, r31
 37c:	f0 2d       	mov	r31, r0
 37e:	0f 2e       	mov	r0, r31
 380:	f5 e0       	ldi	r31, 0x05	; 5
 382:	2f 2e       	mov	r2, r31
					delta--;
					servoMoveTo(4,delta);
				}
			}
			else if(headMotor.steps==headHeight){
				deltaCNT=0;
 384:	f0 2d       	mov	r31, r0
 386:	02 c0       	rjmp	.+4      	; 0x38c <main+0xce>
	
	isReady=1;
	//TX0_string("^Ready");
	while (1)	{
		data1=data;
		if(UCSR0A&
 388:	81 2c       	mov	r8, r1
 38a:	91 2c       	mov	r9, r1
		(1<<RXC0)){
			data = RX0_data();
 38c:	5f 9b       	sbis	0x0b, 7	; 11
 38e:	03 c0       	rjmp	.+6      	; 0x396 <main+0xd8>
 390:	ae d2       	rcall	.+1372   	; 0x8ee <RX0_data>
 392:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <data>
		CASE 1 1650 -> 2100
		CASE Q 1700 -> 2250
		CASE A 1700 -> 2400

		*/
		switch(data){
 396:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <data>
 39a:	8e 2f       	mov	r24, r30
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	fc 01       	movw	r30, r24
 3a0:	f1 97       	sbiw	r30, 0x31	; 49
 3a2:	e7 34       	cpi	r30, 0x47	; 71
 3a4:	f1 05       	cpc	r31, r1
 3a6:	90 f7       	brcc	.-28     	; 0x38c <main+0xce>
 3a8:	ea 5b       	subi	r30, 0xBA	; 186
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
		#ifdef variableTest
			case 'q':
			H1 = 1650;
			H2 = 2100;
			H3 = 1250;
			H4 = 500;
 3ac:	24 c3       	rjmp	.+1608   	; 0x9f6 <__tablejump2__>
 3ae:	0f 2e       	mov	r0, r31
 3b0:	f4 ef       	ldi	r31, 0xF4	; 244
 3b2:	ef 2e       	mov	r14, r31
 3b4:	f0 2d       	mov	r31, r0
 3b6:	ff 24       	eor	r15, r15
		switch(data){
		#ifdef variableTest
			case 'q':
			H1 = 1650;
			H2 = 2100;
			H3 = 1250;
 3b8:	f3 94       	inc	r15
 3ba:	02 ee       	ldi	r16, 0xE2	; 226
		*/
		switch(data){
		#ifdef variableTest
			case 'q':
			H1 = 1650;
			H2 = 2100;
 3bc:	14 e0       	ldi	r17, 0x04	; 4
 3be:	24 e3       	ldi	r18, 0x34	; 52
 3c0:	c2 2f       	mov	r28, r18
 3c2:	88 e0       	ldi	r24, 0x08	; 8

		*/
		switch(data){
		#ifdef variableTest
			case 'q':
			H1 = 1650;
 3c4:	d8 2f       	mov	r29, r24
 3c6:	0f 2e       	mov	r0, r31
 3c8:	f2 e7       	ldi	r31, 0x72	; 114
 3ca:	cf 2e       	mov	r12, r31
 3cc:	f6 e0       	ldi	r31, 0x06	; 6
 3ce:	df 2e       	mov	r13, r31
 3d0:	f0 2d       	mov	r31, r0

			case 'w':
			H1 = 1750;
			H2 = 2250;
			H3 = 1300;
			H4 = 550;
 3d2:	dc cf       	rjmp	.-72     	; 0x38c <main+0xce>
 3d4:	0f 2e       	mov	r0, r31
 3d6:	f6 e2       	ldi	r31, 0x26	; 38
 3d8:	ef 2e       	mov	r14, r31
 3da:	f0 2d       	mov	r31, r0
 3dc:	68 94       	set
 3de:	ff 24       	eor	r15, r15
			break;

			case 'w':
			H1 = 1750;
			H2 = 2250;
			H3 = 1300;
 3e0:	f1 f8       	bld	r15, 1
 3e2:	04 e1       	ldi	r16, 0x14	; 20
			H4 = 500;
			break;

			case 'w':
			H1 = 1750;
			H2 = 2250;
 3e4:	15 e0       	ldi	r17, 0x05	; 5
 3e6:	9a ec       	ldi	r25, 0xCA	; 202
 3e8:	c9 2f       	mov	r28, r25
 3ea:	28 e0       	ldi	r18, 0x08	; 8
			H3 = 1250;
			H4 = 500;
			break;

			case 'w':
			H1 = 1750;
 3ec:	d2 2f       	mov	r29, r18
 3ee:	0f 2e       	mov	r0, r31
 3f0:	f6 ed       	ldi	r31, 0xD6	; 214
 3f2:	cf 2e       	mov	r12, r31
 3f4:	f0 2d       	mov	r31, r0
 3f6:	0f 2e       	mov	r0, r31
 3f8:	f6 e0       	ldi	r31, 0x06	; 6
 3fa:	df 2e       	mov	r13, r31
			H2 = 2250;
			H3 = 1300;
			H4 = 550;
			break;
 3fc:	f0 2d       	mov	r31, r0

			case 'e':
			H1 = 1850;
			H2 = 2400;
			H3 = 1350;
			H4 = 600;
 3fe:	c6 cf       	rjmp	.-116    	; 0x38c <main+0xce>
 400:	e4 2c       	mov	r14, r4
			break;

			case 'e':
			H1 = 1850;
			H2 = 2400;
			H3 = 1350;
 402:	f5 2c       	mov	r15, r5
 404:	03 2d       	mov	r16, r3
			H4 = 550;
			break;

			case 'e':
			H1 = 1850;
			H2 = 2400;
 406:	12 2d       	mov	r17, r2
 408:	80 e6       	ldi	r24, 0x60	; 96
 40a:	c8 2f       	mov	r28, r24
 40c:	99 e0       	ldi	r25, 0x09	; 9
			H3 = 1300;
			H4 = 550;
			break;

			case 'e':
			H1 = 1850;
 40e:	d9 2f       	mov	r29, r25
 410:	0f 2e       	mov	r0, r31
 412:	fa e3       	ldi	r31, 0x3A	; 58
 414:	cf 2e       	mov	r12, r31
 416:	f0 2d       	mov	r31, r0
 418:	0f 2e       	mov	r0, r31
 41a:	f7 e0       	ldi	r31, 0x07	; 7
			H2 = 2400;
			H3 = 1350;
			H4 = 600;
			break;
 41c:	df 2e       	mov	r13, r31

			case '1':	//헤드 이동 및 스캔 준비
			headHeight = H1;
			servoMoveTo(4,70);
 41e:	f0 2d       	mov	r31, r0
 420:	b5 cf       	rjmp	.-150    	; 0x38c <main+0xce>
 422:	66 e4       	ldi	r22, 0x46	; 70
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	84 e0       	ldi	r24, 0x04	; 4
			if(headMotor.steps<headHeight && headMotor.steps>=0) {
 428:	dc d1       	rcall	.+952    	; 0x7e2 <servoMoveTo>
 42a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <headMotor+0x8>
 42e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <headMotor+0x9>
 432:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <headMotor+0xa>
 436:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <headMotor+0xb>
 43a:	a6 01       	movw	r20, r12
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	84 17       	cp	r24, r20
 442:	95 07       	cpc	r25, r21
 444:	a6 07       	cpc	r26, r22
 446:	b7 07       	cpc	r27, r23
 448:	44 f4       	brge	.+16     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				stepperMove(&headMotor,1);
 44a:	bb 23       	and	r27, r27
 44c:	34 f0       	brlt	.+12     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	8f e1       	ldi	r24, 0x1F	; 31
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	34 d2       	rcall	.+1128   	; 0x8c0 <stepperMove>
			}
			else if(headMotor.steps==headHeight) {
 458:	99 cf       	rjmp	.-206    	; 0x38c <main+0xce>
 45a:	84 17       	cp	r24, r20
 45c:	95 07       	cpc	r25, r21
 45e:	a6 07       	cpc	r26, r22
 460:	b7 07       	cpc	r27, r23
 462:	09 f0       	breq	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
				if(timer2Token==1) {
 464:	93 cf       	rjmp	.-218    	; 0x38c <main+0xce>
 466:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timer2Token>
 46a:	81 30       	cpi	r24, 0x01	; 1
					timer2Token=0;
 46c:	39 f4       	brne	.+14     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
					data=0;
 46e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <timer2Token>
					isReady=1;
 472:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <data>
				}
				if(isReady==1) {
 476:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 47a:	05 c0       	rjmp	.+10     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 47c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
					TX0_string("#1");
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	09 f0       	breq	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 484:	83 cf       	rjmp	.-250    	; 0x38c <main+0xce>
 486:	88 e0       	ldi	r24, 0x08	; 8
					isReady=0;
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	37 d2       	rcall	.+1134   	; 0x8fa <TX0_string>
 48c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
			}
			break;

			case '2':	//헤드 이동 및 스캔 준비
			headHeight = H2;
			if(headMotor.steps<headHeight && headMotor.steps>=0){
 490:	7d cf       	rjmp	.-262    	; 0x38c <main+0xce>
 492:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <headMotor+0x8>
 496:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <headMotor+0x9>
 49a:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <headMotor+0xa>
 49e:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <headMotor+0xb>
 4a2:	ae 01       	movw	r20, r28
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	84 17       	cp	r24, r20
 4aa:	95 07       	cpc	r25, r21
 4ac:	a6 07       	cpc	r26, r22
 4ae:	b7 07       	cpc	r27, r23
				stepperMove(&headMotor,1);
 4b0:	8c f5       	brge	.+98     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 4b2:	bb 23       	and	r27, r27
 4b4:	7c f1       	brlt	.+94     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	70 e0       	ldi	r23, 0x00	; 0
				//TX0_string("1");
				deltaCNT++;
 4ba:	8f e1       	ldi	r24, 0x1F	; 31
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	00 d2       	rcall	.+1024   	; 0x8c0 <stepperMove>
				if(deltaCNT%10000 == 0 && delta > 54){
 4c0:	2f ef       	ldi	r18, 0xFF	; 255
 4c2:	82 1a       	sub	r8, r18
 4c4:	92 0a       	sbc	r9, r18
 4c6:	94 01       	movw	r18, r8
 4c8:	32 95       	swap	r19
 4ca:	22 95       	swap	r18
 4cc:	2f 70       	andi	r18, 0x0F	; 15
 4ce:	23 27       	eor	r18, r19
 4d0:	3f 70       	andi	r19, 0x0F	; 15
 4d2:	23 27       	eor	r18, r19
 4d4:	a7 e4       	ldi	r26, 0x47	; 71
 4d6:	b3 e0       	ldi	r27, 0x03	; 3
 4d8:	97 d2       	rcall	.+1326   	; 0xa08 <__umulhisi3>
 4da:	96 95       	lsr	r25
 4dc:	87 95       	ror	r24
 4de:	96 95       	lsr	r25
 4e0:	87 95       	ror	r24
 4e2:	96 95       	lsr	r25
 4e4:	87 95       	ror	r24
 4e6:	86 9d       	mul	r24, r6
 4e8:	90 01       	movw	r18, r0
 4ea:	87 9d       	mul	r24, r7
 4ec:	30 0d       	add	r19, r0
 4ee:	96 9d       	mul	r25, r6
 4f0:	30 0d       	add	r19, r0
 4f2:	11 24       	eor	r1, r1
 4f4:	82 16       	cp	r8, r18
 4f6:	93 06       	cpc	r9, r19
 4f8:	09 f0       	breq	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4fa:	48 cf       	rjmp	.-368    	; 0x38c <main+0xce>
 4fc:	87 e3       	ldi	r24, 0x37	; 55
 4fe:	a8 16       	cp	r10, r24
					delta--;
 500:	b1 04       	cpc	r11, r1
 502:	08 f4       	brcc	.+2      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 504:	43 cf       	rjmp	.-378    	; 0x38c <main+0xce>
					servoMoveTo(4,delta);
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	a9 1a       	sub	r10, r25
 50a:	b1 08       	sbc	r11, r1
 50c:	b5 01       	movw	r22, r10
 50e:	84 e0       	ldi	r24, 0x04	; 4
				}
			}
			else if(headMotor.steps==headHeight){
 510:	68 d1       	rcall	.+720    	; 0x7e2 <servoMoveTo>
 512:	3c cf       	rjmp	.-392    	; 0x38c <main+0xce>
 514:	84 17       	cp	r24, r20
 516:	95 07       	cpc	r25, r21
 518:	a6 07       	cpc	r26, r22
				deltaCNT=0;
				if(timer2Token==1){
 51a:	b7 07       	cpc	r27, r23
 51c:	c1 f4       	brne	.+48     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 51e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timer2Token>
					timer2Token=0;
 522:	81 30       	cpi	r24, 0x01	; 1
					data=0;
 524:	39 f4       	brne	.+14     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 526:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <timer2Token>
					isReady=1;
 52a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <data>
				}
				if(isReady==1) {
 52e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 532:	05 c0       	rjmp	.+10     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 534:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
					deltaCNT=0;
					TX0_string("#2");
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	09 f0       	breq	.+2      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 53c:	25 cf       	rjmp	.-438    	; 0x388 <main+0xca>
					isReady=0;
 53e:	8b e0       	ldi	r24, 0x0B	; 11
 540:	91 e0       	ldi	r25, 0x01	; 1
					timer2Token=0;
					data=0;
					isReady=1;
				}
				if(isReady==1) {
					deltaCNT=0;
 542:	db d1       	rcall	.+950    	; 0x8fa <TX0_string>
 544:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
					TX0_string("#2");
					isReady=0;
				}
			}
			else if(headMotor.steps>headHeight)
 548:	81 2c       	mov	r8, r1
 54a:	91 2c       	mov	r9, r1
 54c:	1f cf       	rjmp	.-450    	; 0x38c <main+0xce>
 54e:	48 17       	cp	r20, r24
 550:	59 07       	cpc	r21, r25
 552:	6a 07       	cpc	r22, r26
			stepperMove(&headMotor,-1);
 554:	7b 07       	cpc	r23, r27
 556:	0c f0       	brlt	.+2      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 558:	19 cf       	rjmp	.-462    	; 0x38c <main+0xce>
 55a:	6f ef       	ldi	r22, 0xFF	; 255
 55c:	7f ef       	ldi	r23, 0xFF	; 255
 55e:	8f e1       	ldi	r24, 0x1F	; 31
 560:	91 e0       	ldi	r25, 0x01	; 1
			break;

			case '3':	//헤드 이동 및 스캔 준비
			headHeight = H3;
			if(headMotor.steps<headHeight && headMotor.steps>=0){
 562:	ae d1       	rcall	.+860    	; 0x8c0 <stepperMove>
 564:	13 cf       	rjmp	.-474    	; 0x38c <main+0xce>
 566:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <headMotor+0x8>
 56a:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <headMotor+0x9>
 56e:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <headMotor+0xa>
 572:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <headMotor+0xb>
 576:	a8 01       	movw	r20, r16
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	84 17       	cp	r24, r20
 57e:	95 07       	cpc	r25, r21
 580:	a6 07       	cpc	r26, r22
 582:	b7 07       	cpc	r27, r23
				stepperMove(&headMotor,-1);
 584:	44 f4       	brge	.+16     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 586:	bb 23       	and	r27, r27
 588:	34 f0       	brlt	.+12     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 58a:	6f ef       	ldi	r22, 0xFF	; 255
 58c:	7f ef       	ldi	r23, 0xFF	; 255
 58e:	8f e1       	ldi	r24, 0x1F	; 31
 590:	91 e0       	ldi	r25, 0x01	; 1
			}
			else if(headMotor.steps==headHeight){
 592:	96 d1       	rcall	.+812    	; 0x8c0 <stepperMove>
 594:	fb ce       	rjmp	.-522    	; 0x38c <main+0xce>
 596:	84 17       	cp	r24, r20
 598:	95 07       	cpc	r25, r21
				if(timer2Token==1){
 59a:	a6 07       	cpc	r26, r22
 59c:	b7 07       	cpc	r27, r23
 59e:	d9 f4       	brne	.+54     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5a0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timer2Token>
					timer2Token=0;
 5a4:	81 30       	cpi	r24, 0x01	; 1
					data=0;
 5a6:	39 f4       	brne	.+14     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5a8:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <timer2Token>
					isReady=1;
 5ac:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <data>
				}
				if(isReady==1){
 5b0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5b6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
					TX0_string("#3");
 5ba:	81 30       	cpi	r24, 0x01	; 1
 5bc:	09 f0       	breq	.+2      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5be:	e6 ce       	rjmp	.-564    	; 0x38c <main+0xce>
					delta = 70;
					isReady=0;
 5c0:	8e e0       	ldi	r24, 0x0E	; 14
 5c2:	91 e0       	ldi	r25, 0x01	; 1
					data=0;
					isReady=1;
				}
				if(isReady==1){
					TX0_string("#3");
					delta = 70;
 5c4:	9a d1       	rcall	.+820    	; 0x8fa <TX0_string>
 5c6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 5ca:	0f 2e       	mov	r0, r31
 5cc:	f6 e4       	ldi	r31, 0x46	; 70
					isReady=0;
				}
			}
			else if(headMotor.steps>headHeight) {
 5ce:	af 2e       	mov	r10, r31
 5d0:	b1 2c       	mov	r11, r1
 5d2:	f0 2d       	mov	r31, r0
 5d4:	db ce       	rjmp	.-586    	; 0x38c <main+0xce>
 5d6:	48 17       	cp	r20, r24
 5d8:	59 07       	cpc	r21, r25
				stepperMove(&headMotor,-1);
 5da:	6a 07       	cpc	r22, r26
 5dc:	7b 07       	cpc	r23, r27
 5de:	0c f0       	brlt	.+2      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5e0:	d5 ce       	rjmp	.-598    	; 0x38c <main+0xce>
 5e2:	6f ef       	ldi	r22, 0xFF	; 255
				deltaCNT++;
 5e4:	7f ef       	ldi	r23, 0xFF	; 255
 5e6:	8f e1       	ldi	r24, 0x1F	; 31
 5e8:	91 e0       	ldi	r25, 0x01	; 1
				if(deltaCNT%7200 == 0 && delta < 71){
 5ea:	6a d1       	rcall	.+724    	; 0x8c0 <stepperMove>
 5ec:	2f ef       	ldi	r18, 0xFF	; 255
 5ee:	82 1a       	sub	r8, r18
 5f0:	92 0a       	sbc	r9, r18
 5f2:	c4 01       	movw	r24, r8
 5f4:	60 e2       	ldi	r22, 0x20	; 32
 5f6:	7c e1       	ldi	r23, 0x1C	; 28
 5f8:	ac d1       	rcall	.+856    	; 0x952 <__udivmodhi4>
 5fa:	89 2b       	or	r24, r25
 5fc:	09 f0       	breq	.+2      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5fe:	c6 ce       	rjmp	.-628    	; 0x38c <main+0xce>
 600:	87 e4       	ldi	r24, 0x47	; 71
					delta++;
 602:	a8 16       	cp	r10, r24
 604:	b1 04       	cpc	r11, r1
 606:	08 f0       	brcs	.+2      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
					servoMoveTo(4,delta);
 608:	c1 ce       	rjmp	.-638    	; 0x38c <main+0xce>
 60a:	9f ef       	ldi	r25, 0xFF	; 255
 60c:	a9 1a       	sub	r10, r25
 60e:	b9 0a       	sbc	r11, r25
 610:	b5 01       	movw	r22, r10
			}
			break;

			case '4':	//헤드 이동 및 스캔 준비
			headHeight = H4;
			servoMoveTo(4,70); // init center
 612:	84 e0       	ldi	r24, 0x04	; 4
 614:	e6 d0       	rcall	.+460    	; 0x7e2 <servoMoveTo>
 616:	ba ce       	rjmp	.-652    	; 0x38c <main+0xce>
 618:	66 e4       	ldi	r22, 0x46	; 70
			if(headMotor.steps<headHeight && headMotor.steps>=0)
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	84 e0       	ldi	r24, 0x04	; 4
 61e:	e1 d0       	rcall	.+450    	; 0x7e2 <servoMoveTo>
 620:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <headMotor+0x8>
 624:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <headMotor+0x9>
 628:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <headMotor+0xa>
 62c:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <headMotor+0xb>
 630:	a7 01       	movw	r20, r14
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	84 17       	cp	r24, r20
 638:	95 07       	cpc	r25, r21
 63a:	a6 07       	cpc	r26, r22
 63c:	b7 07       	cpc	r27, r23
			stepperMove(&headMotor,-1);
 63e:	44 f4       	brge	.+16     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 640:	bb 23       	and	r27, r27
 642:	34 f0       	brlt	.+12     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 644:	6f ef       	ldi	r22, 0xFF	; 255
 646:	7f ef       	ldi	r23, 0xFF	; 255
 648:	8f e1       	ldi	r24, 0x1F	; 31
			else if(headMotor.steps==headHeight){
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	39 d1       	rcall	.+626    	; 0x8c0 <stepperMove>
 64e:	9e ce       	rjmp	.-708    	; 0x38c <main+0xce>
 650:	84 17       	cp	r24, r20
 652:	95 07       	cpc	r25, r21
				if(timer2Token==1){
 654:	a6 07       	cpc	r26, r22
 656:	b7 07       	cpc	r27, r23
 658:	b1 f4       	brne	.+44     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 65a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timer2Token>
					timer2Token=0;
 65e:	81 30       	cpi	r24, 0x01	; 1
					data=0;
 660:	39 f4       	brne	.+14     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
					isReady=1;
 662:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <timer2Token>
 666:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <data>
				}
				if(isReady==1){
 66a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 66e:	05 c0       	rjmp	.+10     	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 670:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
					TX0_string("#4");
 674:	81 30       	cpi	r24, 0x01	; 1
 676:	09 f0       	breq	.+2      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 678:	89 ce       	rjmp	.-750    	; 0x38c <main+0xce>
					isReady=0;
 67a:	81 e1       	ldi	r24, 0x11	; 17
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	3d d1       	rcall	.+634    	; 0x8fa <TX0_string>
				}
			}
			else if(headMotor.steps>headHeight)
 680:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 684:	83 ce       	rjmp	.-762    	; 0x38c <main+0xce>
 686:	48 17       	cp	r20, r24
 688:	59 07       	cpc	r21, r25
 68a:	6a 07       	cpc	r22, r26
			stepperMove(&headMotor,-1);
 68c:	7b 07       	cpc	r23, r27
 68e:	0c f0       	brlt	.+2      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 690:	7d ce       	rjmp	.-774    	; 0x38c <main+0xce>
 692:	6f ef       	ldi	r22, 0xFF	; 255
 694:	7f ef       	ldi	r23, 0xFF	; 255
 696:	8f e1       	ldi	r24, 0x1F	; 31
 698:	91 e0       	ldi	r25, 0x01	; 1
			break;

			case '5':	//헤드 이동 및 스캔 준비
			headHeight = 0;
			if(headMotor.steps<headHeight && headMotor.steps>=0) {
 69a:	12 d1       	rcall	.+548    	; 0x8c0 <stepperMove>
 69c:	77 ce       	rjmp	.-786    	; 0x38c <main+0xce>
 69e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <headMotor+0x8>
 6a2:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <headMotor+0x9>
 6a6:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <headMotor+0xa>
				stepperMove(&headMotor,-1);
			}
			
			else if(headMotor.steps==headHeight) {
 6aa:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <headMotor+0xb>
 6ae:	00 97       	sbiw	r24, 0x00	; 0
				if(timer2Token==1){
 6b0:	a1 05       	cpc	r26, r1
 6b2:	b1 05       	cpc	r27, r1
 6b4:	b1 f4       	brne	.+44     	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6b6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timer2Token>
					timer2Token=0;
					data=0;
 6ba:	81 30       	cpi	r24, 0x01	; 1
 6bc:	39 f4       	brne	.+14     	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
					isReady=1;
 6be:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <timer2Token>
				}
				if(isReady==1){
 6c2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <data>
 6c6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
					TX0_string("#5");
 6cc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 6d0:	81 30       	cpi	r24, 0x01	; 1
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
					isReady=0;
 6d4:	5b ce       	rjmp	.-842    	; 0x38c <main+0xce>
 6d6:	84 e1       	ldi	r24, 0x14	; 20
 6d8:	91 e0       	ldi	r25, 0x01	; 1
				}
			}
			else if(headMotor.steps>headHeight)
 6da:	0f d1       	rcall	.+542    	; 0x8fa <TX0_string>
 6dc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 6e0:	55 ce       	rjmp	.-854    	; 0x38c <main+0xce>
 6e2:	18 16       	cp	r1, r24
			stepperMove(&headMotor,-1);
 6e4:	19 06       	cpc	r1, r25
 6e6:	1a 06       	cpc	r1, r26
 6e8:	1b 06       	cpc	r1, r27
 6ea:	0c f0       	brlt	.+2      	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 6ec:	4f ce       	rjmp	.-866    	; 0x38c <main+0xce>
 6ee:	6f ef       	ldi	r22, 0xFF	; 255
 6f0:	7f ef       	ldi	r23, 0xFF	; 255
			break;
			
			case '7':
			delta = 50;
			servoMoveTo(4,delta);
 6f2:	8f e1       	ldi	r24, 0x1F	; 31
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	e4 d0       	rcall	.+456    	; 0x8c0 <stepperMove>
 6f8:	49 ce       	rjmp	.-878    	; 0x38c <main+0xce>
 6fa:	62 e3       	ldi	r22, 0x32	; 50
			else if(headMotor.steps>headHeight)
			stepperMove(&headMotor,-1);
			break;
			
			case '7':
			delta = 50;
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	84 e0       	ldi	r24, 0x04	; 4
 700:	70 d0       	rcall	.+224    	; 0x7e2 <servoMoveTo>
 702:	0f 2e       	mov	r0, r31
			servoMoveTo(4,delta);
			break;
 704:	f2 e3       	ldi	r31, 0x32	; 50

			case '8':
			if(49 <= delta && delta <=71){
 706:	af 2e       	mov	r10, r31
 708:	b1 2c       	mov	r11, r1
 70a:	f0 2d       	mov	r31, r0
 70c:	3f ce       	rjmp	.-898    	; 0x38c <main+0xce>
 70e:	c5 01       	movw	r24, r10
				servoMoveTo(4,delta);
 710:	c1 97       	sbiw	r24, 0x31	; 49
 712:	47 97       	sbiw	r24, 0x17	; 23
 714:	08 f0       	brcs	.+2      	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 716:	3a ce       	rjmp	.-908    	; 0x38c <main+0xce>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 718:	b5 01       	movw	r22, r10
 71a:	84 e0       	ldi	r24, 0x04	; 4
 71c:	62 d0       	rcall	.+196    	; 0x7e2 <servoMoveTo>
 71e:	2f ef       	ldi	r18, 0xFF	; 255
 720:	8b ed       	ldi	r24, 0xDB	; 219
 722:	95 e0       	ldi	r25, 0x05	; 5
 724:	21 50       	subi	r18, 0x01	; 1
 726:	80 40       	sbci	r24, 0x00	; 0
				_delay_ms(120);
				delta--;
 728:	90 40       	sbci	r25, 0x00	; 0
 72a:	e1 f7       	brne	.-8      	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 72e:	00 00       	nop
			}
			break;

			case '9':
			if(delta <=70){
 730:	21 e0       	ldi	r18, 0x01	; 1
 732:	a2 1a       	sub	r10, r18
 734:	b1 08       	sbc	r11, r1
 736:	2a ce       	rjmp	.-940    	; 0x38c <main+0xce>
 738:	87 e4       	ldi	r24, 0x47	; 71
				servoMoveTo(4,delta);
 73a:	a8 16       	cp	r10, r24
 73c:	b1 04       	cpc	r11, r1
 73e:	08 f0       	brcs	.+2      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 740:	25 ce       	rjmp	.-950    	; 0x38c <main+0xce>
 742:	b5 01       	movw	r22, r10
 744:	84 e0       	ldi	r24, 0x04	; 4
 746:	4d d0       	rcall	.+154    	; 0x7e2 <servoMoveTo>
 748:	9f ef       	ldi	r25, 0xFF	; 255
 74a:	2b ed       	ldi	r18, 0xDB	; 219
 74c:	85 e0       	ldi	r24, 0x05	; 5
 74e:	91 50       	subi	r25, 0x01	; 1
 750:	20 40       	sbci	r18, 0x00	; 0
				_delay_ms(120);
				delta++;
 752:	80 40       	sbci	r24, 0x00	; 0
 754:	e1 f7       	brne	.-8      	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 756:	00 c0       	rjmp	.+0      	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
 758:	00 00       	nop
			}
			break;

			case 'c':
			stepSpeed(&headMotor,headRPM);
 75a:	9f ef       	ldi	r25, 0xFF	; 255
 75c:	a9 1a       	sub	r10, r25
 75e:	b9 0a       	sbc	r11, r25
 760:	15 ce       	rjmp	.-982    	; 0x38c <main+0xce>
 762:	6e e1       	ldi	r22, 0x1E	; 30
 764:	70 e0       	ldi	r23, 0x00	; 0
			if(headMotor.steps>0){
 766:	8f e1       	ldi	r24, 0x1F	; 31
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	88 d0       	rcall	.+272    	; 0x87c <stepSpeed>
 76c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <headMotor+0x8>
 770:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <headMotor+0x9>
 774:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <headMotor+0xa>
 778:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <headMotor+0xb>
 77c:	18 16       	cp	r1, r24
 77e:	19 06       	cpc	r1, r25
				timer2Token=1;
 780:	1a 06       	cpc	r1, r26
 782:	1b 06       	cpc	r1, r27
 784:	4c f4       	brge	.+18     	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
				stepperMove(&headMotor,-1);
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timer2Token>
 78c:	6f ef       	ldi	r22, 0xFF	; 255
 78e:	7f ef       	ldi	r23, 0xFF	; 255
 790:	8f e1       	ldi	r24, 0x1F	; 31
 792:	91 e0       	ldi	r25, 0x01	; 1
			}
			else if(headMotor.steps<=0){
				timer2Token=0;
 794:	95 d0       	rcall	.+298    	; 0x8c0 <stepperMove>
 796:	fa cd       	rjmp	.-1036   	; 0x38c <main+0xce>
				TIMSK &=(0<<OCIE2);
 798:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <timer2Token>
				PORTE |= (1<<PORTE5);
 79c:	87 b7       	in	r24, 0x37	; 55
				data=0;
 79e:	17 be       	out	0x37, r1	; 55
 7a0:	1d 9a       	sbi	0x03, 5	; 3
 7a2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <data>
 7a6:	f2 cd       	rjmp	.-1052   	; 0x38c <main+0xce>

000007a8 <servoInit>:
		ICR3 = Period; // Tilt Motor Period 39999 = 20ms
		OCR3B = 0;
		
		DDRA = 0x80;
		DDRE|=(1<<PINE3)|(1<<PINE4)|(1<<PINE5);
		DDRB = 0xE0;
 7a8:	8a ea       	ldi	r24, 0xAA	; 170
 7aa:	8f bd       	out	0x2f, r24	; 47
 7ac:	2a e1       	ldi	r18, 0x1A	; 26
 7ae:	2e bd       	out	0x2e, r18	; 46
 7b0:	8f e3       	ldi	r24, 0x3F	; 63
 7b2:	9c e9       	ldi	r25, 0x9C	; 156
 7b4:	97 bd       	out	0x27, r25	; 39
 7b6:	86 bd       	out	0x26, r24	; 38
 7b8:	32 ea       	ldi	r19, 0xA2	; 162
 7ba:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 7be:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 7c2:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 7c6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 7ca:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 7ce:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 7d2:	80 e8       	ldi	r24, 0x80	; 128
 7d4:	8a bb       	out	0x1a, r24	; 26
 7d6:	82 b1       	in	r24, 0x02	; 2
 7d8:	88 63       	ori	r24, 0x38	; 56
 7da:	82 b9       	out	0x02, r24	; 2
 7dc:	80 ee       	ldi	r24, 0xE0	; 224
 7de:	87 bb       	out	0x17, r24	; 23
 7e0:	08 95       	ret

000007e2 <servoMoveTo>:

void servoMoveTo(unsigned char motorNum, unsigned int deg)
{
	//OCR1x 2000 ~ 4000 (0 ~ 180)
	//OCR0  9 ~ 36.69
	switch(motorNum)
 7e2:	82 30       	cpi	r24, 0x02	; 2
 7e4:	a1 f0       	breq	.+40     	; 0x80e <servoMoveTo+0x2c>
 7e6:	18 f4       	brcc	.+6      	; 0x7ee <servoMoveTo+0xc>
 7e8:	81 30       	cpi	r24, 0x01	; 1
 7ea:	31 f0       	breq	.+12     	; 0x7f8 <servoMoveTo+0x16>
 7ec:	08 95       	ret
 7ee:	83 30       	cpi	r24, 0x03	; 3
 7f0:	c9 f0       	breq	.+50     	; 0x824 <servoMoveTo+0x42>
 7f2:	84 30       	cpi	r24, 0x04	; 4
 7f4:	21 f1       	breq	.+72     	; 0x83e <servoMoveTo+0x5c>
 7f6:	08 95       	ret
	{
		case 1:
			OCR1A = deg*20+1200;
 7f8:	24 e1       	ldi	r18, 0x14	; 20
 7fa:	26 9f       	mul	r18, r22
 7fc:	c0 01       	movw	r24, r0
 7fe:	27 9f       	mul	r18, r23
 800:	90 0d       	add	r25, r0
 802:	11 24       	eor	r1, r1
 804:	80 55       	subi	r24, 0x50	; 80
 806:	9b 4f       	sbci	r25, 0xFB	; 251
 808:	9b bd       	out	0x2b, r25	; 43
 80a:	8a bd       	out	0x2a, r24	; 42
			break;
 80c:	08 95       	ret
		case 2:
			OCR1B = deg*20+1200;
 80e:	24 e1       	ldi	r18, 0x14	; 20
 810:	26 9f       	mul	r18, r22
 812:	c0 01       	movw	r24, r0
 814:	27 9f       	mul	r18, r23
 816:	90 0d       	add	r25, r0
 818:	11 24       	eor	r1, r1
 81a:	80 55       	subi	r24, 0x50	; 80
 81c:	9b 4f       	sbci	r25, 0xFB	; 251
 81e:	99 bd       	out	0x29, r25	; 41
 820:	88 bd       	out	0x28, r24	; 40
			break;
 822:	08 95       	ret
		case 3:
			OCR1C = deg*20+1200;
 824:	24 e1       	ldi	r18, 0x14	; 20
 826:	26 9f       	mul	r18, r22
 828:	c0 01       	movw	r24, r0
 82a:	27 9f       	mul	r18, r23
 82c:	90 0d       	add	r25, r0
 82e:	11 24       	eor	r1, r1
 830:	80 55       	subi	r24, 0x50	; 80
 832:	9b 4f       	sbci	r25, 0xFB	; 251
 834:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 838:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			break;
 83c:	08 95       	ret
		case 4:
			OCR3A = deg*20+1200;
 83e:	24 e1       	ldi	r18, 0x14	; 20
 840:	26 9f       	mul	r18, r22
 842:	c0 01       	movw	r24, r0
 844:	27 9f       	mul	r18, r23
 846:	90 0d       	add	r25, r0
 848:	11 24       	eor	r1, r1
 84a:	80 55       	subi	r24, 0x50	; 80
 84c:	9b 4f       	sbci	r25, 0xFB	; 251
 84e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 852:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 856:	08 95       	ret

00000858 <stepperInit>:
 *  Author: JooHwanSang
 */ 
#include "stepper.h"

void stepperInit(struct STEPPER *stepper, unsigned char motorNum, unsigned char uSteps)
{
 858:	fc 01       	movw	r30, r24
	DDRC = 0xff;		// PORTC output
 85a:	8f ef       	ldi	r24, 0xFF	; 255
 85c:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;		// active low Enable
 85e:	15 ba       	out	0x15, r1	; 21
	
	stepper->motorNum = motorNum;
 860:	60 83       	st	Z, r22
	stepper->uSteps = uSteps;	// 1/2 uSteps
 862:	41 83       	std	Z+1, r20	; 0x01
	stepper->dir = 1;		//dir = 1 or -1
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	93 83       	std	Z+3, r25	; 0x03
 86a:	82 83       	std	Z+2, r24	; 0x02
	stepper->steps = 0;
 86c:	10 86       	std	Z+8, r1	; 0x08
 86e:	11 86       	std	Z+9, r1	; 0x09
 870:	12 86       	std	Z+10, r1	; 0x0a
 872:	13 86       	std	Z+11, r1	; 0x0b
	stepper->flag = 0;
 874:	14 8a       	std	Z+20, r1	; 0x14
	
	PORTC = (0<<USM21)|(1<<USM20);
 876:	82 e0       	ldi	r24, 0x02	; 2
 878:	85 bb       	out	0x15, r24	; 21
 87a:	08 95       	ret

0000087c <stepSpeed>:
		break;
	}*/
}
void stepSpeed(struct STEPPER *stepper, unsigned int rpm)
{
	if(stepper->motorNum==2) OCR2 = 16000000/256/(rpm*200*2/60)/2;
 87c:	fc 01       	movw	r30, r24
 87e:	80 81       	ld	r24, Z
 880:	82 30       	cpi	r24, 0x02	; 2
 882:	e9 f4       	brne	.+58     	; 0x8be <stepSpeed+0x42>
 884:	80 e9       	ldi	r24, 0x90	; 144
 886:	91 e0       	ldi	r25, 0x01	; 1
 888:	68 9f       	mul	r22, r24
 88a:	90 01       	movw	r18, r0
 88c:	69 9f       	mul	r22, r25
 88e:	30 0d       	add	r19, r0
 890:	78 9f       	mul	r23, r24
 892:	30 0d       	add	r19, r0
 894:	11 24       	eor	r1, r1
 896:	a9 e8       	ldi	r26, 0x89	; 137
 898:	b8 e8       	ldi	r27, 0x88	; 136
 89a:	b6 d0       	rcall	.+364    	; 0xa08 <__umulhisi3>
 89c:	96 95       	lsr	r25
 89e:	87 95       	ror	r24
 8a0:	92 95       	swap	r25
 8a2:	82 95       	swap	r24
 8a4:	8f 70       	andi	r24, 0x0F	; 15
 8a6:	89 27       	eor	r24, r25
 8a8:	9f 70       	andi	r25, 0x0F	; 15
 8aa:	89 27       	eor	r24, r25
 8ac:	9c 01       	movw	r18, r24
 8ae:	40 e0       	ldi	r20, 0x00	; 0
 8b0:	50 e0       	ldi	r21, 0x00	; 0
 8b2:	62 e1       	ldi	r22, 0x12	; 18
 8b4:	7a e7       	ldi	r23, 0x7A	; 122
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	81 d0       	rcall	.+258    	; 0x9be <__divmodsi4>
 8bc:	23 bd       	out	0x23, r18	; 35
 8be:	08 95       	ret

000008c0 <stepperMove>:
}
void stepperMove(struct STEPPER *stepper, int dir)
{	
	if(stepper->motorNum==2)
 8c0:	fc 01       	movw	r30, r24
 8c2:	20 81       	ld	r18, Z
 8c4:	22 30       	cpi	r18, 0x02	; 2
 8c6:	91 f4       	brne	.+36     	; 0x8ec <stepperMove+0x2c>
	{
		timer2Token=1;
 8c8:	21 e0       	ldi	r18, 0x01	; 1
 8ca:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <timer2Token>
		TCCR2 = (1<<WGM21)|(0<<WGM20)|(0<<COM21)|(0<<COM20)|(1<<CS22)|(0<<CS21)|(0<<CS20);
 8ce:	2c e0       	ldi	r18, 0x0C	; 12
 8d0:	25 bd       	out	0x25, r18	; 37
		TIMSK = (1<<OCIE2);
 8d2:	20 e8       	ldi	r18, 0x80	; 128
 8d4:	27 bf       	out	0x37, r18	; 55
		if(stepper->dir != dir)
 8d6:	22 81       	ldd	r18, Z+2	; 0x02
 8d8:	33 81       	ldd	r19, Z+3	; 0x03
 8da:	26 17       	cp	r18, r22
 8dc:	37 07       	cpc	r19, r23
 8de:	31 f0       	breq	.+12     	; 0x8ec <stepperMove+0x2c>
		{
			PORTC = PORTC^(1<<DIR2);
 8e0:	35 b3       	in	r19, 0x15	; 21
 8e2:	24 e0       	ldi	r18, 0x04	; 4
 8e4:	23 27       	eor	r18, r19
 8e6:	25 bb       	out	0x15, r18	; 21
			stepper->dir = dir;
 8e8:	73 83       	std	Z+3, r23	; 0x03
 8ea:	62 83       	std	Z+2, r22	; 0x02
 8ec:	08 95       	ret

000008ee <RX0_data>:
	while(str[i] != '\0')
	{
		TX1_data(str[i]);
		i++;
	}
}
 8ee:	8c b1       	in	r24, 0x0c	; 12
 8f0:	08 95       	ret

000008f2 <TX0_data>:
 8f2:	5d 9b       	sbis	0x0b, 5	; 11
 8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <TX0_data>
 8f6:	8c b9       	out	0x0c, r24	; 12
 8f8:	08 95       	ret

000008fa <TX0_string>:
 8fa:	cf 93       	push	r28
 8fc:	df 93       	push	r29
 8fe:	ec 01       	movw	r28, r24
 900:	88 81       	ld	r24, Y
 902:	88 23       	and	r24, r24
 904:	29 f0       	breq	.+10     	; 0x910 <TX0_string+0x16>
 906:	21 96       	adiw	r28, 0x01	; 1
 908:	f4 df       	rcall	.-24     	; 0x8f2 <TX0_data>
 90a:	89 91       	ld	r24, Y+
 90c:	81 11       	cpse	r24, r1
 90e:	fc cf       	rjmp	.-8      	; 0x908 <TX0_string+0xe>
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	08 95       	ret

00000916 <USART_Init>:

void USART_Init(unsigned int baud)
{
	unsigned int ubrr;
	ubrr=(F_CPU/16/baud)-1;
 916:	9c 01       	movw	r18, r24
 918:	40 e0       	ldi	r20, 0x00	; 0
 91a:	50 e0       	ldi	r21, 0x00	; 0
 91c:	60 e4       	ldi	r22, 0x40	; 64
 91e:	72 e4       	ldi	r23, 0x42	; 66
 920:	8f e0       	ldi	r24, 0x0F	; 15
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	2a d0       	rcall	.+84     	; 0x97a <__udivmodsi4>
 926:	21 50       	subi	r18, 0x01	; 1
 928:	31 09       	sbc	r19, r1
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 92a:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
 92e:	29 b9       	out	0x09, r18	; 9
	/* Enable receiver and transmitter */
	UCSR0A = 0x00;
 930:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 932:	98 e1       	ldi	r25, 0x18	; 24
 934:	9a b9       	out	0x0a, r25	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
 936:	86 e0       	ldi	r24, 0x06	; 6
 938:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
 93c:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char)ubrr;
 940:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	/* Enable receiver and transmitter */
	UCSR1A = 0x00;
 944:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 948:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	/* Set frame format: 8data, 1stop bit */
	UCSR1C = (1<<UCSZ10)|(1<<UCSZ11);
 94c:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 950:	08 95       	ret

00000952 <__udivmodhi4>:
 952:	aa 1b       	sub	r26, r26
 954:	bb 1b       	sub	r27, r27
 956:	51 e1       	ldi	r21, 0x11	; 17
 958:	07 c0       	rjmp	.+14     	; 0x968 <__udivmodhi4_ep>

0000095a <__udivmodhi4_loop>:
 95a:	aa 1f       	adc	r26, r26
 95c:	bb 1f       	adc	r27, r27
 95e:	a6 17       	cp	r26, r22
 960:	b7 07       	cpc	r27, r23
 962:	10 f0       	brcs	.+4      	; 0x968 <__udivmodhi4_ep>
 964:	a6 1b       	sub	r26, r22
 966:	b7 0b       	sbc	r27, r23

00000968 <__udivmodhi4_ep>:
 968:	88 1f       	adc	r24, r24
 96a:	99 1f       	adc	r25, r25
 96c:	5a 95       	dec	r21
 96e:	a9 f7       	brne	.-22     	; 0x95a <__udivmodhi4_loop>
 970:	80 95       	com	r24
 972:	90 95       	com	r25
 974:	bc 01       	movw	r22, r24
 976:	cd 01       	movw	r24, r26
 978:	08 95       	ret

0000097a <__udivmodsi4>:
 97a:	a1 e2       	ldi	r26, 0x21	; 33
 97c:	1a 2e       	mov	r1, r26
 97e:	aa 1b       	sub	r26, r26
 980:	bb 1b       	sub	r27, r27
 982:	fd 01       	movw	r30, r26
 984:	0d c0       	rjmp	.+26     	; 0x9a0 <__udivmodsi4_ep>

00000986 <__udivmodsi4_loop>:
 986:	aa 1f       	adc	r26, r26
 988:	bb 1f       	adc	r27, r27
 98a:	ee 1f       	adc	r30, r30
 98c:	ff 1f       	adc	r31, r31
 98e:	a2 17       	cp	r26, r18
 990:	b3 07       	cpc	r27, r19
 992:	e4 07       	cpc	r30, r20
 994:	f5 07       	cpc	r31, r21
 996:	20 f0       	brcs	.+8      	; 0x9a0 <__udivmodsi4_ep>
 998:	a2 1b       	sub	r26, r18
 99a:	b3 0b       	sbc	r27, r19
 99c:	e4 0b       	sbc	r30, r20
 99e:	f5 0b       	sbc	r31, r21

000009a0 <__udivmodsi4_ep>:
 9a0:	66 1f       	adc	r22, r22
 9a2:	77 1f       	adc	r23, r23
 9a4:	88 1f       	adc	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	1a 94       	dec	r1
 9aa:	69 f7       	brne	.-38     	; 0x986 <__udivmodsi4_loop>
 9ac:	60 95       	com	r22
 9ae:	70 95       	com	r23
 9b0:	80 95       	com	r24
 9b2:	90 95       	com	r25
 9b4:	9b 01       	movw	r18, r22
 9b6:	ac 01       	movw	r20, r24
 9b8:	bd 01       	movw	r22, r26
 9ba:	cf 01       	movw	r24, r30
 9bc:	08 95       	ret

000009be <__divmodsi4>:
 9be:	05 2e       	mov	r0, r21
 9c0:	97 fb       	bst	r25, 7
 9c2:	16 f4       	brtc	.+4      	; 0x9c8 <__divmodsi4+0xa>
 9c4:	00 94       	com	r0
 9c6:	0f d0       	rcall	.+30     	; 0x9e6 <__negsi2>
 9c8:	57 fd       	sbrc	r21, 7
 9ca:	05 d0       	rcall	.+10     	; 0x9d6 <__divmodsi4_neg2>
 9cc:	d6 df       	rcall	.-84     	; 0x97a <__udivmodsi4>
 9ce:	07 fc       	sbrc	r0, 7
 9d0:	02 d0       	rcall	.+4      	; 0x9d6 <__divmodsi4_neg2>
 9d2:	46 f4       	brtc	.+16     	; 0x9e4 <__divmodsi4_exit>
 9d4:	08 c0       	rjmp	.+16     	; 0x9e6 <__negsi2>

000009d6 <__divmodsi4_neg2>:
 9d6:	50 95       	com	r21
 9d8:	40 95       	com	r20
 9da:	30 95       	com	r19
 9dc:	21 95       	neg	r18
 9de:	3f 4f       	sbci	r19, 0xFF	; 255
 9e0:	4f 4f       	sbci	r20, 0xFF	; 255
 9e2:	5f 4f       	sbci	r21, 0xFF	; 255

000009e4 <__divmodsi4_exit>:
 9e4:	08 95       	ret

000009e6 <__negsi2>:
 9e6:	90 95       	com	r25
 9e8:	80 95       	com	r24
 9ea:	70 95       	com	r23
 9ec:	61 95       	neg	r22
 9ee:	7f 4f       	sbci	r23, 0xFF	; 255
 9f0:	8f 4f       	sbci	r24, 0xFF	; 255
 9f2:	9f 4f       	sbci	r25, 0xFF	; 255
 9f4:	08 95       	ret

000009f6 <__tablejump2__>:
 9f6:	ee 0f       	add	r30, r30
 9f8:	ff 1f       	adc	r31, r31
 9fa:	00 24       	eor	r0, r0
 9fc:	00 1c       	adc	r0, r0
 9fe:	0b be       	out	0x3b, r0	; 59
 a00:	07 90       	elpm	r0, Z+
 a02:	f6 91       	elpm	r31, Z
 a04:	e0 2d       	mov	r30, r0
 a06:	09 94       	ijmp

00000a08 <__umulhisi3>:
 a08:	a2 9f       	mul	r26, r18
 a0a:	b0 01       	movw	r22, r0
 a0c:	b3 9f       	mul	r27, r19
 a0e:	c0 01       	movw	r24, r0
 a10:	a3 9f       	mul	r26, r19
 a12:	70 0d       	add	r23, r0
 a14:	81 1d       	adc	r24, r1
 a16:	11 24       	eor	r1, r1
 a18:	91 1d       	adc	r25, r1
 a1a:	b2 9f       	mul	r27, r18
 a1c:	70 0d       	add	r23, r0
 a1e:	81 1d       	adc	r24, r1
 a20:	11 24       	eor	r1, r1
 a22:	91 1d       	adc	r25, r1
 a24:	08 95       	ret

00000a26 <_exit>:
 a26:	f8 94       	cli

00000a28 <__stop_program>:
 a28:	ff cf       	rjmp	.-2      	; 0xa28 <__stop_program>
