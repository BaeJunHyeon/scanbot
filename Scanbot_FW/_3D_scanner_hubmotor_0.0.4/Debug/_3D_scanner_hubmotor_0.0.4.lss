
_3D_scanner_hubmotor_0.0.4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000007b0  00000844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080010c  0080010c  00000850  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013d4  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b78  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d2  00000000  00000000  00002914  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  000030e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000608  00000000  00000000  0000335c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f2  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004056  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c9 c0       	rjmp	.+402    	; 0x1b0 <__vector_7>
  1e:	00 00       	nop
  20:	d8 c0       	rjmp	.+432    	; 0x1d2 <__vector_8>
  22:	00 00       	nop
  24:	51 c0       	rjmp	.+162    	; 0xc8 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a2 c0       	rjmp	.+324    	; 0x182 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b6 d0       	rcall	.+364    	; 0x230 <main>
  c4:	73 c3       	rjmp	.+1766   	; 0x7ac <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_9>:
unsigned int servo3deg=18;		//front2 servo 90'=158
unsigned int servo4deg=90-20;		//tilt servo

struct STEPPER headMotor;

ISR(TIMER2_COMP_vect) {		//motor2 & UltraSonic sensor count
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	PORTE = PORTE^(timer2Token<<PINE5);
  ee:	23 b1       	in	r18, 0x03	; 3
  f0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <timer2Token>
  f4:	30 e2       	ldi	r19, 0x20	; 32
  f6:	93 9f       	mul	r25, r19
  f8:	c0 01       	movw	r24, r0
  fa:	11 24       	eor	r1, r1
  fc:	82 27       	eor	r24, r18
  fe:	83 b9       	out	0x03, r24	; 3
	headMotor.stepCnt += headMotor.dir*timer2Token;
 100:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <timer2Token>
 104:	e3 e1       	ldi	r30, 0x13	; 19
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	82 81       	ldd	r24, Z+2	; 0x02
 10a:	93 81       	ldd	r25, Z+3	; 0x03
 10c:	28 9f       	mul	r18, r24
 10e:	a0 01       	movw	r20, r0
 110:	29 9f       	mul	r18, r25
 112:	50 0d       	add	r21, r0
 114:	11 24       	eor	r1, r1
 116:	05 2e       	mov	r0, r21
 118:	00 0c       	add	r0, r0
 11a:	66 0b       	sbc	r22, r22
 11c:	77 0b       	sbc	r23, r23
 11e:	84 81       	ldd	r24, Z+4	; 0x04
 120:	95 81       	ldd	r25, Z+5	; 0x05
 122:	a6 81       	ldd	r26, Z+6	; 0x06
 124:	b7 81       	ldd	r27, Z+7	; 0x07
 126:	48 0f       	add	r20, r24
 128:	59 1f       	adc	r21, r25
 12a:	6a 1f       	adc	r22, r26
 12c:	7b 1f       	adc	r23, r27
 12e:	44 83       	std	Z+4, r20	; 0x04
 130:	55 83       	std	Z+5, r21	; 0x05
 132:	66 83       	std	Z+6, r22	; 0x06
 134:	77 83       	std	Z+7, r23	; 0x07
	headMotor.steps = headMotor.stepCnt/2;
 136:	db 01       	movw	r26, r22
 138:	ca 01       	movw	r24, r20
 13a:	77 23       	and	r23, r23
 13c:	1c f4       	brge	.+6      	; 0x144 <__vector_9+0x7c>
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	a1 1d       	adc	r26, r1
 142:	b1 1d       	adc	r27, r1
 144:	b5 95       	asr	r27
 146:	a7 95       	ror	r26
 148:	97 95       	ror	r25
 14a:	87 95       	ror	r24
 14c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <headMotor+0x8>
 150:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <headMotor+0x9>
 154:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <headMotor+0xa>
 158:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <headMotor+0xb>
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0b be       	out	0x3b, r0	; 59
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_15>:
ISR(TIMER0_COMP_vect) {
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
	sonicCNT++;
 190:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <sonicCNT>
 194:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <sonicCNT+0x1>
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <sonicCNT+0x1>
 19e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <sonicCNT>
}
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <__vector_7>:
ISR(INT6_vect) {		//UltraSonic rising edge
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24

	TIMSK |= (1<<OCIE0);
 1bc:	87 b7       	in	r24, 0x37	; 55
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	87 bf       	out	0x37, r24	; 55
	OCR0 = 19;
 1c2:	83 e1       	ldi	r24, 0x13	; 19
 1c4:	81 bf       	out	0x31, r24	; 49
}
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <__vector_8>:
ISR(INT7_vect) {		//UltraSonic falling edge
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
	TIMSK &= (0<<OCIE0);
 1ec:	87 b7       	in	r24, 0x37	; 55
 1ee:	17 be       	out	0x37, r1	; 55
	dist = sonicCNT/6;
 1f0:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <sonicCNT>
 1f4:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <sonicCNT+0x1>
 1f8:	ab ea       	ldi	r26, 0xAB	; 171
 1fa:	ba ea       	ldi	r27, 0xAA	; 170
 1fc:	8b d2       	rcall	.+1302   	; 0x714 <__umulhisi3>
 1fe:	96 95       	lsr	r25
 200:	87 95       	ror	r24
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <dist+0x1>
 20a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <dist>
	sonicCNT = 0;
 20e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <sonicCNT+0x1>
 212:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <sonicCNT>
}
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	3f 91       	pop	r19
 224:	2f 91       	pop	r18
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <main>:

int main(void){
	cli();	
 230:	f8 94       	cli
	stepperInit(&headMotor,2,2);
 232:	42 e0       	ldi	r20, 0x02	; 2
 234:	62 e0       	ldi	r22, 0x02	; 2
 236:	83 e1       	ldi	r24, 0x13	; 19
 238:	91 e0       	ldi	r25, 0x01	; 1
	//	sensorInit();
	servoInit();
 23a:	74 d1       	rcall	.+744    	; 0x524 <stepperInit>
 23c:	1b d1       	rcall	.+566    	; 0x474 <servoInit>
	servoMoveTo(1,servo1deg);
 23e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <servo1deg>
 242:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <servo1deg+0x1>
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	32 d1       	rcall	.+612    	; 0x4ae <servoMoveTo>
	servoMoveTo(2,servo2deg);
 24a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <servo2deg>
 24e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <servo2deg+0x1>
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	2c d1       	rcall	.+600    	; 0x4ae <servoMoveTo>
	servoMoveTo(3,servo3deg);
 256:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <servo3deg>
 25a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <servo3deg+0x1>
 25e:	83 e0       	ldi	r24, 0x03	; 3
	servoMoveTo(4,servo4deg);
 260:	26 d1       	rcall	.+588    	; 0x4ae <servoMoveTo>
 262:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 266:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
	
	USART_Init(38400);
 26a:	84 e0       	ldi	r24, 0x04	; 4
 26c:	20 d1       	rcall	.+576    	; 0x4ae <servoMoveTo>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	96 e9       	ldi	r25, 0x96	; 150
	sonicCNT=0;
 272:	e0 d1       	rcall	.+960    	; 0x634 <USART_Init>
 274:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <sonicCNT+0x1>
 278:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <sonicCNT>
	sonicFlag=0;
 27c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <sonicFlag>
	dist=0;
 280:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <dist+0x1>

	unsigned int delta = 70;
	unsigned int deltaFlag = 1;
	unsigned int deltaCNT = 0;

	stepSpeed(&headMotor,headRPM);
 284:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <dist>
 288:	6e e1       	ldi	r22, 0x1E	; 30
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	83 e1       	ldi	r24, 0x13	; 19
 28e:	91 e0       	ldi	r25, 0x01	; 1
	
	data='0';
 290:	5b d1       	rcall	.+694    	; 0x548 <stepSpeed>
 292:	80 e3       	ldi	r24, 0x30	; 48
 294:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <data>
	unsigned char data1;
	sei();
	
	isReady=1;
 298:	78 94       	sei
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	unsigned int tiltDelay=300;
	unsigned int tilt_deg= 100*tiltDelay;

	unsigned int delta = 70;
	unsigned int deltaFlag = 1;
	unsigned int deltaCNT = 0;
 2a0:	e1 2c       	mov	r14, r1
	unsigned int heightMM=100;
	
	unsigned int tiltDelay=300;
	unsigned int tilt_deg= 100*tiltDelay;

	unsigned int delta = 70;
 2a2:	f1 2c       	mov	r15, r1
 2a4:	0f 2e       	mov	r0, r31
 2a6:	f6 e4       	ldi	r31, 0x46	; 70
 2a8:	cf 2e       	mov	r12, r31
 2aa:	d1 2c       	mov	r13, r1
	USART_Init(38400);
	sonicCNT=0;
	sonicFlag=0;
	dist=0;
	unsigned int setDist=80;
	unsigned int headRPM=30;
 2ac:	f0 2d       	mov	r31, r0
 2ae:	0e e1       	ldi	r16, 0x1E	; 30
		switch(data){
		#ifdef headspeed
			case 'c':
			stepSpeed(&headMotor,headRPM);
			if(headMotor.steps>0){
				timer2Token=1;
 2b0:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
			else if(headMotor.steps>headHeight) {
				stepperMove(&headMotor,-1);
				deltaCNT++;
				if(deltaCNT%7200 == 0 && delta < 71){
 2b2:	d1 e0       	ldi	r29, 0x01	; 1
 2b4:	0f 2e       	mov	r0, r31
 2b6:	f0 e2       	ldi	r31, 0x20	; 32
 2b8:	af 2e       	mov	r10, r31
 2ba:	fc e1       	ldi	r31, 0x1C	; 28
	sei();
	
	isReady=1;
	//TX0_string("^Ready");
	while (1)	{
		data1=data;
 2bc:	bf 2e       	mov	r11, r31
 2be:	f0 2d       	mov	r31, r0
		if(UCSR0A&
 2c0:	c0 91 2d 01 	lds	r28, 0x012D	; 0x80012d <data>
		(1<<RXC0)){
			data = RX0_data();
 2c4:	5f 9b       	sbis	0x0b, 7	; 11
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <main+0x9e>
 2c8:	78 d1       	rcall	.+752    	; 0x5ba <RX0_data>
 2ca:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <data>
		CASE 1 1650 -> 2100
		CASE Q 1700 -> 2250
		CASE A 1700 -> 2400

		*/
		switch(data){
 2ce:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <data>
 2d2:	83 36       	cpi	r24, 0x63	; 99
 2d4:	69 f0       	breq	.+26     	; 0x2f0 <main+0xc0>
 2d6:	38 f4       	brcc	.+14     	; 0x2e6 <main+0xb6>
 2d8:	81 33       	cpi	r24, 0x31	; 49
 2da:	09 f4       	brne	.+2      	; 0x2de <main+0xae>
 2dc:	4e c0       	rjmp	.+156    	; 0x37a <main+0x14a>
 2de:	82 33       	cpi	r24, 0x32	; 50
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <main+0xb4>
 2e2:	7a c0       	rjmp	.+244    	; 0x3d8 <main+0x1a8>
 2e4:	ed cf       	rjmp	.-38     	; 0x2c0 <main+0x90>
 2e6:	81 37       	cpi	r24, 0x71	; 113
 2e8:	21 f1       	breq	.+72     	; 0x332 <main+0x102>
 2ea:	87 37       	cpi	r24, 0x77	; 119
		#ifdef headspeed
			case 'c':
			stepSpeed(&headMotor,headRPM);
 2ec:	99 f1       	breq	.+102    	; 0x354 <main+0x124>
 2ee:	e8 cf       	rjmp	.-48     	; 0x2c0 <main+0x90>
 2f0:	b8 01       	movw	r22, r16
 2f2:	83 e1       	ldi	r24, 0x13	; 19
 2f4:	91 e0       	ldi	r25, 0x01	; 1
			if(headMotor.steps>0){
 2f6:	28 d1       	rcall	.+592    	; 0x548 <stepSpeed>
 2f8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <headMotor+0x8>
 2fc:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <headMotor+0x9>
 300:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <headMotor+0xa>
 304:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <headMotor+0xb>
 308:	18 16       	cp	r1, r24
 30a:	19 06       	cpc	r1, r25
 30c:	1a 06       	cpc	r1, r26
				timer2Token=1;
 30e:	1b 06       	cpc	r1, r27
 310:	44 f4       	brge	.+16     	; 0x322 <main+0xf2>
				stepperMove(&headMotor,-1);
 312:	d0 93 12 01 	sts	0x0112, r29	; 0x800112 <timer2Token>
 316:	6f ef       	ldi	r22, 0xFF	; 255
 318:	7f ef       	ldi	r23, 0xFF	; 255
 31a:	83 e1       	ldi	r24, 0x13	; 19
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	36 d1       	rcall	.+620    	; 0x58c <stepperMove>
			}
			else if(headMotor.steps<=0){
				timer2Token=0;
 320:	cf cf       	rjmp	.-98     	; 0x2c0 <main+0x90>
 322:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <timer2Token>
				TIMSK &=(0<<OCIE2);
				PORTE |= (1<<PORTE5);
				data=0;
 326:	87 b7       	in	r24, 0x37	; 55
 328:	17 be       	out	0x37, r1	; 55
			}
			break;
			case 'q':	//헤드 이동속도 --
			stepSpeed(&headMotor,headRPM--);
 32a:	1d 9a       	sbi	0x03, 5	; 3
 32c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <data>
 330:	c7 cf       	rjmp	.-114    	; 0x2c0 <main+0x90>
 332:	48 01       	movw	r8, r16
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	82 1a       	sub	r8, r18
 338:	91 08       	sbc	r9, r1
			TX0_string("***");
 33a:	b8 01       	movw	r22, r16
 33c:	83 e1       	ldi	r24, 0x13	; 19
 33e:	91 e0       	ldi	r25, 0x01	; 1
			TX0_int(headRPM);
 340:	03 d1       	rcall	.+518    	; 0x548 <stepSpeed>
			data= data1;
 342:	88 e0       	ldi	r24, 0x08	; 8
			break;

			case 'w':	//헤드 이동속도 ++
			stepSpeed(&headMotor,headRPM++);
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	3f d1       	rcall	.+638    	; 0x5c6 <TX0_string>
 348:	c4 01       	movw	r24, r8
 34a:	4b d1       	rcall	.+662    	; 0x5e2 <TX0_int>
 34c:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <data>
 350:	84 01       	movw	r16, r8
			TX0_int(headRPM);
 352:	b6 cf       	rjmp	.-148    	; 0x2c0 <main+0x90>
 354:	48 01       	movw	r8, r16
 356:	8f ef       	ldi	r24, 0xFF	; 255
			TX0_string("***");
 358:	88 1a       	sub	r8, r24
 35a:	98 0a       	sbc	r9, r24
 35c:	b8 01       	movw	r22, r16
 35e:	83 e1       	ldi	r24, 0x13	; 19
			TX0_int(headRPM);
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	f2 d0       	rcall	.+484    	; 0x548 <stepSpeed>
 364:	c4 01       	movw	r24, r8
			data= data1;
 366:	3d d1       	rcall	.+634    	; 0x5e2 <TX0_int>
 368:	88 e0       	ldi	r24, 0x08	; 8
			TX0_int(headRPM);
			data= data1;
			break;

			case 'w':	//헤드 이동속도 ++
			stepSpeed(&headMotor,headRPM++);
 36a:	91 e0       	ldi	r25, 0x01	; 1
			TX0_int(headRPM);
			TX0_string("***");
			TX0_int(headRPM);
			data= data1;
			break;
 36c:	2c d1       	rcall	.+600    	; 0x5c6 <TX0_string>

			
			case '1':	//헤드 이동 및 스캔 준비
			headHeight = 500;
			servoMoveTo(4,70);
 36e:	c4 01       	movw	r24, r8
 370:	38 d1       	rcall	.+624    	; 0x5e2 <TX0_int>
 372:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <data>
			if(headMotor.steps<headHeight && headMotor.steps>=0) {
 376:	84 01       	movw	r16, r8
 378:	a3 cf       	rjmp	.-186    	; 0x2c0 <main+0x90>
 37a:	66 e4       	ldi	r22, 0x46	; 70
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	84 e0       	ldi	r24, 0x04	; 4
 380:	96 d0       	rcall	.+300    	; 0x4ae <servoMoveTo>
 382:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <headMotor+0x8>
 386:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <headMotor+0x9>
 38a:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <headMotor+0xa>
 38e:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <headMotor+0xb>
				stepperMove(&headMotor,1);
 392:	84 3f       	cpi	r24, 0xF4	; 244
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	92 07       	cpc	r25, r18
 398:	a1 05       	cpc	r26, r1
 39a:	b1 05       	cpc	r27, r1
 39c:	30 f4       	brcc	.+12     	; 0x3aa <main+0x17a>
 39e:	61 e0       	ldi	r22, 0x01	; 1
			}
			else if(headMotor.steps==headHeight) {
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	83 e1       	ldi	r24, 0x13	; 19
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	f2 d0       	rcall	.+484    	; 0x58c <stepperMove>
 3a8:	8b cf       	rjmp	.-234    	; 0x2c0 <main+0x90>
 3aa:	84 3f       	cpi	r24, 0xF4	; 244
				if(timer2Token==1) {
 3ac:	91 40       	sbci	r25, 0x01	; 1
 3ae:	a1 05       	cpc	r26, r1
 3b0:	b1 05       	cpc	r27, r1
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <main+0x186>
					timer2Token=0;
 3b4:	85 cf       	rjmp	.-246    	; 0x2c0 <main+0x90>
 3b6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <timer2Token>
					data=0;
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	29 f4       	brne	.+10     	; 0x3c8 <main+0x198>
					isReady=1;
				}
				if(isReady==1) {
 3be:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <timer2Token>
 3c2:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <data>
					//TX0_string("#1");
					isReady=0;
 3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <main+0x1a2>
 3c8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
			}
			break;

			case '2':	//헤드 이동 및 스캔 준비
			headHeight = 200;
			if(headMotor.steps<headHeight && headMotor.steps>=0){
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <main+0x1a2>
 3d0:	77 cf       	rjmp	.-274    	; 0x2c0 <main+0x90>
 3d2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 3d6:	74 cf       	rjmp	.-280    	; 0x2c0 <main+0x90>
 3d8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <headMotor+0x8>
 3dc:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <headMotor+0x9>
 3e0:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <headMotor+0xa>
				stepperMove(&headMotor,-1);
 3e4:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <headMotor+0xb>
 3e8:	88 3c       	cpi	r24, 0xC8	; 200
 3ea:	91 05       	cpc	r25, r1
 3ec:	a1 05       	cpc	r26, r1
 3ee:	b1 05       	cpc	r27, r1
 3f0:	30 f4       	brcc	.+12     	; 0x3fe <main+0x1ce>
			}
			else if(headMotor.steps==headHeight){
 3f2:	6f ef       	ldi	r22, 0xFF	; 255
 3f4:	7f ef       	ldi	r23, 0xFF	; 255
 3f6:	83 e1       	ldi	r24, 0x13	; 19
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	c8 d0       	rcall	.+400    	; 0x58c <stepperMove>
				if(timer2Token==1){
 3fc:	61 cf       	rjmp	.-318    	; 0x2c0 <main+0x90>
 3fe:	88 3c       	cpi	r24, 0xC8	; 200
 400:	91 05       	cpc	r25, r1
 402:	a1 05       	cpc	r26, r1
					timer2Token=0;
 404:	b1 05       	cpc	r27, r1
 406:	b1 f4       	brne	.+44     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
					data=0;
 408:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <timer2Token>
 40c:	81 30       	cpi	r24, 0x01	; 1
					isReady=1;
				}
				if(isReady==1){
 40e:	29 f4       	brne	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 410:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <timer2Token>
 414:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <data>
					//TX0_string("#3");
					delta = 70;
					isReady=0;
 418:	05 c0       	rjmp	.+10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
					data=0;
					isReady=1;
				}
				if(isReady==1){
					//TX0_string("#3");
					delta = 70;
 41a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 41e:	81 30       	cpi	r24, 0x01	; 1
 420:	09 f0       	breq	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	4e cf       	rjmp	.-356    	; 0x2c0 <main+0x90>
					isReady=0;
				}
			}
			else if(headMotor.steps>headHeight) {
 424:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 428:	0f 2e       	mov	r0, r31
 42a:	f6 e4       	ldi	r31, 0x46	; 70
 42c:	cf 2e       	mov	r12, r31
 42e:	d1 2c       	mov	r13, r1
				stepperMove(&headMotor,-1);
 430:	f0 2d       	mov	r31, r0
 432:	46 cf       	rjmp	.-372    	; 0x2c0 <main+0x90>
 434:	89 3c       	cpi	r24, 0xC9	; 201
 436:	91 05       	cpc	r25, r1
 438:	a1 05       	cpc	r26, r1
				deltaCNT++;
 43a:	b1 05       	cpc	r27, r1
 43c:	0c f4       	brge	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	40 cf       	rjmp	.-384    	; 0x2c0 <main+0x90>
				if(deltaCNT%7200 == 0 && delta < 71){
 440:	6f ef       	ldi	r22, 0xFF	; 255
 442:	7f ef       	ldi	r23, 0xFF	; 255
 444:	83 e1       	ldi	r24, 0x13	; 19
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	a1 d0       	rcall	.+322    	; 0x58c <stepperMove>
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	e8 1a       	sub	r14, r24
 44e:	f8 0a       	sbc	r15, r24
 450:	c7 01       	movw	r24, r14
 452:	b5 01       	movw	r22, r10
 454:	0d d1       	rcall	.+538    	; 0x670 <__udivmodhi4>
 456:	89 2b       	or	r24, r25
					delta++;
 458:	09 f0       	breq	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	32 cf       	rjmp	.-412    	; 0x2c0 <main+0x90>
 45c:	27 e4       	ldi	r18, 0x47	; 71
					servoMoveTo(4,delta);
 45e:	c2 16       	cp	r12, r18
 460:	d1 04       	cpc	r13, r1
 462:	08 f0       	brcs	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 464:	2d cf       	rjmp	.-422    	; 0x2c0 <main+0x90>
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	c8 1a       	sub	r12, r24
 46a:	d8 0a       	sbc	r13, r24
 46c:	b6 01       	movw	r22, r12
 46e:	84 e0       	ldi	r24, 0x04	; 4
 470:	1e d0       	rcall	.+60     	; 0x4ae <servoMoveTo>
 472:	26 cf       	rjmp	.-436    	; 0x2c0 <main+0x90>

00000474 <servoInit>:
		ICR3 = Period; // Tilt Motor Period 39999 = 20ms
		OCR3B = 0;
		
		DDRA = 0x80;
		DDRE|=(1<<PINE3)|(1<<PINE4)|(1<<PINE5);
		DDRB = 0xE0;
 474:	8a ea       	ldi	r24, 0xAA	; 170
 476:	8f bd       	out	0x2f, r24	; 47
 478:	2a e1       	ldi	r18, 0x1A	; 26
 47a:	2e bd       	out	0x2e, r18	; 46
 47c:	8f e3       	ldi	r24, 0x3F	; 63
 47e:	9c e9       	ldi	r25, 0x9C	; 156
 480:	97 bd       	out	0x27, r25	; 39
 482:	86 bd       	out	0x26, r24	; 38
 484:	32 ea       	ldi	r19, 0xA2	; 162
 486:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 48a:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 48e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 492:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 496:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 49a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 49e:	80 e8       	ldi	r24, 0x80	; 128
 4a0:	8a bb       	out	0x1a, r24	; 26
 4a2:	82 b1       	in	r24, 0x02	; 2
 4a4:	88 63       	ori	r24, 0x38	; 56
 4a6:	82 b9       	out	0x02, r24	; 2
 4a8:	80 ee       	ldi	r24, 0xE0	; 224
 4aa:	87 bb       	out	0x17, r24	; 23
 4ac:	08 95       	ret

000004ae <servoMoveTo>:

void servoMoveTo(unsigned char motorNum, unsigned int deg)
{
	//OCR1x 2000 ~ 4000 (0 ~ 180)
	//OCR0  9 ~ 36.69
	switch(motorNum)
 4ae:	82 30       	cpi	r24, 0x02	; 2
 4b0:	a1 f0       	breq	.+40     	; 0x4da <servoMoveTo+0x2c>
 4b2:	18 f4       	brcc	.+6      	; 0x4ba <servoMoveTo+0xc>
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	31 f0       	breq	.+12     	; 0x4c4 <servoMoveTo+0x16>
 4b8:	08 95       	ret
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	c9 f0       	breq	.+50     	; 0x4f0 <servoMoveTo+0x42>
 4be:	84 30       	cpi	r24, 0x04	; 4
 4c0:	21 f1       	breq	.+72     	; 0x50a <servoMoveTo+0x5c>
 4c2:	08 95       	ret
	{
		case 1:
			OCR1A = deg*20+1200;
 4c4:	24 e1       	ldi	r18, 0x14	; 20
 4c6:	26 9f       	mul	r18, r22
 4c8:	c0 01       	movw	r24, r0
 4ca:	27 9f       	mul	r18, r23
 4cc:	90 0d       	add	r25, r0
 4ce:	11 24       	eor	r1, r1
 4d0:	80 55       	subi	r24, 0x50	; 80
 4d2:	9b 4f       	sbci	r25, 0xFB	; 251
 4d4:	9b bd       	out	0x2b, r25	; 43
 4d6:	8a bd       	out	0x2a, r24	; 42
			break;
 4d8:	08 95       	ret
		case 2:
			OCR1B = deg*20+1200;
 4da:	24 e1       	ldi	r18, 0x14	; 20
 4dc:	26 9f       	mul	r18, r22
 4de:	c0 01       	movw	r24, r0
 4e0:	27 9f       	mul	r18, r23
 4e2:	90 0d       	add	r25, r0
 4e4:	11 24       	eor	r1, r1
 4e6:	80 55       	subi	r24, 0x50	; 80
 4e8:	9b 4f       	sbci	r25, 0xFB	; 251
 4ea:	99 bd       	out	0x29, r25	; 41
 4ec:	88 bd       	out	0x28, r24	; 40
			break;
 4ee:	08 95       	ret
		case 3:
			OCR1C = deg*20+1200;
 4f0:	24 e1       	ldi	r18, 0x14	; 20
 4f2:	26 9f       	mul	r18, r22
 4f4:	c0 01       	movw	r24, r0
 4f6:	27 9f       	mul	r18, r23
 4f8:	90 0d       	add	r25, r0
 4fa:	11 24       	eor	r1, r1
 4fc:	80 55       	subi	r24, 0x50	; 80
 4fe:	9b 4f       	sbci	r25, 0xFB	; 251
 500:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 504:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			break;
 508:	08 95       	ret
		case 4:
			OCR3A = deg*20+1200;
 50a:	24 e1       	ldi	r18, 0x14	; 20
 50c:	26 9f       	mul	r18, r22
 50e:	c0 01       	movw	r24, r0
 510:	27 9f       	mul	r18, r23
 512:	90 0d       	add	r25, r0
 514:	11 24       	eor	r1, r1
 516:	80 55       	subi	r24, 0x50	; 80
 518:	9b 4f       	sbci	r25, 0xFB	; 251
 51a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 51e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 522:	08 95       	ret

00000524 <stepperInit>:
 *  Author: JooHwanSang
 */ 
#include "stepper.h"

void stepperInit(struct STEPPER *stepper, unsigned char motorNum, unsigned char uSteps)
{
 524:	fc 01       	movw	r30, r24
	DDRC = 0xff;		// PORTC output
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;		// active low Enable
 52a:	15 ba       	out	0x15, r1	; 21
	
	stepper->motorNum = motorNum;
 52c:	60 83       	st	Z, r22
	stepper->uSteps = uSteps;	// 1/2 uSteps
 52e:	41 83       	std	Z+1, r20	; 0x01
	stepper->dir = 1;		//dir = 1 or -1
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	93 83       	std	Z+3, r25	; 0x03
 536:	82 83       	std	Z+2, r24	; 0x02
	stepper->steps = 0;
 538:	10 86       	std	Z+8, r1	; 0x08
 53a:	11 86       	std	Z+9, r1	; 0x09
 53c:	12 86       	std	Z+10, r1	; 0x0a
 53e:	13 86       	std	Z+11, r1	; 0x0b
	stepper->flag = 0;
 540:	14 8a       	std	Z+20, r1	; 0x14
	
	PORTC = (0<<USM21)|(1<<USM20);
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	85 bb       	out	0x15, r24	; 21
 546:	08 95       	ret

00000548 <stepSpeed>:
		break;
	}*/
}
void stepSpeed(struct STEPPER *stepper, unsigned int rpm)
{
	if(stepper->motorNum==2) OCR2 = 16000000/256/(rpm*200*2/60)/2;
 548:	fc 01       	movw	r30, r24
 54a:	80 81       	ld	r24, Z
 54c:	82 30       	cpi	r24, 0x02	; 2
 54e:	e9 f4       	brne	.+58     	; 0x58a <stepSpeed+0x42>
 550:	80 e9       	ldi	r24, 0x90	; 144
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	68 9f       	mul	r22, r24
 556:	90 01       	movw	r18, r0
 558:	69 9f       	mul	r22, r25
 55a:	30 0d       	add	r19, r0
 55c:	78 9f       	mul	r23, r24
 55e:	30 0d       	add	r19, r0
 560:	11 24       	eor	r1, r1
 562:	a9 e8       	ldi	r26, 0x89	; 137
 564:	b8 e8       	ldi	r27, 0x88	; 136
 566:	d6 d0       	rcall	.+428    	; 0x714 <__umulhisi3>
 568:	96 95       	lsr	r25
 56a:	87 95       	ror	r24
 56c:	92 95       	swap	r25
 56e:	82 95       	swap	r24
 570:	8f 70       	andi	r24, 0x0F	; 15
 572:	89 27       	eor	r24, r25
 574:	9f 70       	andi	r25, 0x0F	; 15
 576:	89 27       	eor	r24, r25
 578:	9c 01       	movw	r18, r24
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	62 e1       	ldi	r22, 0x12	; 18
 580:	7a e7       	ldi	r23, 0x7A	; 122
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	aa d0       	rcall	.+340    	; 0x6dc <__divmodsi4>
 588:	23 bd       	out	0x23, r18	; 35
 58a:	08 95       	ret

0000058c <stepperMove>:
}
void stepperMove(struct STEPPER *stepper, int dir)
{	
	if(stepper->motorNum==2)
 58c:	fc 01       	movw	r30, r24
 58e:	20 81       	ld	r18, Z
 590:	22 30       	cpi	r18, 0x02	; 2
 592:	91 f4       	brne	.+36     	; 0x5b8 <stepperMove+0x2c>
	{
		timer2Token=1;
 594:	21 e0       	ldi	r18, 0x01	; 1
 596:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <timer2Token>
		TCCR2 = (1<<WGM21)|(0<<WGM20)|(0<<COM21)|(0<<COM20)|(1<<CS22)|(0<<CS21)|(0<<CS20);
 59a:	2c e0       	ldi	r18, 0x0C	; 12
 59c:	25 bd       	out	0x25, r18	; 37
		TIMSK = (1<<OCIE2);
 59e:	20 e8       	ldi	r18, 0x80	; 128
 5a0:	27 bf       	out	0x37, r18	; 55
		if(stepper->dir != dir)
 5a2:	22 81       	ldd	r18, Z+2	; 0x02
 5a4:	33 81       	ldd	r19, Z+3	; 0x03
 5a6:	26 17       	cp	r18, r22
 5a8:	37 07       	cpc	r19, r23
 5aa:	31 f0       	breq	.+12     	; 0x5b8 <stepperMove+0x2c>
		{
			PORTC = PORTC^(1<<DIR2);
 5ac:	35 b3       	in	r19, 0x15	; 21
 5ae:	24 e0       	ldi	r18, 0x04	; 4
 5b0:	23 27       	eor	r18, r19
 5b2:	25 bb       	out	0x15, r18	; 21
			stepper->dir = dir;
 5b4:	73 83       	std	Z+3, r23	; 0x03
 5b6:	62 83       	std	Z+2, r22	; 0x02
 5b8:	08 95       	ret

000005ba <RX0_data>:
	while(str[i] != '\0')
	{
		TX1_data(str[i]);
		i++;
	}
}
 5ba:	8c b1       	in	r24, 0x0c	; 12
 5bc:	08 95       	ret

000005be <TX0_data>:
 5be:	5d 9b       	sbis	0x0b, 5	; 11
 5c0:	fe cf       	rjmp	.-4      	; 0x5be <TX0_data>
 5c2:	8c b9       	out	0x0c, r24	; 12
 5c4:	08 95       	ret

000005c6 <TX0_string>:
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	ec 01       	movw	r28, r24
 5cc:	88 81       	ld	r24, Y
 5ce:	88 23       	and	r24, r24
 5d0:	29 f0       	breq	.+10     	; 0x5dc <TX0_string+0x16>
 5d2:	21 96       	adiw	r28, 0x01	; 1
 5d4:	f4 df       	rcall	.-24     	; 0x5be <TX0_data>
 5d6:	89 91       	ld	r24, Y+
 5d8:	81 11       	cpse	r24, r1
 5da:	fc cf       	rjmp	.-8      	; 0x5d4 <TX0_string+0xe>
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	08 95       	ret

000005e2 <TX0_int>:
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	2a 97       	sbiw	r28, 0x0a	; 10
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	f8 94       	cli
 5f4:	de bf       	out	0x3e, r29	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	cd bf       	out	0x3d, r28	; 61
 5fa:	4a e0       	ldi	r20, 0x0A	; 10
 5fc:	50 e0       	ldi	r21, 0x00	; 0
 5fe:	be 01       	movw	r22, r28
 600:	6f 5f       	subi	r22, 0xFF	; 255
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	96 d0       	rcall	.+300    	; 0x732 <itoa>
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	88 23       	and	r24, r24
 60a:	49 f0       	breq	.+18     	; 0x61e <TX0_int+0x3c>
 60c:	8e 01       	movw	r16, r28
 60e:	0e 5f       	subi	r16, 0xFE	; 254
 610:	1f 4f       	sbci	r17, 0xFF	; 255
 612:	d5 df       	rcall	.-86     	; 0x5be <TX0_data>
 614:	f8 01       	movw	r30, r16
 616:	81 91       	ld	r24, Z+
 618:	8f 01       	movw	r16, r30
 61a:	81 11       	cpse	r24, r1
 61c:	fa cf       	rjmp	.-12     	; 0x612 <TX0_int+0x30>
 61e:	2a 96       	adiw	r28, 0x0a	; 10
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	de bf       	out	0x3e, r29	; 62
 626:	0f be       	out	0x3f, r0	; 63
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	08 95       	ret

00000634 <USART_Init>:

void USART_Init(unsigned int baud)
{
	unsigned int ubrr;
	ubrr=(F_CPU/16/baud)-1;
 634:	9c 01       	movw	r18, r24
 636:	40 e0       	ldi	r20, 0x00	; 0
 638:	50 e0       	ldi	r21, 0x00	; 0
 63a:	60 e4       	ldi	r22, 0x40	; 64
 63c:	72 e4       	ldi	r23, 0x42	; 66
 63e:	8f e0       	ldi	r24, 0x0F	; 15
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	2a d0       	rcall	.+84     	; 0x698 <__udivmodsi4>
 644:	21 50       	subi	r18, 0x01	; 1
 646:	31 09       	sbc	r19, r1
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 648:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
 64c:	29 b9       	out	0x09, r18	; 9
	/* Enable receiver and transmitter */
	UCSR0A = 0x00;
 64e:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 650:	98 e1       	ldi	r25, 0x18	; 24
 652:	9a b9       	out	0x0a, r25	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
 654:	86 e0       	ldi	r24, 0x06	; 6
 656:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
 65a:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (unsigned char)ubrr;
 65e:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	/* Enable receiver and transmitter */
	UCSR1A = 0x00;
 662:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 666:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	/* Set frame format: 8data, 1stop bit */
	UCSR1C = (1<<UCSZ10)|(1<<UCSZ11);
 66a:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 66e:	08 95       	ret

00000670 <__udivmodhi4>:
 670:	aa 1b       	sub	r26, r26
 672:	bb 1b       	sub	r27, r27
 674:	51 e1       	ldi	r21, 0x11	; 17
 676:	07 c0       	rjmp	.+14     	; 0x686 <__udivmodhi4_ep>

00000678 <__udivmodhi4_loop>:
 678:	aa 1f       	adc	r26, r26
 67a:	bb 1f       	adc	r27, r27
 67c:	a6 17       	cp	r26, r22
 67e:	b7 07       	cpc	r27, r23
 680:	10 f0       	brcs	.+4      	; 0x686 <__udivmodhi4_ep>
 682:	a6 1b       	sub	r26, r22
 684:	b7 0b       	sbc	r27, r23

00000686 <__udivmodhi4_ep>:
 686:	88 1f       	adc	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	5a 95       	dec	r21
 68c:	a9 f7       	brne	.-22     	; 0x678 <__udivmodhi4_loop>
 68e:	80 95       	com	r24
 690:	90 95       	com	r25
 692:	bc 01       	movw	r22, r24
 694:	cd 01       	movw	r24, r26
 696:	08 95       	ret

00000698 <__udivmodsi4>:
 698:	a1 e2       	ldi	r26, 0x21	; 33
 69a:	1a 2e       	mov	r1, r26
 69c:	aa 1b       	sub	r26, r26
 69e:	bb 1b       	sub	r27, r27
 6a0:	fd 01       	movw	r30, r26
 6a2:	0d c0       	rjmp	.+26     	; 0x6be <__udivmodsi4_ep>

000006a4 <__udivmodsi4_loop>:
 6a4:	aa 1f       	adc	r26, r26
 6a6:	bb 1f       	adc	r27, r27
 6a8:	ee 1f       	adc	r30, r30
 6aa:	ff 1f       	adc	r31, r31
 6ac:	a2 17       	cp	r26, r18
 6ae:	b3 07       	cpc	r27, r19
 6b0:	e4 07       	cpc	r30, r20
 6b2:	f5 07       	cpc	r31, r21
 6b4:	20 f0       	brcs	.+8      	; 0x6be <__udivmodsi4_ep>
 6b6:	a2 1b       	sub	r26, r18
 6b8:	b3 0b       	sbc	r27, r19
 6ba:	e4 0b       	sbc	r30, r20
 6bc:	f5 0b       	sbc	r31, r21

000006be <__udivmodsi4_ep>:
 6be:	66 1f       	adc	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	88 1f       	adc	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	1a 94       	dec	r1
 6c8:	69 f7       	brne	.-38     	; 0x6a4 <__udivmodsi4_loop>
 6ca:	60 95       	com	r22
 6cc:	70 95       	com	r23
 6ce:	80 95       	com	r24
 6d0:	90 95       	com	r25
 6d2:	9b 01       	movw	r18, r22
 6d4:	ac 01       	movw	r20, r24
 6d6:	bd 01       	movw	r22, r26
 6d8:	cf 01       	movw	r24, r30
 6da:	08 95       	ret

000006dc <__divmodsi4>:
 6dc:	05 2e       	mov	r0, r21
 6de:	97 fb       	bst	r25, 7
 6e0:	16 f4       	brtc	.+4      	; 0x6e6 <__divmodsi4+0xa>
 6e2:	00 94       	com	r0
 6e4:	0f d0       	rcall	.+30     	; 0x704 <__negsi2>
 6e6:	57 fd       	sbrc	r21, 7
 6e8:	05 d0       	rcall	.+10     	; 0x6f4 <__divmodsi4_neg2>
 6ea:	d6 df       	rcall	.-84     	; 0x698 <__udivmodsi4>
 6ec:	07 fc       	sbrc	r0, 7
 6ee:	02 d0       	rcall	.+4      	; 0x6f4 <__divmodsi4_neg2>
 6f0:	46 f4       	brtc	.+16     	; 0x702 <__divmodsi4_exit>
 6f2:	08 c0       	rjmp	.+16     	; 0x704 <__negsi2>

000006f4 <__divmodsi4_neg2>:
 6f4:	50 95       	com	r21
 6f6:	40 95       	com	r20
 6f8:	30 95       	com	r19
 6fa:	21 95       	neg	r18
 6fc:	3f 4f       	sbci	r19, 0xFF	; 255
 6fe:	4f 4f       	sbci	r20, 0xFF	; 255
 700:	5f 4f       	sbci	r21, 0xFF	; 255

00000702 <__divmodsi4_exit>:
 702:	08 95       	ret

00000704 <__negsi2>:
 704:	90 95       	com	r25
 706:	80 95       	com	r24
 708:	70 95       	com	r23
 70a:	61 95       	neg	r22
 70c:	7f 4f       	sbci	r23, 0xFF	; 255
 70e:	8f 4f       	sbci	r24, 0xFF	; 255
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	08 95       	ret

00000714 <__umulhisi3>:
 714:	a2 9f       	mul	r26, r18
 716:	b0 01       	movw	r22, r0
 718:	b3 9f       	mul	r27, r19
 71a:	c0 01       	movw	r24, r0
 71c:	a3 9f       	mul	r26, r19
 71e:	70 0d       	add	r23, r0
 720:	81 1d       	adc	r24, r1
 722:	11 24       	eor	r1, r1
 724:	91 1d       	adc	r25, r1
 726:	b2 9f       	mul	r27, r18
 728:	70 0d       	add	r23, r0
 72a:	81 1d       	adc	r24, r1
 72c:	11 24       	eor	r1, r1
 72e:	91 1d       	adc	r25, r1
 730:	08 95       	ret

00000732 <itoa>:
 732:	45 32       	cpi	r20, 0x25	; 37
 734:	51 05       	cpc	r21, r1
 736:	18 f4       	brcc	.+6      	; 0x73e <itoa+0xc>
 738:	42 30       	cpi	r20, 0x02	; 2
 73a:	08 f0       	brcs	.+2      	; 0x73e <itoa+0xc>
 73c:	04 c0       	rjmp	.+8      	; 0x746 <__itoa_ncheck>
 73e:	fb 01       	movw	r30, r22
 740:	10 82       	st	Z, r1
 742:	cb 01       	movw	r24, r22
 744:	08 95       	ret

00000746 <__itoa_ncheck>:
 746:	bb 27       	eor	r27, r27
 748:	4a 30       	cpi	r20, 0x0A	; 10
 74a:	31 f4       	brne	.+12     	; 0x758 <__itoa_ncheck+0x12>
 74c:	99 23       	and	r25, r25
 74e:	22 f4       	brpl	.+8      	; 0x758 <__itoa_ncheck+0x12>
 750:	bd e2       	ldi	r27, 0x2D	; 45
 752:	90 95       	com	r25
 754:	81 95       	neg	r24
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	01 c0       	rjmp	.+2      	; 0x75c <__utoa_common>

0000075a <__utoa_ncheck>:
 75a:	bb 27       	eor	r27, r27

0000075c <__utoa_common>:
 75c:	fb 01       	movw	r30, r22
 75e:	55 27       	eor	r21, r21
 760:	aa 27       	eor	r26, r26
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	aa 1f       	adc	r26, r26
 768:	a4 17       	cp	r26, r20
 76a:	10 f0       	brcs	.+4      	; 0x770 <__utoa_common+0x14>
 76c:	a4 1b       	sub	r26, r20
 76e:	83 95       	inc	r24
 770:	50 51       	subi	r21, 0x10	; 16
 772:	b9 f7       	brne	.-18     	; 0x762 <__utoa_common+0x6>
 774:	a0 5d       	subi	r26, 0xD0	; 208
 776:	aa 33       	cpi	r26, 0x3A	; 58
 778:	08 f0       	brcs	.+2      	; 0x77c <__utoa_common+0x20>
 77a:	a9 5d       	subi	r26, 0xD9	; 217
 77c:	a1 93       	st	Z+, r26
 77e:	00 97       	sbiw	r24, 0x00	; 0
 780:	79 f7       	brne	.-34     	; 0x760 <__utoa_common+0x4>
 782:	b1 11       	cpse	r27, r1
 784:	b1 93       	st	Z+, r27
 786:	11 92       	st	Z+, r1
 788:	cb 01       	movw	r24, r22
 78a:	00 c0       	rjmp	.+0      	; 0x78c <strrev>

0000078c <strrev>:
 78c:	dc 01       	movw	r26, r24
 78e:	fc 01       	movw	r30, r24
 790:	67 2f       	mov	r22, r23
 792:	71 91       	ld	r23, Z+
 794:	77 23       	and	r23, r23
 796:	e1 f7       	brne	.-8      	; 0x790 <strrev+0x4>
 798:	32 97       	sbiw	r30, 0x02	; 2
 79a:	04 c0       	rjmp	.+8      	; 0x7a4 <strrev+0x18>
 79c:	7c 91       	ld	r23, X
 79e:	6d 93       	st	X+, r22
 7a0:	70 83       	st	Z, r23
 7a2:	62 91       	ld	r22, -Z
 7a4:	ae 17       	cp	r26, r30
 7a6:	bf 07       	cpc	r27, r31
 7a8:	c8 f3       	brcs	.-14     	; 0x79c <strrev+0x10>
 7aa:	08 95       	ret

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
