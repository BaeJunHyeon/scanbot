
_3D_scanner_hubmotor_0.0.4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001482  00001516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001482  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800112  00800112  00001528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012df  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c1  00000000  00000000  00002997  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e22  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f3  00000000  00000000  00003ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000087a  00000000  00000000  000043eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004c65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8c c0       	rjmp	.+280    	; 0x11a <__ctors_end>
       2:	00 00       	nop
       4:	a8 c0       	rjmp	.+336    	; 0x156 <__bad_interrupt>
       6:	00 00       	nop
       8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
       a:	00 00       	nop
       c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
       e:	00 00       	nop
      10:	a2 c0       	rjmp	.+324    	; 0x156 <__bad_interrupt>
      12:	00 00       	nop
      14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
      16:	00 00       	nop
      18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	11 c1       	rjmp	.+546    	; 0x240 <__vector_7>
      1e:	00 00       	nop
      20:	20 c1       	rjmp	.+576    	; 0x262 <__vector_8>
      22:	00 00       	nop
      24:	99 c0       	rjmp	.+306    	; 0x158 <__vector_9>
      26:	00 00       	nop
      28:	96 c0       	rjmp	.+300    	; 0x156 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	94 c0       	rjmp	.+296    	; 0x156 <__bad_interrupt>
      2e:	00 00       	nop
      30:	92 c0       	rjmp	.+292    	; 0x156 <__bad_interrupt>
      32:	00 00       	nop
      34:	90 c0       	rjmp	.+288    	; 0x156 <__bad_interrupt>
      36:	00 00       	nop
      38:	8e c0       	rjmp	.+284    	; 0x156 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ea c0       	rjmp	.+468    	; 0x212 <__vector_15>
      3e:	00 00       	nop
      40:	8a c0       	rjmp	.+276    	; 0x156 <__bad_interrupt>
      42:	00 00       	nop
      44:	88 c0       	rjmp	.+272    	; 0x156 <__bad_interrupt>
      46:	00 00       	nop
      48:	86 c0       	rjmp	.+268    	; 0x156 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	84 c0       	rjmp	.+264    	; 0x156 <__bad_interrupt>
      4e:	00 00       	nop
      50:	82 c0       	rjmp	.+260    	; 0x156 <__bad_interrupt>
      52:	00 00       	nop
      54:	80 c0       	rjmp	.+256    	; 0x156 <__bad_interrupt>
      56:	00 00       	nop
      58:	7e c0       	rjmp	.+252    	; 0x156 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7c c0       	rjmp	.+248    	; 0x156 <__bad_interrupt>
      5e:	00 00       	nop
      60:	7a c0       	rjmp	.+244    	; 0x156 <__bad_interrupt>
      62:	00 00       	nop
      64:	78 c0       	rjmp	.+240    	; 0x156 <__bad_interrupt>
      66:	00 00       	nop
      68:	76 c0       	rjmp	.+236    	; 0x156 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	74 c0       	rjmp	.+232    	; 0x156 <__bad_interrupt>
      6e:	00 00       	nop
      70:	72 c0       	rjmp	.+228    	; 0x156 <__bad_interrupt>
      72:	00 00       	nop
      74:	70 c0       	rjmp	.+224    	; 0x156 <__bad_interrupt>
      76:	00 00       	nop
      78:	6e c0       	rjmp	.+220    	; 0x156 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6c c0       	rjmp	.+216    	; 0x156 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6a c0       	rjmp	.+212    	; 0x156 <__bad_interrupt>
      82:	00 00       	nop
      84:	68 c0       	rjmp	.+208    	; 0x156 <__bad_interrupt>
      86:	00 00       	nop
      88:	66 c0       	rjmp	.+204    	; 0x156 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	99 04       	cpc	r9, r9
      8e:	ad 04       	cpc	r10, r13
      90:	c1 04       	cpc	r12, r1
      92:	d2 04       	cpc	r13, r2
      94:	e3 04       	cpc	r14, r3
      96:	f9 04       	cpc	r15, r9
      98:	0f 05       	cpc	r16, r15
      9a:	1a 05       	cpc	r17, r10
      9c:	9c 06       	cpc	r9, r28
      9e:	9c 06       	cpc	r9, r28
      a0:	9c 06       	cpc	r9, r28
      a2:	9c 06       	cpc	r9, r28
      a4:	9c 06       	cpc	r9, r28
      a6:	9c 06       	cpc	r9, r28
      a8:	9c 06       	cpc	r9, r28
      aa:	9c 06       	cpc	r9, r28
      ac:	9c 06       	cpc	r9, r28
      ae:	9c 06       	cpc	r9, r28
      b0:	9c 06       	cpc	r9, r28
      b2:	9c 06       	cpc	r9, r28
      b4:	9c 06       	cpc	r9, r28
      b6:	9c 06       	cpc	r9, r28
      b8:	9c 06       	cpc	r9, r28
      ba:	9c 06       	cpc	r9, r28
      bc:	9c 06       	cpc	r9, r28
      be:	9c 06       	cpc	r9, r28
      c0:	9c 06       	cpc	r9, r28
      c2:	9c 06       	cpc	r9, r28
      c4:	9c 06       	cpc	r9, r28
      c6:	9c 06       	cpc	r9, r28
      c8:	9c 06       	cpc	r9, r28
      ca:	9c 06       	cpc	r9, r28
      cc:	9c 06       	cpc	r9, r28
      ce:	9c 06       	cpc	r9, r28
      d0:	9c 06       	cpc	r9, r28
      d2:	9c 06       	cpc	r9, r28
      d4:	9c 06       	cpc	r9, r28
      d6:	9c 06       	cpc	r9, r28
      d8:	9c 06       	cpc	r9, r28
      da:	9c 06       	cpc	r9, r28
      dc:	9c 06       	cpc	r9, r28
      de:	9c 06       	cpc	r9, r28
      e0:	9c 06       	cpc	r9, r28
      e2:	9c 06       	cpc	r9, r28
      e4:	9c 06       	cpc	r9, r28
      e6:	9c 06       	cpc	r9, r28
      e8:	9c 06       	cpc	r9, r28
      ea:	9c 06       	cpc	r9, r28
      ec:	cc 01       	movw	r24, r24
      ee:	de 03       	fmulsu	r21, r22
      f0:	8f 06       	cpc	r8, r31
      f2:	25 05       	cpc	r18, r5
      f4:	41 04       	cpc	r4, r1
      f6:	2a 05       	cpc	r18, r10
      f8:	68 06       	cpc	r6, r24
      fa:	7c 06       	cpc	r7, r28
      fc:	7e 05       	cpc	r23, r14
      fe:	76 05       	cpc	r23, r6
     100:	ac 05       	cpc	r26, r12
     102:	bf 05       	cpc	r27, r15
     104:	1c 06       	cpc	r1, r28
     106:	d2 05       	cpc	r29, r2
     108:	86 05       	cpc	r24, r6
     10a:	99 05       	cpc	r25, r9
     10c:	95 06       	cpc	r9, r21
     10e:	82 03       	fmuls	r16, r18
     110:	53 05       	cpc	r21, r3
     112:	9c 06       	cpc	r9, r28
     114:	9c 06       	cpc	r9, r28
     116:	9c 06       	cpc	r9, r28
     118:	2f 05       	cpc	r18, r15

0000011a <__ctors_end>:
     11a:	11 24       	eor	r1, r1
     11c:	1f be       	out	0x3f, r1	; 63
     11e:	cf ef       	ldi	r28, 0xFF	; 255
     120:	d0 e1       	ldi	r29, 0x10	; 16
     122:	de bf       	out	0x3e, r29	; 62
     124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_copy_data>:
     126:	11 e0       	ldi	r17, 0x01	; 1
     128:	a0 e0       	ldi	r26, 0x00	; 0
     12a:	b1 e0       	ldi	r27, 0x01	; 1
     12c:	e2 e8       	ldi	r30, 0x82	; 130
     12e:	f4 e1       	ldi	r31, 0x14	; 20
     130:	00 e0       	ldi	r16, 0x00	; 0
     132:	0b bf       	out	0x3b, r16	; 59
     134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x14>
     136:	07 90       	elpm	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	a2 31       	cpi	r26, 0x12	; 18
     13c:	b1 07       	cpc	r27, r17
     13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0x10>

00000140 <__do_clear_bss>:
     140:	21 e0       	ldi	r18, 0x01	; 1
     142:	a2 e1       	ldi	r26, 0x12	; 18
     144:	b1 e0       	ldi	r27, 0x01	; 1
     146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
     148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
     14a:	a4 33       	cpi	r26, 0x34	; 52
     14c:	b2 07       	cpc	r27, r18
     14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
     150:	b8 d0       	rcall	.+368    	; 0x2c2 <main>
     152:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <_exit>

00000156 <__bad_interrupt>:
     156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <__vector_9>:
unsigned int servo4deg=90-20;		//tilt servo

struct STEPPER headMotor;

ISR(TIMER2_COMP_vect)		//motor2 & UltraSonic sensor count
{
     158:	1f 92       	push	r1
     15a:	0f 92       	push	r0
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	0f 92       	push	r0
     160:	11 24       	eor	r1, r1
     162:	0b b6       	in	r0, 0x3b	; 59
     164:	0f 92       	push	r0
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	ef 93       	push	r30
     17c:	ff 93       	push	r31
	PORTE = PORTE^(timer2Token<<PINE5);
     17e:	23 b1       	in	r18, 0x03	; 3
     180:	90 91 18 01 	lds	r25, 0x0118
     184:	30 e2       	ldi	r19, 0x20	; 32
     186:	93 9f       	mul	r25, r19
     188:	c0 01       	movw	r24, r0
     18a:	11 24       	eor	r1, r1
     18c:	82 27       	eor	r24, r18
     18e:	83 b9       	out	0x03, r24	; 3
	headMotor.stepCnt += headMotor.dir*timer2Token;
     190:	20 91 18 01 	lds	r18, 0x0118
     194:	e9 e1       	ldi	r30, 0x19	; 25
     196:	f1 e0       	ldi	r31, 0x01	; 1
     198:	82 81       	ldd	r24, Z+2	; 0x02
     19a:	93 81       	ldd	r25, Z+3	; 0x03
     19c:	28 9f       	mul	r18, r24
     19e:	a0 01       	movw	r20, r0
     1a0:	29 9f       	mul	r18, r25
     1a2:	50 0d       	add	r21, r0
     1a4:	11 24       	eor	r1, r1
     1a6:	05 2e       	mov	r0, r21
     1a8:	00 0c       	add	r0, r0
     1aa:	66 0b       	sbc	r22, r22
     1ac:	77 0b       	sbc	r23, r23
     1ae:	84 81       	ldd	r24, Z+4	; 0x04
     1b0:	95 81       	ldd	r25, Z+5	; 0x05
     1b2:	a6 81       	ldd	r26, Z+6	; 0x06
     1b4:	b7 81       	ldd	r27, Z+7	; 0x07
     1b6:	48 0f       	add	r20, r24
     1b8:	59 1f       	adc	r21, r25
     1ba:	6a 1f       	adc	r22, r26
     1bc:	7b 1f       	adc	r23, r27
     1be:	44 83       	std	Z+4, r20	; 0x04
     1c0:	55 83       	std	Z+5, r21	; 0x05
     1c2:	66 83       	std	Z+6, r22	; 0x06
     1c4:	77 83       	std	Z+7, r23	; 0x07
	headMotor.steps = headMotor.stepCnt/2;
     1c6:	db 01       	movw	r26, r22
     1c8:	ca 01       	movw	r24, r20
     1ca:	77 23       	and	r23, r23
     1cc:	1c f4       	brge	.+6      	; 0x1d4 <__vector_9+0x7c>
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	a1 1d       	adc	r26, r1
     1d2:	b1 1d       	adc	r27, r1
     1d4:	b5 95       	asr	r27
     1d6:	a7 95       	ror	r26
     1d8:	97 95       	ror	r25
     1da:	87 95       	ror	r24
     1dc:	80 93 21 01 	sts	0x0121, r24
     1e0:	90 93 22 01 	sts	0x0122, r25
     1e4:	a0 93 23 01 	sts	0x0123, r26
     1e8:	b0 93 24 01 	sts	0x0124, r27
}
     1ec:	ff 91       	pop	r31
     1ee:	ef 91       	pop	r30
     1f0:	bf 91       	pop	r27
     1f2:	af 91       	pop	r26
     1f4:	9f 91       	pop	r25
     1f6:	8f 91       	pop	r24
     1f8:	7f 91       	pop	r23
     1fa:	6f 91       	pop	r22
     1fc:	5f 91       	pop	r21
     1fe:	4f 91       	pop	r20
     200:	3f 91       	pop	r19
     202:	2f 91       	pop	r18
     204:	0f 90       	pop	r0
     206:	0b be       	out	0x3b, r0	; 59
     208:	0f 90       	pop	r0
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	0f 90       	pop	r0
     20e:	1f 90       	pop	r1
     210:	18 95       	reti

00000212 <__vector_15>:
ISR(TIMER0_COMP_vect)
{
     212:	1f 92       	push	r1
     214:	0f 92       	push	r0
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	0f 92       	push	r0
     21a:	11 24       	eor	r1, r1
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
	sonicCNT++;
     220:	80 91 13 01 	lds	r24, 0x0113
     224:	90 91 14 01 	lds	r25, 0x0114
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	90 93 14 01 	sts	0x0114, r25
     22e:	80 93 13 01 	sts	0x0113, r24
}
     232:	9f 91       	pop	r25
     234:	8f 91       	pop	r24
     236:	0f 90       	pop	r0
     238:	0f be       	out	0x3f, r0	; 63
     23a:	0f 90       	pop	r0
     23c:	1f 90       	pop	r1
     23e:	18 95       	reti

00000240 <__vector_7>:
ISR(INT6_vect)		//UltraSonic rising edge
{
     240:	1f 92       	push	r1
     242:	0f 92       	push	r0
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	0f 92       	push	r0
     248:	11 24       	eor	r1, r1
     24a:	8f 93       	push	r24
	TIMSK |= (1<<OCIE0);
     24c:	87 b7       	in	r24, 0x37	; 55
     24e:	82 60       	ori	r24, 0x02	; 2
     250:	87 bf       	out	0x37, r24	; 55
	OCR0 = 19;
     252:	83 e1       	ldi	r24, 0x13	; 19
     254:	81 bf       	out	0x31, r24	; 49
}
     256:	8f 91       	pop	r24
     258:	0f 90       	pop	r0
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	0f 90       	pop	r0
     25e:	1f 90       	pop	r1
     260:	18 95       	reti

00000262 <__vector_8>:
ISR(INT7_vect)		//UltraSonic falling edge
{
     262:	1f 92       	push	r1
     264:	0f 92       	push	r0
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	0f 92       	push	r0
     26a:	11 24       	eor	r1, r1
     26c:	2f 93       	push	r18
     26e:	3f 93       	push	r19
     270:	6f 93       	push	r22
     272:	7f 93       	push	r23
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
     278:	af 93       	push	r26
     27a:	bf 93       	push	r27
	TIMSK &= (0<<OCIE0);
     27c:	87 b7       	in	r24, 0x37	; 55
     27e:	17 be       	out	0x37, r1	; 55
	dist = sonicCNT/6;
     280:	20 91 13 01 	lds	r18, 0x0113
     284:	30 91 14 01 	lds	r19, 0x0114
     288:	ab ea       	ldi	r26, 0xAB	; 171
     28a:	ba ea       	ldi	r27, 0xAA	; 170
     28c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__umulhisi3>
     290:	96 95       	lsr	r25
     292:	87 95       	ror	r24
     294:	96 95       	lsr	r25
     296:	87 95       	ror	r24
     298:	90 93 17 01 	sts	0x0117, r25
     29c:	80 93 16 01 	sts	0x0116, r24
	sonicCNT = 0;
     2a0:	10 92 14 01 	sts	0x0114, r1
     2a4:	10 92 13 01 	sts	0x0113, r1
}
     2a8:	bf 91       	pop	r27
     2aa:	af 91       	pop	r26
     2ac:	9f 91       	pop	r25
     2ae:	8f 91       	pop	r24
     2b0:	7f 91       	pop	r23
     2b2:	6f 91       	pop	r22
     2b4:	3f 91       	pop	r19
     2b6:	2f 91       	pop	r18
     2b8:	0f 90       	pop	r0
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	0f 90       	pop	r0
     2be:	1f 90       	pop	r1
     2c0:	18 95       	reti

000002c2 <main>:

int main(void)
{
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	28 97       	sbiw	r28, 0x08	; 8
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
	cli();
     2d6:	f8 94       	cli
	
	stepperInit(&headMotor,2,2);
     2d8:	42 e0       	ldi	r20, 0x02	; 2
     2da:	62 e0       	ldi	r22, 0x02	; 2
     2dc:	89 e1       	ldi	r24, 0x19	; 25
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	ce d5       	rcall	.+2972   	; 0xe7e <stepperInit>
	sensorInit();
     2e2:	4a d6       	rcall	.+3220   	; 0xf78 <sensorInit>
	
	servoInit();
     2e4:	47 d5       	rcall	.+2702   	; 0xd74 <servoInit>
	servoMoveTo(1,servo1deg);
     2e6:	60 91 06 01 	lds	r22, 0x0106
     2ea:	70 91 07 01 	lds	r23, 0x0107
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	5e d5       	rcall	.+2748   	; 0xdae <servoMoveTo>
	servoMoveTo(2,servo2deg);
     2f2:	60 91 04 01 	lds	r22, 0x0104
     2f6:	70 91 05 01 	lds	r23, 0x0105
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	58 d5       	rcall	.+2736   	; 0xdae <servoMoveTo>
	servoMoveTo(3,servo3deg);
     2fe:	60 91 02 01 	lds	r22, 0x0102
     302:	70 91 03 01 	lds	r23, 0x0103
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	52 d5       	rcall	.+2724   	; 0xdae <servoMoveTo>
	servoMoveTo(4,servo4deg);
     30a:	60 91 00 01 	lds	r22, 0x0100
     30e:	70 91 01 01 	lds	r23, 0x0101
     312:	84 e0       	ldi	r24, 0x04	; 4
     314:	4c d5       	rcall	.+2712   	; 0xdae <servoMoveTo>
	
	USART_Init(9600);
     316:	80 e8       	ldi	r24, 0x80	; 128
     318:	95 e2       	ldi	r25, 0x25	; 37
     31a:	10 d6       	rcall	.+3104   	; 0xf3c <USART_Init>
	sonicCNT=0;
     31c:	10 92 14 01 	sts	0x0114, r1
     320:	10 92 13 01 	sts	0x0113, r1
	sonicFlag=0;
     324:	10 92 15 01 	sts	0x0115, r1
	dist=0;
     328:	10 92 17 01 	sts	0x0117, r1
     32c:	10 92 16 01 	sts	0x0116, r1
	unsigned int heightMM=100;
	
	unsigned int tiltDelay=300;
	unsigned int tilt_deg=100*tiltDelay;
	
	stepSpeed(&headMotor,headRPM);
     330:	60 e5       	ldi	r22, 0x50	; 80
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	89 e1       	ldi	r24, 0x19	; 25
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	b4 d5       	rcall	.+2920   	; 0xea2 <stepSpeed>
	
	data='0';
     33a:	80 e3       	ldi	r24, 0x30	; 48
     33c:	80 93 33 01 	sts	0x0133, r24
	unsigned char data1;
	sei();
     340:	78 94       	sei
	unsigned int headHeight=1600;
	unsigned int heightEx=0;
	unsigned int heightMM=100;
	
	unsigned int tiltDelay=300;
	unsigned int tilt_deg=100*tiltDelay;
     342:	00 e3       	ldi	r16, 0x30	; 48
     344:	15 e7       	ldi	r17, 0x75	; 117
	unsigned int headRPM=80;
	int hubSpeed=0;
	
	unsigned int headHeight=1600;
	unsigned int heightEx=0;
	unsigned int heightMM=100;
     346:	24 e6       	ldi	r18, 0x64	; 100
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	3e 83       	std	Y+6, r19	; 0x06
     34c:	2d 83       	std	Y+5, r18	; 0x05
	dist=0;
	unsigned int setDist=80;
	unsigned int headRPM=80;
	int hubSpeed=0;
	
	unsigned int headHeight=1600;
     34e:	0f 2e       	mov	r0, r31
     350:	f0 e4       	ldi	r31, 0x40	; 64
     352:	2f 2e       	mov	r2, r31
     354:	f6 e0       	ldi	r31, 0x06	; 6
     356:	3f 2e       	mov	r3, r31
     358:	f0 2d       	mov	r31, r0
	sonicCNT=0;
	sonicFlag=0;
	dist=0;
	unsigned int setDist=80;
	unsigned int headRPM=80;
	int hubSpeed=0;
     35a:	1c 82       	std	Y+4, r1	; 0x04
     35c:	1b 82       	std	Y+3, r1	; 0x03
	USART_Init(9600);
	sonicCNT=0;
	sonicFlag=0;
	dist=0;
	unsigned int setDist=80;
	unsigned int headRPM=80;
     35e:	40 e5       	ldi	r20, 0x50	; 80
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	5a 83       	std	Y+2, r21	; 0x02
     364:	49 83       	std	Y+1, r20	; 0x01
	
	USART_Init(9600);
	sonicCNT=0;
	sonicFlag=0;
	dist=0;
	unsigned int setDist=80;
     366:	80 e5       	ldi	r24, 0x50	; 80
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	98 87       	std	Y+8, r25	; 0x08
     36c:	8f 83       	std	Y+7, r24	; 0x07
	unsigned char data1;
	sei();
	
	while (1)
	{
		data1=data;
     36e:	f0 90 33 01 	lds	r15, 0x0133
		if(UCSR0A&(1<<RXC0))
     372:	5f 9b       	sbis	0x0b, 7	; 11
     374:	03 c0       	rjmp	.+6      	; 0x37c <main+0xba>
		{
			data = RX0_data();
     376:	ce d5       	rcall	.+2972   	; 0xf14 <RX0_data>
     378:	80 93 33 01 	sts	0x0133, r24
		}
		
		switch(data){
     37c:	e0 91 33 01 	lds	r30, 0x0133
     380:	8e 2f       	mov	r24, r30
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	fc 01       	movw	r30, r24
     386:	f1 97       	sbiw	r30, 0x31	; 49
     388:	e7 34       	cpi	r30, 0x47	; 71
     38a:	f1 05       	cpc	r31, r1
     38c:	08 f0       	brcs	.+2      	; 0x390 <main+0xce>
     38e:	d4 c4       	rjmp	.+2472   	; 0xd38 <main+0xa76>
     390:	ea 5b       	subi	r30, 0xBA	; 186
     392:	ff 4f       	sbci	r31, 0xFF	; 255
     394:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__tablejump2__>
			case 'a':		//스캐닝 동작
				stepSpeed(&headMotor,headRPM);
     398:	69 81       	ldd	r22, Y+1	; 0x01
     39a:	7a 81       	ldd	r23, Y+2	; 0x02
     39c:	89 e1       	ldi	r24, 0x19	; 25
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	80 d5       	rcall	.+2816   	; 0xea2 <stepSpeed>
				TCCR0 = (1<<WGM01)|(0<<WGM00)|(0<<COM01)|(0<<COM00)|(1<<CS02)|(1<<CS01)|(1<<CS00);
     3a2:	9f e0       	ldi	r25, 0x0F	; 15
     3a4:	93 bf       	out	0x33, r25	; 51
				TIMSK |= (1<<OCIE0);
     3a6:	87 b7       	in	r24, 0x37	; 55
     3a8:	82 60       	ori	r24, 0x02	; 2
     3aa:	87 bf       	out	0x37, r24	; 55
				OCR0 = 124;
     3ac:	ec e7       	ldi	r30, 0x7C	; 124
     3ae:	e1 bf       	out	0x31, r30	; 49
				if(sonicCNT/125<=60)
     3b0:	80 91 13 01 	lds	r24, 0x0113
     3b4:	90 91 14 01 	lds	r25, 0x0114
     3b8:	89 3c       	cpi	r24, 0xC9	; 201
     3ba:	9d 41       	sbci	r25, 0x1D	; 29
     3bc:	28 f4       	brcc	.+10     	; 0x3c8 <main+0x106>
				{
					hubMove(0,5000);
     3be:	68 e8       	ldi	r22, 0x88	; 136
     3c0:	73 e1       	ldi	r23, 0x13	; 19
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	4f d5       	rcall	.+2718   	; 0xe64 <hubMove>
     3c6:	16 c0       	rjmp	.+44     	; 0x3f4 <main+0x132>
				}
				else if(sonicCNT/125>60)
     3c8:	80 91 13 01 	lds	r24, 0x0113
     3cc:	90 91 14 01 	lds	r25, 0x0114
     3d0:	89 3c       	cpi	r24, 0xC9	; 201
     3d2:	9d 41       	sbci	r25, 0x1D	; 29
     3d4:	78 f0       	brcs	.+30     	; 0x3f4 <main+0x132>
				{
					TIMSK = (0<<OCIE0);
     3d6:	17 be       	out	0x37, r1	; 55
					sonicCNT=0;
     3d8:	10 92 14 01 	sts	0x0114, r1
     3dc:	10 92 13 01 	sts	0x0113, r1
					hubMove(0,0);
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	3e d5       	rcall	.+2684   	; 0xe64 <hubMove>
					isReady=2;
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	80 93 12 01 	sts	0x0112, r24
					data='e';
     3ee:	35 e6       	ldi	r19, 0x65	; 101
     3f0:	30 93 33 01 	sts	0x0133, r19
  				}
				
				if(sonicCNT/125>=15&&sonicCNT/125<35)
     3f4:	80 91 13 01 	lds	r24, 0x0113
     3f8:	90 91 14 01 	lds	r25, 0x0114
     3fc:	83 35       	cpi	r24, 0x53	; 83
     3fe:	97 40       	sbci	r25, 0x07	; 7
     400:	08 f4       	brcc	.+2      	; 0x404 <main+0x142>
     402:	7c c0       	rjmp	.+248    	; 0x4fc <main+0x23a>
     404:	80 91 13 01 	lds	r24, 0x0113
     408:	90 91 14 01 	lds	r25, 0x0114
     40c:	87 31       	cpi	r24, 0x17	; 23
     40e:	91 41       	sbci	r25, 0x11	; 17
     410:	08 f0       	brcs	.+2      	; 0x414 <main+0x152>
     412:	74 c0       	rjmp	.+232    	; 0x4fc <main+0x23a>
				{
					headRPM=40;
					if(headMotor.steps<headHeight*1.5)
     414:	60 91 21 01 	lds	r22, 0x0121
     418:	70 91 22 01 	lds	r23, 0x0122
     41c:	80 91 23 01 	lds	r24, 0x0123
     420:	90 91 24 01 	lds	r25, 0x0124
     424:	98 d6       	rcall	.+3376   	; 0x1156 <__floatsisf>
     426:	6b 01       	movw	r12, r22
     428:	7c 01       	movw	r14, r24
     42a:	b1 01       	movw	r22, r2
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	90 d6       	rcall	.+3360   	; 0x1152 <__floatunsisf>
     432:	2b 01       	movw	r4, r22
     434:	3c 01       	movw	r6, r24
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 ec       	ldi	r20, 0xC0	; 192
     43c:	5f e3       	ldi	r21, 0x3F	; 63
     43e:	3f d7       	rcall	.+3710   	; 0x12be <__mulsf3>
     440:	4b 01       	movw	r8, r22
     442:	5c 01       	movw	r10, r24
     444:	9b 01       	movw	r18, r22
     446:	ac 01       	movw	r20, r24
     448:	c7 01       	movw	r24, r14
     44a:	b6 01       	movw	r22, r12
     44c:	16 d6       	rcall	.+3116   	; 0x107a <__cmpsf2>
     44e:	88 23       	and	r24, r24
     450:	bc f5       	brge	.+110    	; 0x4c0 <main+0x1fe>
					{
						timer2Token=1;
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	80 93 18 01 	sts	0x0118, r24
						stepperMove(&headMotor,1);
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	89 e1       	ldi	r24, 0x19	; 25
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	42 d5       	rcall	.+2692   	; 0xee6 <stepperMove>
						if(headMotor.steps>headHeight*1.1)
     462:	60 91 21 01 	lds	r22, 0x0121
     466:	70 91 22 01 	lds	r23, 0x0122
     46a:	80 91 23 01 	lds	r24, 0x0123
     46e:	90 91 24 01 	lds	r25, 0x0124
     472:	71 d6       	rcall	.+3298   	; 0x1156 <__floatsisf>
     474:	6b 01       	movw	r12, r22
     476:	7c 01       	movw	r14, r24
     478:	2d ec       	ldi	r18, 0xCD	; 205
     47a:	3c ec       	ldi	r19, 0xCC	; 204
     47c:	4c e8       	ldi	r20, 0x8C	; 140
     47e:	5f e3       	ldi	r21, 0x3F	; 63
     480:	c3 01       	movw	r24, r6
     482:	b2 01       	movw	r22, r4
     484:	1c d7       	rcall	.+3640   	; 0x12be <__mulsf3>
     486:	9b 01       	movw	r18, r22
     488:	ac 01       	movw	r20, r24
     48a:	c7 01       	movw	r24, r14
     48c:	b6 01       	movw	r22, r12
     48e:	13 d7       	rcall	.+3622   	; 0x12b6 <__gesf2>
     490:	18 16       	cp	r1, r24
     492:	34 f5       	brge	.+76     	; 0x4e0 <main+0x21e>
						{
							if(tilt_deg/tiltDelay>75-20) tilt_deg--;
     494:	00 3a       	cpi	r16, 0xA0	; 160
     496:	81 e4       	ldi	r24, 0x41	; 65
     498:	18 07       	cpc	r17, r24
     49a:	38 f0       	brcs	.+14     	; 0x4aa <main+0x1e8>
     49c:	01 50       	subi	r16, 0x01	; 1
     49e:	11 09       	sbc	r17, r1
					data='e';
  				}
				
				if(sonicCNT/125>=15&&sonicCNT/125<35)
				{
					headRPM=40;
     4a0:	e8 e2       	ldi	r30, 0x28	; 40
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	fa 83       	std	Y+2, r31	; 0x02
     4a6:	e9 83       	std	Y+1, r30	; 0x01
     4a8:	29 c0       	rjmp	.+82     	; 0x4fc <main+0x23a>
						timer2Token=1;
						stepperMove(&headMotor,1);
						if(headMotor.steps>headHeight*1.1)
						{
							if(tilt_deg/tiltDelay>75-20) tilt_deg--;
							else if(tilt_deg/tiltDelay<75-20) tilt_deg++;
     4aa:	04 37       	cpi	r16, 0x74	; 116
     4ac:	f0 e4       	ldi	r31, 0x40	; 64
     4ae:	1f 07       	cpc	r17, r31
     4b0:	e0 f4       	brcc	.+56     	; 0x4ea <main+0x228>
     4b2:	0f 5f       	subi	r16, 0xFF	; 255
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
					data='e';
  				}
				
				if(sonicCNT/125>=15&&sonicCNT/125<35)
				{
					headRPM=40;
     4b6:	28 e2       	ldi	r18, 0x28	; 40
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	3a 83       	std	Y+2, r19	; 0x02
     4bc:	29 83       	std	Y+1, r18	; 0x01
     4be:	1e c0       	rjmp	.+60     	; 0x4fc <main+0x23a>
							if(tilt_deg/tiltDelay>75-20) tilt_deg--;
							else if(tilt_deg/tiltDelay<75-20) tilt_deg++;
						}
					}
					
					else if(headMotor.steps>=headHeight*1.5)
     4c0:	a5 01       	movw	r20, r10
     4c2:	94 01       	movw	r18, r8
     4c4:	c7 01       	movw	r24, r14
     4c6:	b6 01       	movw	r22, r12
     4c8:	f6 d6       	rcall	.+3564   	; 0x12b6 <__gesf2>
     4ca:	88 23       	and	r24, r24
     4cc:	9c f0       	brlt	.+38     	; 0x4f4 <main+0x232>
					{
						timer2Token=0;
     4ce:	10 92 18 01 	sts	0x0118, r1
						TIMSK &=(0<<OCIE2);
     4d2:	87 b7       	in	r24, 0x37	; 55
     4d4:	17 be       	out	0x37, r1	; 55
					data='e';
  				}
				
				if(sonicCNT/125>=15&&sonicCNT/125<35)
				{
					headRPM=40;
     4d6:	48 e2       	ldi	r20, 0x28	; 40
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	5a 83       	std	Y+2, r21	; 0x02
     4dc:	49 83       	std	Y+1, r20	; 0x01
     4de:	0e c0       	rjmp	.+28     	; 0x4fc <main+0x23a>
     4e0:	88 e2       	ldi	r24, 0x28	; 40
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	9a 83       	std	Y+2, r25	; 0x02
     4e6:	89 83       	std	Y+1, r24	; 0x01
     4e8:	09 c0       	rjmp	.+18     	; 0x4fc <main+0x23a>
     4ea:	e8 e2       	ldi	r30, 0x28	; 40
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	fa 83       	std	Y+2, r31	; 0x02
     4f0:	e9 83       	std	Y+1, r30	; 0x01
     4f2:	04 c0       	rjmp	.+8      	; 0x4fc <main+0x23a>
     4f4:	28 e2       	ldi	r18, 0x28	; 40
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	3a 83       	std	Y+2, r19	; 0x02
     4fa:	29 83       	std	Y+1, r18	; 0x01
					{
						timer2Token=0;
						TIMSK &=(0<<OCIE2);
					}
				}
				if(sonicCNT/125>=35&&sonicCNT/125<52)
     4fc:	80 91 13 01 	lds	r24, 0x0113
     500:	90 91 14 01 	lds	r25, 0x0114
     504:	87 31       	cpi	r24, 0x17	; 23
     506:	91 41       	sbci	r25, 0x11	; 17
     508:	08 f4       	brcc	.+2      	; 0x50c <main+0x24a>
     50a:	92 c0       	rjmp	.+292    	; 0x630 <main+0x36e>
     50c:	80 91 13 01 	lds	r24, 0x0113
     510:	90 91 14 01 	lds	r25, 0x0114
     514:	84 36       	cpi	r24, 0x64	; 100
     516:	99 41       	sbci	r25, 0x19	; 25
     518:	08 f0       	brcs	.+2      	; 0x51c <main+0x25a>
     51a:	8a c0       	rjmp	.+276    	; 0x630 <main+0x36e>
				{
					headRPM=20;
					if(headMotor.steps>headHeight*0.2)
     51c:	60 91 21 01 	lds	r22, 0x0121
     520:	70 91 22 01 	lds	r23, 0x0122
     524:	80 91 23 01 	lds	r24, 0x0123
     528:	90 91 24 01 	lds	r25, 0x0124
     52c:	14 d6       	rcall	.+3112   	; 0x1156 <__floatsisf>
     52e:	6b 01       	movw	r12, r22
     530:	7c 01       	movw	r14, r24
     532:	b1 01       	movw	r22, r2
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0c d6       	rcall	.+3096   	; 0x1152 <__floatunsisf>
     53a:	2b 01       	movw	r4, r22
     53c:	3c 01       	movw	r6, r24
     53e:	2d ec       	ldi	r18, 0xCD	; 205
     540:	3c ec       	ldi	r19, 0xCC	; 204
     542:	4c e4       	ldi	r20, 0x4C	; 76
     544:	5e e3       	ldi	r21, 0x3E	; 62
     546:	bb d6       	rcall	.+3446   	; 0x12be <__mulsf3>
     548:	4b 01       	movw	r8, r22
     54a:	5c 01       	movw	r10, r24
     54c:	9b 01       	movw	r18, r22
     54e:	ac 01       	movw	r20, r24
     550:	c7 01       	movw	r24, r14
     552:	b6 01       	movw	r22, r12
     554:	b0 d6       	rcall	.+3424   	; 0x12b6 <__gesf2>
     556:	18 16       	cp	r1, r24
     558:	bc f5       	brge	.+110    	; 0x5c8 <main+0x306>
					{
						timer2Token=1;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	80 93 18 01 	sts	0x0118, r24
						stepperMove(&headMotor,-1);
     560:	6f ef       	ldi	r22, 0xFF	; 255
     562:	7f ef       	ldi	r23, 0xFF	; 255
     564:	89 e1       	ldi	r24, 0x19	; 25
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	be d4       	rcall	.+2428   	; 0xee6 <stepperMove>
						if(headMotor.steps>headHeight*0.6)
     56a:	60 91 21 01 	lds	r22, 0x0121
     56e:	70 91 22 01 	lds	r23, 0x0122
     572:	80 91 23 01 	lds	r24, 0x0123
     576:	90 91 24 01 	lds	r25, 0x0124
     57a:	ed d5       	rcall	.+3034   	; 0x1156 <__floatsisf>
     57c:	6b 01       	movw	r12, r22
     57e:	7c 01       	movw	r14, r24
     580:	2a e9       	ldi	r18, 0x9A	; 154
     582:	39 e9       	ldi	r19, 0x99	; 153
     584:	49 e1       	ldi	r20, 0x19	; 25
     586:	5f e3       	ldi	r21, 0x3F	; 63
     588:	c3 01       	movw	r24, r6
     58a:	b2 01       	movw	r22, r4
     58c:	98 d6       	rcall	.+3376   	; 0x12be <__mulsf3>
     58e:	9b 01       	movw	r18, r22
     590:	ac 01       	movw	r20, r24
     592:	c7 01       	movw	r24, r14
     594:	b6 01       	movw	r22, r12
     596:	8f d6       	rcall	.+3358   	; 0x12b6 <__gesf2>
     598:	18 16       	cp	r1, r24
     59a:	bc f5       	brge	.+110    	; 0x60a <main+0x348>
						{
							if(tilt_deg/tiltDelay>70-20) tilt_deg--;
     59c:	04 3c       	cpi	r16, 0xC4	; 196
     59e:	5b e3       	ldi	r21, 0x3B	; 59
     5a0:	15 07       	cpc	r17, r21
     5a2:	38 f0       	brcs	.+14     	; 0x5b2 <main+0x2f0>
     5a4:	01 50       	subi	r16, 0x01	; 1
     5a6:	11 09       	sbc	r17, r1
						TIMSK &=(0<<OCIE2);
					}
				}
				if(sonicCNT/125>=35&&sonicCNT/125<52)
				{
					headRPM=20;
     5a8:	84 e1       	ldi	r24, 0x14	; 20
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	9a 83       	std	Y+2, r25	; 0x02
     5ae:	89 83       	std	Y+1, r24	; 0x01
     5b0:	3f c0       	rjmp	.+126    	; 0x630 <main+0x36e>
						timer2Token=1;
						stepperMove(&headMotor,-1);
						if(headMotor.steps>headHeight*0.6)
						{
							if(tilt_deg/tiltDelay>70-20) tilt_deg--;
							else if(tilt_deg/tiltDelay<70-20) tilt_deg++;
     5b2:	08 39       	cpi	r16, 0x98	; 152
     5b4:	9a e3       	ldi	r25, 0x3A	; 58
     5b6:	19 07       	cpc	r17, r25
     5b8:	68 f5       	brcc	.+90     	; 0x614 <main+0x352>
     5ba:	0f 5f       	subi	r16, 0xFF	; 255
     5bc:	1f 4f       	sbci	r17, 0xFF	; 255
						TIMSK &=(0<<OCIE2);
					}
				}
				if(sonicCNT/125>=35&&sonicCNT/125<52)
				{
					headRPM=20;
     5be:	e4 e1       	ldi	r30, 0x14	; 20
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	fa 83       	std	Y+2, r31	; 0x02
     5c4:	e9 83       	std	Y+1, r30	; 0x01
     5c6:	34 c0       	rjmp	.+104    	; 0x630 <main+0x36e>
						{
							if(tilt_deg/tiltDelay>70-20) tilt_deg--;
							else if(tilt_deg/tiltDelay<70-20) tilt_deg++;
						}
					}
					else if(headMotor.steps<=headHeight*0.2)
     5c8:	a5 01       	movw	r20, r10
     5ca:	94 01       	movw	r18, r8
     5cc:	c7 01       	movw	r24, r14
     5ce:	b6 01       	movw	r22, r12
     5d0:	54 d5       	rcall	.+2728   	; 0x107a <__cmpsf2>
     5d2:	18 16       	cp	r1, r24
     5d4:	24 f1       	brlt	.+72     	; 0x61e <main+0x35c>
					{
						timer2Token=0;
     5d6:	10 92 18 01 	sts	0x0118, r1
						TIMSK &=(0<<OCIE2);
     5da:	87 b7       	in	r24, 0x37	; 55
     5dc:	17 be       	out	0x37, r1	; 55
						if(tilt_deg/tiltDelay>90-20) tilt_deg--;
     5de:	04 33       	cpi	r16, 0x34	; 52
     5e0:	f3 e5       	ldi	r31, 0x53	; 83
     5e2:	1f 07       	cpc	r17, r31
     5e4:	38 f0       	brcs	.+14     	; 0x5f4 <main+0x332>
     5e6:	01 50       	subi	r16, 0x01	; 1
     5e8:	11 09       	sbc	r17, r1
						TIMSK &=(0<<OCIE2);
					}
				}
				if(sonicCNT/125>=35&&sonicCNT/125<52)
				{
					headRPM=20;
     5ea:	24 e1       	ldi	r18, 0x14	; 20
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	3a 83       	std	Y+2, r19	; 0x02
     5f0:	29 83       	std	Y+1, r18	; 0x01
     5f2:	1e c0       	rjmp	.+60     	; 0x630 <main+0x36e>
					else if(headMotor.steps<=headHeight*0.2)
					{
						timer2Token=0;
						TIMSK &=(0<<OCIE2);
						if(tilt_deg/tiltDelay>90-20) tilt_deg--;
						else if(tilt_deg/tiltDelay<90-20) tilt_deg++;
     5f4:	08 30       	cpi	r16, 0x08	; 8
     5f6:	32 e5       	ldi	r19, 0x52	; 82
     5f8:	13 07       	cpc	r17, r19
     5fa:	b0 f4       	brcc	.+44     	; 0x628 <main+0x366>
     5fc:	0f 5f       	subi	r16, 0xFF	; 255
     5fe:	1f 4f       	sbci	r17, 0xFF	; 255
						TIMSK &=(0<<OCIE2);
					}
				}
				if(sonicCNT/125>=35&&sonicCNT/125<52)
				{
					headRPM=20;
     600:	44 e1       	ldi	r20, 0x14	; 20
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	5a 83       	std	Y+2, r21	; 0x02
     606:	49 83       	std	Y+1, r20	; 0x01
     608:	13 c0       	rjmp	.+38     	; 0x630 <main+0x36e>
     60a:	84 e1       	ldi	r24, 0x14	; 20
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	9a 83       	std	Y+2, r25	; 0x02
     610:	89 83       	std	Y+1, r24	; 0x01
     612:	0e c0       	rjmp	.+28     	; 0x630 <main+0x36e>
     614:	e4 e1       	ldi	r30, 0x14	; 20
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	fa 83       	std	Y+2, r31	; 0x02
     61a:	e9 83       	std	Y+1, r30	; 0x01
     61c:	09 c0       	rjmp	.+18     	; 0x630 <main+0x36e>
     61e:	24 e1       	ldi	r18, 0x14	; 20
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	3a 83       	std	Y+2, r19	; 0x02
     624:	29 83       	std	Y+1, r18	; 0x01
     626:	04 c0       	rjmp	.+8      	; 0x630 <main+0x36e>
     628:	44 e1       	ldi	r20, 0x14	; 20
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	5a 83       	std	Y+2, r21	; 0x02
     62e:	49 83       	std	Y+1, r20	; 0x01
						TIMSK &=(0<<OCIE2);
						if(tilt_deg/tiltDelay>90-20) tilt_deg--;
						else if(tilt_deg/tiltDelay<90-20) tilt_deg++;
					}
				}
				if(sonicCNT/125>=52&&sonicCNT/125<60)
     630:	80 91 13 01 	lds	r24, 0x0113
     634:	90 91 14 01 	lds	r25, 0x0114
     638:	84 36       	cpi	r24, 0x64	; 100
     63a:	99 41       	sbci	r25, 0x19	; 25
     63c:	08 f4       	brcc	.+2      	; 0x640 <main+0x37e>
     63e:	4e c0       	rjmp	.+156    	; 0x6dc <main+0x41a>
     640:	80 91 13 01 	lds	r24, 0x0113
     644:	90 91 14 01 	lds	r25, 0x0114
     648:	8c 34       	cpi	r24, 0x4C	; 76
     64a:	9d 41       	sbci	r25, 0x1D	; 29
     64c:	08 f0       	brcs	.+2      	; 0x650 <main+0x38e>
     64e:	46 c0       	rjmp	.+140    	; 0x6dc <main+0x41a>
				{
					if(headMotor.steps>0)
     650:	80 91 21 01 	lds	r24, 0x0121
     654:	90 91 22 01 	lds	r25, 0x0122
     658:	a0 91 23 01 	lds	r26, 0x0123
     65c:	b0 91 24 01 	lds	r27, 0x0124
     660:	18 16       	cp	r1, r24
     662:	19 06       	cpc	r1, r25
     664:	1a 06       	cpc	r1, r26
     666:	1b 06       	cpc	r1, r27
     668:	8c f5       	brge	.+98     	; 0x6cc <main+0x40a>
					{
						timer2Token=1;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	80 93 18 01 	sts	0x0118, r24
						stepperMove(&headMotor,-1);
     670:	6f ef       	ldi	r22, 0xFF	; 255
     672:	7f ef       	ldi	r23, 0xFF	; 255
     674:	89 e1       	ldi	r24, 0x19	; 25
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	36 d4       	rcall	.+2156   	; 0xee6 <stepperMove>
						if(headMotor.steps<headHeight*0.1)
     67a:	60 91 21 01 	lds	r22, 0x0121
     67e:	70 91 22 01 	lds	r23, 0x0122
     682:	80 91 23 01 	lds	r24, 0x0123
     686:	90 91 24 01 	lds	r25, 0x0124
     68a:	65 d5       	rcall	.+2762   	; 0x1156 <__floatsisf>
     68c:	6b 01       	movw	r12, r22
     68e:	7c 01       	movw	r14, r24
     690:	b1 01       	movw	r22, r2
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	5d d5       	rcall	.+2746   	; 0x1152 <__floatunsisf>
     698:	2d ec       	ldi	r18, 0xCD	; 205
     69a:	3c ec       	ldi	r19, 0xCC	; 204
     69c:	4c ec       	ldi	r20, 0xCC	; 204
     69e:	5d e3       	ldi	r21, 0x3D	; 61
     6a0:	0e d6       	rcall	.+3100   	; 0x12be <__mulsf3>
     6a2:	9b 01       	movw	r18, r22
     6a4:	ac 01       	movw	r20, r24
     6a6:	c7 01       	movw	r24, r14
     6a8:	b6 01       	movw	r22, r12
     6aa:	e7 d4       	rcall	.+2510   	; 0x107a <__cmpsf2>
     6ac:	88 23       	and	r24, r24
     6ae:	b4 f4       	brge	.+44     	; 0x6dc <main+0x41a>
						{
							if(tilt_deg/tiltDelay>70-20) tilt_deg--;
     6b0:	04 3c       	cpi	r16, 0xC4	; 196
     6b2:	fb e3       	ldi	r31, 0x3B	; 59
     6b4:	1f 07       	cpc	r17, r31
     6b6:	18 f0       	brcs	.+6      	; 0x6be <main+0x3fc>
     6b8:	01 50       	subi	r16, 0x01	; 1
     6ba:	11 09       	sbc	r17, r1
     6bc:	0f c0       	rjmp	.+30     	; 0x6dc <main+0x41a>
							else if(tilt_deg/tiltDelay<70-20) tilt_deg++;
     6be:	08 39       	cpi	r16, 0x98	; 152
     6c0:	2a e3       	ldi	r18, 0x3A	; 58
     6c2:	12 07       	cpc	r17, r18
     6c4:	58 f4       	brcc	.+22     	; 0x6dc <main+0x41a>
     6c6:	0f 5f       	subi	r16, 0xFF	; 255
     6c8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ca:	08 c0       	rjmp	.+16     	; 0x6dc <main+0x41a>
						}
					}
					else if(headMotor.steps<=0)
					{
						timer2Token=0;
     6cc:	10 92 18 01 	sts	0x0118, r1
						TIMSK &=(0<<OCIE2);
     6d0:	87 b7       	in	r24, 0x37	; 55
     6d2:	17 be       	out	0x37, r1	; 55
						headRPM=60;
     6d4:	4c e3       	ldi	r20, 0x3C	; 60
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	5a 83       	std	Y+2, r21	; 0x02
     6da:	49 83       	std	Y+1, r20	; 0x01
					}
				}
				servoMoveTo(4,tilt_deg/tiltDelay);
     6dc:	98 01       	movw	r18, r16
     6de:	36 95       	lsr	r19
     6e0:	27 95       	ror	r18
     6e2:	36 95       	lsr	r19
     6e4:	27 95       	ror	r18
     6e6:	ab e3       	ldi	r26, 0x3B	; 59
     6e8:	bd e6       	ldi	r27, 0x6D	; 109
     6ea:	a6 d6       	rcall	.+3404   	; 0x1438 <__umulhisi3>
     6ec:	bc 01       	movw	r22, r24
     6ee:	76 95       	lsr	r23
     6f0:	67 95       	ror	r22
     6f2:	72 95       	swap	r23
     6f4:	62 95       	swap	r22
     6f6:	6f 70       	andi	r22, 0x0F	; 15
     6f8:	67 27       	eor	r22, r23
     6fa:	7f 70       	andi	r23, 0x0F	; 15
     6fc:	67 27       	eor	r22, r23
     6fe:	84 e0       	ldi	r24, 0x04	; 4
     700:	56 d3       	rcall	.+1708   	; 0xdae <servoMoveTo>
				break;
     702:	35 ce       	rjmp	.-918    	; 0x36e <main+0xac>
			case 'r':	//키에 맞춰 헤드 이동 및 스캔 준비
				if(headMotor.steps<headHeight && headMotor.steps>=0)
     704:	80 91 21 01 	lds	r24, 0x0121
     708:	90 91 22 01 	lds	r25, 0x0122
     70c:	a0 91 23 01 	lds	r26, 0x0123
     710:	b0 91 24 01 	lds	r27, 0x0124
     714:	a1 01       	movw	r20, r2
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	84 17       	cp	r24, r20
     71c:	95 07       	cpc	r25, r21
     71e:	a6 07       	cpc	r26, r22
     720:	b7 07       	cpc	r27, r23
     722:	44 f4       	brge	.+16     	; 0x734 <main+0x472>
     724:	bb 23       	and	r27, r27
     726:	34 f0       	brlt	.+12     	; 0x734 <main+0x472>
					stepperMove(&headMotor,1);
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	89 e1       	ldi	r24, 0x19	; 25
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	da d3       	rcall	.+1972   	; 0xee6 <stepperMove>
     732:	23 c0       	rjmp	.+70     	; 0x77a <main+0x4b8>
				else if(headMotor.steps==headHeight)
     734:	84 17       	cp	r24, r20
     736:	95 07       	cpc	r25, r21
     738:	a6 07       	cpc	r26, r22
     73a:	b7 07       	cpc	r27, r23
     73c:	a1 f4       	brne	.+40     	; 0x766 <main+0x4a4>
				{
					if(timer2Token==1)
     73e:	80 91 18 01 	lds	r24, 0x0118
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	31 f4       	brne	.+12     	; 0x752 <main+0x490>
					{
						timer2Token=0;
     746:	10 92 18 01 	sts	0x0118, r1
						sensorInit();
     74a:	16 d4       	rcall	.+2092   	; 0xf78 <sensorInit>
						data='b';
     74c:	52 e6       	ldi	r21, 0x62	; 98
     74e:	50 93 33 01 	sts	0x0133, r21
					}
					if(isReady==1)
     752:	80 91 12 01 	lds	r24, 0x0112
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	81 f4       	brne	.+32     	; 0x77a <main+0x4b8>
					{
						TX0_string("^r");
     75a:	88 e0       	ldi	r24, 0x08	; 8
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	e0 d3       	rcall	.+1984   	; 0xf20 <TX0_string>
						isReady=0;
     760:	10 92 12 01 	sts	0x0112, r1
     764:	0a c0       	rjmp	.+20     	; 0x77a <main+0x4b8>
					}
				}
				else if(headMotor.steps>headHeight) stepperMove(&headMotor,-1);
     766:	48 17       	cp	r20, r24
     768:	59 07       	cpc	r21, r25
     76a:	6a 07       	cpc	r22, r26
     76c:	7b 07       	cpc	r23, r27
     76e:	2c f4       	brge	.+10     	; 0x77a <main+0x4b8>
     770:	6f ef       	ldi	r22, 0xFF	; 255
     772:	7f ef       	ldi	r23, 0xFF	; 255
     774:	89 e1       	ldi	r24, 0x19	; 25
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	b6 d3       	rcall	.+1900   	; 0xee6 <stepperMove>
				if(tilt_deg/tiltDelay>90-20) tilt_deg--;
     77a:	04 33       	cpi	r16, 0x34	; 52
     77c:	83 e5       	ldi	r24, 0x53	; 83
     77e:	18 07       	cpc	r17, r24
     780:	18 f0       	brcs	.+6      	; 0x788 <main+0x4c6>
     782:	01 50       	subi	r16, 0x01	; 1
     784:	11 09       	sbc	r17, r1
     786:	06 c0       	rjmp	.+12     	; 0x794 <main+0x4d2>
				else if(tilt_deg/tiltDelay<90-20) tilt_deg++;
     788:	08 30       	cpi	r16, 0x08	; 8
     78a:	92 e5       	ldi	r25, 0x52	; 82
     78c:	19 07       	cpc	r17, r25
     78e:	10 f4       	brcc	.+4      	; 0x794 <main+0x4d2>
     790:	0f 5f       	subi	r16, 0xFF	; 255
     792:	1f 4f       	sbci	r17, 0xFF	; 255
				servoMoveTo(4,tilt_deg/tiltDelay);
     794:	98 01       	movw	r18, r16
     796:	36 95       	lsr	r19
     798:	27 95       	ror	r18
     79a:	36 95       	lsr	r19
     79c:	27 95       	ror	r18
     79e:	ab e3       	ldi	r26, 0x3B	; 59
     7a0:	bd e6       	ldi	r27, 0x6D	; 109
     7a2:	4a d6       	rcall	.+3220   	; 0x1438 <__umulhisi3>
     7a4:	bc 01       	movw	r22, r24
     7a6:	76 95       	lsr	r23
     7a8:	67 95       	ror	r22
     7aa:	72 95       	swap	r23
     7ac:	62 95       	swap	r22
     7ae:	6f 70       	andi	r22, 0x0F	; 15
     7b0:	67 27       	eor	r22, r23
     7b2:	7f 70       	andi	r23, 0x0F	; 15
     7b4:	67 27       	eor	r22, r23
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	fa d2       	rcall	.+1524   	; 0xdae <servoMoveTo>
				break;
     7ba:	d9 cd       	rjmp	.-1102   	; 0x36e <main+0xac>
			case 'b':	//스캐닝 준비 초음파센서로 거리 조정
				turnWheel(90,90+1,90-3);
     7bc:	47 e5       	ldi	r20, 0x57	; 87
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	6b e5       	ldi	r22, 0x5B	; 91
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	8a e5       	ldi	r24, 0x5A	; 90
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	2d d3       	rcall	.+1626   	; 0xe24 <turnWheel>
				
				//sensorInit();
				checkDist();
     7ca:	e1 d3       	rcall	.+1986   	; 0xf8e <checkDist>
				//TX0_data(dist);
				//TIMSK = (0<<OCIE2);
				if(dist!=5){
     7cc:	80 91 16 01 	lds	r24, 0x0116
     7d0:	90 91 17 01 	lds	r25, 0x0117
     7d4:	05 97       	sbiw	r24, 0x05	; 5
     7d6:	09 f4       	brne	.+2      	; 0x7da <main+0x518>
     7d8:	ca cd       	rjmp	.-1132   	; 0x36e <main+0xac>
					if(dist>setDist+2) hubMove(1,1000);
     7da:	8f 81       	ldd	r24, Y+7	; 0x07
     7dc:	98 85       	ldd	r25, Y+8	; 0x08
     7de:	02 96       	adiw	r24, 0x02	; 2
     7e0:	20 91 16 01 	lds	r18, 0x0116
     7e4:	30 91 17 01 	lds	r19, 0x0117
     7e8:	82 17       	cp	r24, r18
     7ea:	93 07       	cpc	r25, r19
     7ec:	28 f4       	brcc	.+10     	; 0x7f8 <main+0x536>
     7ee:	68 ee       	ldi	r22, 0xE8	; 232
     7f0:	73 e0       	ldi	r23, 0x03	; 3
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	37 d3       	rcall	.+1646   	; 0xe64 <hubMove>
     7f6:	bb cd       	rjmp	.-1162   	; 0x36e <main+0xac>
					else if(dist<setDist-2) hubMove(0,1000);
     7f8:	2f 81       	ldd	r18, Y+7	; 0x07
     7fa:	38 85       	ldd	r19, Y+8	; 0x08
     7fc:	22 50       	subi	r18, 0x02	; 2
     7fe:	31 09       	sbc	r19, r1
     800:	40 91 16 01 	lds	r20, 0x0116
     804:	50 91 17 01 	lds	r21, 0x0117
     808:	42 17       	cp	r20, r18
     80a:	53 07       	cpc	r21, r19
     80c:	28 f4       	brcc	.+10     	; 0x818 <main+0x556>
     80e:	68 ee       	ldi	r22, 0xE8	; 232
     810:	73 e0       	ldi	r23, 0x03	; 3
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	27 d3       	rcall	.+1614   	; 0xe64 <hubMove>
     816:	ab cd       	rjmp	.-1194   	; 0x36e <main+0xac>
					else if(dist>=setDist-2 && dist<=setDist+2)
     818:	40 91 16 01 	lds	r20, 0x0116
     81c:	50 91 17 01 	lds	r21, 0x0117
     820:	42 17       	cp	r20, r18
     822:	53 07       	cpc	r21, r19
     824:	08 f4       	brcc	.+2      	; 0x828 <main+0x566>
     826:	a3 cd       	rjmp	.-1210   	; 0x36e <main+0xac>
     828:	20 91 16 01 	lds	r18, 0x0116
     82c:	30 91 17 01 	lds	r19, 0x0117
     830:	82 17       	cp	r24, r18
     832:	93 07       	cpc	r25, r19
     834:	08 f4       	brcc	.+2      	; 0x838 <main+0x576>
     836:	9b cd       	rjmp	.-1226   	; 0x36e <main+0xac>
					{
						isReady=1;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 12 01 	sts	0x0112, r24
						hubMove(0,0);
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0f d3       	rcall	.+1566   	; 0xe64 <hubMove>
						turnWheel(servo1deg,servo2deg,servo3deg);
     846:	40 91 02 01 	lds	r20, 0x0102
     84a:	50 91 03 01 	lds	r21, 0x0103
     84e:	60 91 04 01 	lds	r22, 0x0104
     852:	70 91 05 01 	lds	r23, 0x0105
     856:	80 91 06 01 	lds	r24, 0x0106
     85a:	90 91 07 01 	lds	r25, 0x0107
     85e:	e2 d2       	rcall	.+1476   	; 0xe24 <turnWheel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     860:	ef ef       	ldi	r30, 0xFF	; 255
     862:	f9 e6       	ldi	r31, 0x69	; 105
     864:	28 e1       	ldi	r18, 0x18	; 24
     866:	e1 50       	subi	r30, 0x01	; 1
     868:	f0 40       	sbci	r31, 0x00	; 0
     86a:	20 40       	sbci	r18, 0x00	; 0
     86c:	e1 f7       	brne	.-8      	; 0x866 <main+0x5a4>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <main+0x5ae>
     870:	00 00       	nop
						_delay_ms(500);
						
						dist=0;
     872:	10 92 17 01 	sts	0x0117, r1
     876:	10 92 16 01 	sts	0x0116, r1
						data='r';
     87a:	32 e7       	ldi	r19, 0x72	; 114
     87c:	30 93 33 01 	sts	0x0133, r19
     880:	76 cd       	rjmp	.-1300   	; 0x36e <main+0xac>
					}
				}
				break;
			case 'e':	//스캔 종료 후 원위치
				stepSpeed(&headMotor,60);
     882:	6c e3       	ldi	r22, 0x3C	; 60
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	89 e1       	ldi	r24, 0x19	; 25
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	0b d3       	rcall	.+1558   	; 0xea2 <stepSpeed>
				if(headMotor.steps<headHeight && headMotor.steps>=0)
     88c:	80 91 21 01 	lds	r24, 0x0121
     890:	90 91 22 01 	lds	r25, 0x0122
     894:	a0 91 23 01 	lds	r26, 0x0123
     898:	b0 91 24 01 	lds	r27, 0x0124
     89c:	a1 01       	movw	r20, r2
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	84 17       	cp	r24, r20
     8a4:	95 07       	cpc	r25, r21
     8a6:	a6 07       	cpc	r26, r22
     8a8:	b7 07       	cpc	r27, r23
     8aa:	44 f4       	brge	.+16     	; 0x8bc <main+0x5fa>
     8ac:	bb 23       	and	r27, r27
     8ae:	34 f0       	brlt	.+12     	; 0x8bc <main+0x5fa>
					stepperMove(&headMotor,1);
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	89 e1       	ldi	r24, 0x19	; 25
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	16 d3       	rcall	.+1580   	; 0xee6 <stepperMove>
     8ba:	1a c0       	rjmp	.+52     	; 0x8f0 <main+0x62e>
				else if(headMotor.steps==headHeight)
     8bc:	84 17       	cp	r24, r20
     8be:	95 07       	cpc	r25, r21
     8c0:	a6 07       	cpc	r26, r22
     8c2:	b7 07       	cpc	r27, r23
     8c4:	59 f4       	brne	.+22     	; 0x8dc <main+0x61a>
				{
					TIMSK = (0<<OCIE2);
     8c6:	17 be       	out	0x37, r1	; 55
					if(isReady==2)
     8c8:	80 91 12 01 	lds	r24, 0x0112
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	81 f4       	brne	.+32     	; 0x8f0 <main+0x62e>
					{
						TX0_string("^e");
     8d0:	8b e0       	ldi	r24, 0x0B	; 11
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	25 d3       	rcall	.+1610   	; 0xf20 <TX0_string>
						isReady=0;
     8d6:	10 92 12 01 	sts	0x0112, r1
     8da:	0a c0       	rjmp	.+20     	; 0x8f0 <main+0x62e>
					}
				}
				else if(headMotor.steps>headHeight) stepperMove(&headMotor,-1);
     8dc:	48 17       	cp	r20, r24
     8de:	59 07       	cpc	r21, r25
     8e0:	6a 07       	cpc	r22, r26
     8e2:	7b 07       	cpc	r23, r27
     8e4:	2c f4       	brge	.+10     	; 0x8f0 <main+0x62e>
     8e6:	6f ef       	ldi	r22, 0xFF	; 255
     8e8:	7f ef       	ldi	r23, 0xFF	; 255
     8ea:	89 e1       	ldi	r24, 0x19	; 25
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	fb d2       	rcall	.+1526   	; 0xee6 <stepperMove>
				if(tilt_deg/tiltDelay>90-20) tilt_deg--;
     8f0:	04 33       	cpi	r16, 0x34	; 52
     8f2:	43 e5       	ldi	r20, 0x53	; 83
     8f4:	14 07       	cpc	r17, r20
     8f6:	18 f0       	brcs	.+6      	; 0x8fe <main+0x63c>
     8f8:	01 50       	subi	r16, 0x01	; 1
     8fa:	11 09       	sbc	r17, r1
     8fc:	06 c0       	rjmp	.+12     	; 0x90a <main+0x648>
				else if(tilt_deg/tiltDelay<90-20) tilt_deg++;
     8fe:	08 30       	cpi	r16, 0x08	; 8
     900:	52 e5       	ldi	r21, 0x52	; 82
     902:	15 07       	cpc	r17, r21
     904:	10 f4       	brcc	.+4      	; 0x90a <main+0x648>
     906:	0f 5f       	subi	r16, 0xFF	; 255
     908:	1f 4f       	sbci	r17, 0xFF	; 255
				servoMoveTo(4,tilt_deg/tiltDelay);
     90a:	98 01       	movw	r18, r16
     90c:	36 95       	lsr	r19
     90e:	27 95       	ror	r18
     910:	36 95       	lsr	r19
     912:	27 95       	ror	r18
     914:	ab e3       	ldi	r26, 0x3B	; 59
     916:	bd e6       	ldi	r27, 0x6D	; 109
     918:	8f d5       	rcall	.+2846   	; 0x1438 <__umulhisi3>
     91a:	bc 01       	movw	r22, r24
     91c:	76 95       	lsr	r23
     91e:	67 95       	ror	r22
     920:	72 95       	swap	r23
     922:	62 95       	swap	r22
     924:	6f 70       	andi	r22, 0x0F	; 15
     926:	67 27       	eor	r22, r23
     928:	7f 70       	andi	r23, 0x0F	; 15
     92a:	67 27       	eor	r22, r23
     92c:	84 e0       	ldi	r24, 0x04	; 4
     92e:	3f d2       	rcall	.+1150   	; 0xdae <servoMoveTo>
				break;
     930:	1e cd       	rjmp	.-1476   	; 0x36e <main+0xac>
			
			case '1':	//회전속도 ++
				if(hubSpeed<32000) hubSpeed+=1000;
     932:	8b 81       	ldd	r24, Y+3	; 0x03
     934:	9c 81       	ldd	r25, Y+4	; 0x04
     936:	81 15       	cp	r24, r1
     938:	ed e7       	ldi	r30, 0x7D	; 125
     93a:	9e 07       	cpc	r25, r30
     93c:	24 f4       	brge	.+8      	; 0x946 <main+0x684>
     93e:	88 51       	subi	r24, 0x18	; 24
     940:	9c 4f       	sbci	r25, 0xFC	; 252
     942:	9c 83       	std	Y+4, r25	; 0x04
     944:	8b 83       	std	Y+3, r24	; 0x03
				TX0_data(hubSpeed/1000);
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	9c 81       	ldd	r25, Y+4	; 0x04
     94a:	68 ee       	ldi	r22, 0xE8	; 232
     94c:	73 e0       	ldi	r23, 0x03	; 3
     94e:	1a d5       	rcall	.+2612   	; 0x1384 <__divmodhi4>
     950:	86 2f       	mov	r24, r22
     952:	e2 d2       	rcall	.+1476   	; 0xf18 <TX0_data>
				data=data1;
     954:	f0 92 33 01 	sts	0x0133, r15
				break;
     958:	0a cd       	rjmp	.-1516   	; 0x36e <main+0xac>
			case '2':	//회전속도 --
				if(hubSpeed>=1000) hubSpeed-=1000;
     95a:	2b 81       	ldd	r18, Y+3	; 0x03
     95c:	3c 81       	ldd	r19, Y+4	; 0x04
     95e:	28 3e       	cpi	r18, 0xE8	; 232
     960:	43 e0       	ldi	r20, 0x03	; 3
     962:	34 07       	cpc	r19, r20
     964:	24 f0       	brlt	.+8      	; 0x96e <main+0x6ac>
     966:	28 5e       	subi	r18, 0xE8	; 232
     968:	33 40       	sbci	r19, 0x03	; 3
     96a:	3c 83       	std	Y+4, r19	; 0x04
     96c:	2b 83       	std	Y+3, r18	; 0x03
				TX0_data(hubSpeed/1000);
     96e:	8b 81       	ldd	r24, Y+3	; 0x03
     970:	9c 81       	ldd	r25, Y+4	; 0x04
     972:	68 ee       	ldi	r22, 0xE8	; 232
     974:	73 e0       	ldi	r23, 0x03	; 3
     976:	06 d5       	rcall	.+2572   	; 0x1384 <__divmodhi4>
     978:	86 2f       	mov	r24, r22
     97a:	ce d2       	rcall	.+1436   	; 0xf18 <TX0_data>
				data=data1;
     97c:	f0 92 33 01 	sts	0x0133, r15
				break;
     980:	f6 cc       	rjmp	.-1556   	; 0x36e <main+0xac>
				
			case '3':	//헤드 이동속도 ++
				stepSpeed(&headMotor,headRPM++);
     982:	c9 80       	ldd	r12, Y+1	; 0x01
     984:	da 80       	ldd	r13, Y+2	; 0x02
     986:	5f ef       	ldi	r21, 0xFF	; 255
     988:	c5 1a       	sub	r12, r21
     98a:	d5 0a       	sbc	r13, r21
     98c:	69 81       	ldd	r22, Y+1	; 0x01
     98e:	7a 81       	ldd	r23, Y+2	; 0x02
     990:	89 e1       	ldi	r24, 0x19	; 25
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	86 d2       	rcall	.+1292   	; 0xea2 <stepSpeed>
				TX0_data(headRPM);
     996:	8c 2d       	mov	r24, r12
     998:	bf d2       	rcall	.+1406   	; 0xf18 <TX0_data>
				data=data1;
     99a:	f0 92 33 01 	sts	0x0133, r15
				TX0_data(hubSpeed/1000);
				data=data1;
				break;
				
			case '3':	//헤드 이동속도 ++
				stepSpeed(&headMotor,headRPM++);
     99e:	da 82       	std	Y+2, r13	; 0x02
     9a0:	c9 82       	std	Y+1, r12	; 0x01
				TX0_data(headRPM);
				data=data1;
				break;
     9a2:	e5 cc       	rjmp	.-1590   	; 0x36e <main+0xac>
			case '4':	//헤드 이동속도 --
				stepSpeed(&headMotor,headRPM--);
     9a4:	c9 80       	ldd	r12, Y+1	; 0x01
     9a6:	da 80       	ldd	r13, Y+2	; 0x02
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	c8 1a       	sub	r12, r24
     9ac:	d1 08       	sbc	r13, r1
     9ae:	69 81       	ldd	r22, Y+1	; 0x01
     9b0:	7a 81       	ldd	r23, Y+2	; 0x02
     9b2:	89 e1       	ldi	r24, 0x19	; 25
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	75 d2       	rcall	.+1258   	; 0xea2 <stepSpeed>
				TX0_data(headRPM);
     9b8:	8c 2d       	mov	r24, r12
     9ba:	ae d2       	rcall	.+1372   	; 0xf18 <TX0_data>
				data= data1;
     9bc:	f0 92 33 01 	sts	0x0133, r15
				stepSpeed(&headMotor,headRPM++);
				TX0_data(headRPM);
				data=data1;
				break;
			case '4':	//헤드 이동속도 --
				stepSpeed(&headMotor,headRPM--);
     9c0:	da 82       	std	Y+2, r13	; 0x02
     9c2:	c9 82       	std	Y+1, r12	; 0x01
				TX0_data(headRPM);
				data= data1;
				break;
     9c4:	d4 cc       	rjmp	.-1624   	; 0x36e <main+0xac>
				
			case '5':	//헤드 위치 up
				stepSpeed(&headMotor,50);
     9c6:	62 e3       	ldi	r22, 0x32	; 50
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	89 e1       	ldi	r24, 0x19	; 25
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	69 d2       	rcall	.+1234   	; 0xea2 <stepSpeed>
				headHeight+=100;
     9d0:	94 e6       	ldi	r25, 0x64	; 100
     9d2:	29 0e       	add	r2, r25
     9d4:	31 1c       	adc	r3, r1
				TX0_data(headHeight/100);
     9d6:	91 01       	movw	r18, r2
     9d8:	36 95       	lsr	r19
     9da:	27 95       	ror	r18
     9dc:	36 95       	lsr	r19
     9de:	27 95       	ror	r18
     9e0:	ab e7       	ldi	r26, 0x7B	; 123
     9e2:	b4 e1       	ldi	r27, 0x14	; 20
     9e4:	29 d5       	rcall	.+2642   	; 0x1438 <__umulhisi3>
     9e6:	96 95       	lsr	r25
     9e8:	87 95       	ror	r24
     9ea:	96 d2       	rcall	.+1324   	; 0xf18 <TX0_data>
				data=data1;
     9ec:	f0 92 33 01 	sts	0x0133, r15
				break;
     9f0:	be cc       	rjmp	.-1668   	; 0x36e <main+0xac>
			case '6':	//헤드 위치 down
				stepSpeed(&headMotor,50);
     9f2:	62 e3       	ldi	r22, 0x32	; 50
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	89 e1       	ldi	r24, 0x19	; 25
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	53 d2       	rcall	.+1190   	; 0xea2 <stepSpeed>
				headHeight-=100;
     9fc:	e4 e6       	ldi	r30, 0x64	; 100
     9fe:	2e 1a       	sub	r2, r30
     a00:	31 08       	sbc	r3, r1
				TX0_data(headHeight/100);
     a02:	91 01       	movw	r18, r2
     a04:	36 95       	lsr	r19
     a06:	27 95       	ror	r18
     a08:	36 95       	lsr	r19
     a0a:	27 95       	ror	r18
     a0c:	ab e7       	ldi	r26, 0x7B	; 123
     a0e:	b4 e1       	ldi	r27, 0x14	; 20
     a10:	13 d5       	rcall	.+2598   	; 0x1438 <__umulhisi3>
     a12:	96 95       	lsr	r25
     a14:	87 95       	ror	r24
     a16:	80 d2       	rcall	.+1280   	; 0xf18 <TX0_data>
				data=data1;
     a18:	f0 92 33 01 	sts	0x0133, r15
				break;
     a1c:	a8 cc       	rjmp	.-1712   	; 0x36e <main+0xac>
			case '7':	//거리 증가
				setDist+=5;
     a1e:	2f 81       	ldd	r18, Y+7	; 0x07
     a20:	38 85       	ldd	r19, Y+8	; 0x08
     a22:	2b 5f       	subi	r18, 0xFB	; 251
     a24:	3f 4f       	sbci	r19, 0xFF	; 255
     a26:	38 87       	std	Y+8, r19	; 0x08
     a28:	2f 83       	std	Y+7, r18	; 0x07
				TX0_data(setDist);
     a2a:	8f 81       	ldd	r24, Y+7	; 0x07
     a2c:	75 d2       	rcall	.+1258   	; 0xf18 <TX0_data>
				data=data1;
     a2e:	f0 92 33 01 	sts	0x0133, r15
			break;
     a32:	9d cc       	rjmp	.-1734   	; 0x36e <main+0xac>
			case '8':	//거리 감소
				setDist-=5;
     a34:	4f 81       	ldd	r20, Y+7	; 0x07
     a36:	58 85       	ldd	r21, Y+8	; 0x08
     a38:	45 50       	subi	r20, 0x05	; 5
     a3a:	51 09       	sbc	r21, r1
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	4f 83       	std	Y+7, r20	; 0x07
				TX0_data(setDist);
     a40:	8f 81       	ldd	r24, Y+7	; 0x07
     a42:	6a d2       	rcall	.+1236   	; 0xf18 <TX0_data>
				data= data1;
     a44:	f0 92 33 01 	sts	0x0133, r15
			break;
     a48:	92 cc       	rjmp	.-1756   	; 0x36e <main+0xac>
				
			case 'd':	//이동 모터 정방향(시계방향 회전 or 전진)
				hubMove(1,hubSpeed);
     a4a:	6b 81       	ldd	r22, Y+3	; 0x03
     a4c:	7c 81       	ldd	r23, Y+4	; 0x04
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	09 d2       	rcall	.+1042   	; 0xe64 <hubMove>
			break;
     a52:	8d cc       	rjmp	.-1766   	; 0x36e <main+0xac>
			case 'f':	//이동 모터 역방향(반시계방향 회전 or 후진)
				hubMove(0,hubSpeed);
     a54:	6b 81       	ldd	r22, Y+3	; 0x03
     a56:	7c 81       	ldd	r23, Y+4	; 0x04
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	04 d2       	rcall	.+1032   	; 0xe64 <hubMove>
			break;
     a5c:	88 cc       	rjmp	.-1776   	; 0x36e <main+0xac>
			case 'w':
				stepSpeed(&headMotor,headRPM);
     a5e:	69 81       	ldd	r22, Y+1	; 0x01
     a60:	7a 81       	ldd	r23, Y+2	; 0x02
     a62:	89 e1       	ldi	r24, 0x19	; 25
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	1d d2       	rcall	.+1082   	; 0xea2 <stepSpeed>
				if(headMotor.steps<headHeight)
     a68:	c1 01       	movw	r24, r2
     a6a:	a0 e0       	ldi	r26, 0x00	; 0
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	40 91 21 01 	lds	r20, 0x0121
     a72:	50 91 22 01 	lds	r21, 0x0122
     a76:	60 91 23 01 	lds	r22, 0x0123
     a7a:	70 91 24 01 	lds	r23, 0x0124
     a7e:	48 17       	cp	r20, r24
     a80:	59 07       	cpc	r21, r25
     a82:	6a 07       	cpc	r22, r26
     a84:	7b 07       	cpc	r23, r27
     a86:	4c f4       	brge	.+18     	; 0xa9a <main+0x7d8>
				{
					timer2Token=1;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	80 93 18 01 	sts	0x0118, r24
					stepperMove(&headMotor,1);
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	89 e1       	ldi	r24, 0x19	; 25
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	27 d2       	rcall	.+1102   	; 0xee6 <stepperMove>
     a98:	6a cc       	rjmp	.-1836   	; 0x36e <main+0xac>
				}
				else if(headMotor.steps>=headHeight)
				{
					timer2Token=0;
     a9a:	10 92 18 01 	sts	0x0118, r1
					TIMSK &=(0<<OCIE2);
     a9e:	87 b7       	in	r24, 0x37	; 55
     aa0:	17 be       	out	0x37, r1	; 55
					PORTE |= (1<<PORTE5);
     aa2:	1d 9a       	sbi	0x03, 5	; 3
     aa4:	64 cc       	rjmp	.-1848   	; 0x36e <main+0xac>
				}
				break;
			case 's':
				stepSpeed(&headMotor,headRPM);
     aa6:	69 81       	ldd	r22, Y+1	; 0x01
     aa8:	7a 81       	ldd	r23, Y+2	; 0x02
     aaa:	89 e1       	ldi	r24, 0x19	; 25
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	f9 d1       	rcall	.+1010   	; 0xea2 <stepSpeed>
				if(headMotor.steps>0)
     ab0:	80 91 21 01 	lds	r24, 0x0121
     ab4:	90 91 22 01 	lds	r25, 0x0122
     ab8:	a0 91 23 01 	lds	r26, 0x0123
     abc:	b0 91 24 01 	lds	r27, 0x0124
     ac0:	18 16       	cp	r1, r24
     ac2:	19 06       	cpc	r1, r25
     ac4:	1a 06       	cpc	r1, r26
     ac6:	1b 06       	cpc	r1, r27
     ac8:	4c f4       	brge	.+18     	; 0xadc <main+0x81a>
				{
					timer2Token=1;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	80 93 18 01 	sts	0x0118, r24
					stepperMove(&headMotor,-1);
     ad0:	6f ef       	ldi	r22, 0xFF	; 255
     ad2:	7f ef       	ldi	r23, 0xFF	; 255
     ad4:	89 e1       	ldi	r24, 0x19	; 25
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	06 d2       	rcall	.+1036   	; 0xee6 <stepperMove>
     ada:	49 cc       	rjmp	.-1902   	; 0x36e <main+0xac>
				}
				else if(headMotor.steps<=0)
				{
					timer2Token=0;
     adc:	10 92 18 01 	sts	0x0118, r1
					TIMSK &=(0<<OCIE2);
     ae0:	87 b7       	in	r24, 0x37	; 55
     ae2:	17 be       	out	0x37, r1	; 55
					PORTE |= (1<<PORTE5);
     ae4:	1d 9a       	sbi	0x03, 5	; 3
					data=0;
     ae6:	10 92 33 01 	sts	0x0133, r1
     aea:	41 cc       	rjmp	.-1918   	; 0x36e <main+0xac>
				}
				break;
			case 'j':
				turnWheel(0,160,20);
     aec:	44 e1       	ldi	r20, 0x14	; 20
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	60 ea       	ldi	r22, 0xA0	; 160
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	95 d1       	rcall	.+810    	; 0xe24 <turnWheel>
				break;
     afa:	39 cc       	rjmp	.-1934   	; 0x36e <main+0xac>
			case 'i':
				turnWheel(90,90-2,90-2);
     afc:	48 e5       	ldi	r20, 0x58	; 88
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	68 e5       	ldi	r22, 0x58	; 88
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	8a e5       	ldi	r24, 0x5A	; 90
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	8d d1       	rcall	.+794    	; 0xe24 <turnWheel>
				break;
     b0a:	31 cc       	rjmp	.-1950   	; 0x36e <main+0xac>
			case 'o':
				servoMoveTo(2,servo2deg++);
     b0c:	60 91 04 01 	lds	r22, 0x0104
     b10:	70 91 05 01 	lds	r23, 0x0105
     b14:	cb 01       	movw	r24, r22
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	90 93 05 01 	sts	0x0105, r25
     b1c:	80 93 04 01 	sts	0x0104, r24
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	45 d1       	rcall	.+650    	; 0xdae <servoMoveTo>
				TX0_data(servo2deg);
     b24:	e4 e0       	ldi	r30, 0x04	; 4
     b26:	f1 e0       	ldi	r31, 0x01	; 1
     b28:	80 81       	ld	r24, Z
     b2a:	f6 d1       	rcall	.+1004   	; 0xf18 <TX0_data>
				data=0;
     b2c:	10 92 33 01 	sts	0x0133, r1
				break;
     b30:	1e cc       	rjmp	.-1988   	; 0x36e <main+0xac>
			case 'p':
				servoMoveTo(2,servo2deg--);
     b32:	60 91 04 01 	lds	r22, 0x0104
     b36:	70 91 05 01 	lds	r23, 0x0105
     b3a:	cb 01       	movw	r24, r22
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	90 93 05 01 	sts	0x0105, r25
     b42:	80 93 04 01 	sts	0x0104, r24
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	32 d1       	rcall	.+612    	; 0xdae <servoMoveTo>
				TX0_data(servo2deg);
     b4a:	e4 e0       	ldi	r30, 0x04	; 4
     b4c:	f1 e0       	ldi	r31, 0x01	; 1
     b4e:	80 81       	ld	r24, Z
     b50:	e3 d1       	rcall	.+966    	; 0xf18 <TX0_data>
				data=0;
     b52:	10 92 33 01 	sts	0x0133, r1
				break;
     b56:	0b cc       	rjmp	.-2026   	; 0x36e <main+0xac>
			case 'k':
				servoMoveTo(3,servo3deg--);
     b58:	60 91 02 01 	lds	r22, 0x0102
     b5c:	70 91 03 01 	lds	r23, 0x0103
     b60:	cb 01       	movw	r24, r22
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	90 93 03 01 	sts	0x0103, r25
     b68:	80 93 02 01 	sts	0x0102, r24
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	1f d1       	rcall	.+574    	; 0xdae <servoMoveTo>
				TX0_data(servo3deg);
     b70:	e2 e0       	ldi	r30, 0x02	; 2
     b72:	f1 e0       	ldi	r31, 0x01	; 1
     b74:	80 81       	ld	r24, Z
     b76:	d0 d1       	rcall	.+928    	; 0xf18 <TX0_data>
				data=0;
     b78:	10 92 33 01 	sts	0x0133, r1
				break;
     b7c:	f8 cb       	rjmp	.-2064   	; 0x36e <main+0xac>
			case 'l':
				servoMoveTo(3,servo3deg++);
     b7e:	60 91 02 01 	lds	r22, 0x0102
     b82:	70 91 03 01 	lds	r23, 0x0103
     b86:	cb 01       	movw	r24, r22
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	90 93 03 01 	sts	0x0103, r25
     b8e:	80 93 02 01 	sts	0x0102, r24
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	0c d1       	rcall	.+536    	; 0xdae <servoMoveTo>
				TX0_data(servo3deg);
     b96:	e2 e0       	ldi	r30, 0x02	; 2
     b98:	f1 e0       	ldi	r31, 0x01	; 1
     b9a:	80 81       	ld	r24, Z
     b9c:	bd d1       	rcall	.+890    	; 0xf18 <TX0_data>
				data=0;
     b9e:	10 92 33 01 	sts	0x0133, r1
				break;
     ba2:	e5 cb       	rjmp	.-2102   	; 0x36e <main+0xac>
				
			case 'n':
				heightEx = headMotor.steps;
     ba4:	40 90 21 01 	lds	r4, 0x0121
     ba8:	50 90 22 01 	lds	r5, 0x0122
     bac:	60 90 23 01 	lds	r6, 0x0123
     bb0:	70 90 24 01 	lds	r7, 0x0124
				while (headMotor.steps-heightEx<heightMM/0.355+1)
     bb4:	53 01       	movw	r10, r6
     bb6:	42 01       	movw	r8, r4
     bb8:	aa 24       	eor	r10, r10
     bba:	bb 24       	eor	r11, r11
     bbc:	2d 81       	ldd	r18, Y+5	; 0x05
     bbe:	3e 81       	ldd	r19, Y+6	; 0x06
     bc0:	b9 01       	movw	r22, r18
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	c5 d2       	rcall	.+1418   	; 0x1152 <__floatunsisf>
     bc8:	2f e8       	ldi	r18, 0x8F	; 143
     bca:	32 ec       	ldi	r19, 0xC2	; 194
     bcc:	45 eb       	ldi	r20, 0xB5	; 181
     bce:	5e e3       	ldi	r21, 0x3E	; 62
     bd0:	58 d2       	rcall	.+1200   	; 0x1082 <__divsf3>
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e8       	ldi	r20, 0x80	; 128
     bd8:	5f e3       	ldi	r21, 0x3F	; 63
     bda:	eb d1       	rcall	.+982    	; 0xfb2 <__addsf3>
     bdc:	6b 01       	movw	r12, r22
     bde:	7c 01       	movw	r14, r24
     be0:	c3 01       	movw	r24, r6
     be2:	b2 01       	movw	r22, r4
     be4:	68 19       	sub	r22, r8
     be6:	79 09       	sbc	r23, r9
     be8:	8a 09       	sbc	r24, r10
     bea:	9b 09       	sbc	r25, r11
     bec:	b4 d2       	rcall	.+1384   	; 0x1156 <__floatsisf>
     bee:	a7 01       	movw	r20, r14
     bf0:	96 01       	movw	r18, r12
     bf2:	43 d2       	rcall	.+1158   	; 0x107a <__cmpsf2>
     bf4:	88 23       	and	r24, r24
     bf6:	cc f4       	brge	.+50     	; 0xc2a <main+0x968>
				{
					stepperMove(&headMotor,1);
     bf8:	61 e0       	ldi	r22, 0x01	; 1
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	89 e1       	ldi	r24, 0x19	; 25
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	72 d1       	rcall	.+740    	; 0xee6 <stepperMove>
				data=0;
				break;
				
			case 'n':
				heightEx = headMotor.steps;
				while (headMotor.steps-heightEx<heightMM/0.355+1)
     c02:	80 91 21 01 	lds	r24, 0x0121
     c06:	90 91 22 01 	lds	r25, 0x0122
     c0a:	a0 91 23 01 	lds	r26, 0x0123
     c0e:	b0 91 24 01 	lds	r27, 0x0124
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	68 19       	sub	r22, r8
     c18:	79 09       	sbc	r23, r9
     c1a:	8a 09       	sbc	r24, r10
     c1c:	9b 09       	sbc	r25, r11
     c1e:	9b d2       	rcall	.+1334   	; 0x1156 <__floatsisf>
     c20:	a7 01       	movw	r20, r14
     c22:	96 01       	movw	r18, r12
     c24:	2a d2       	rcall	.+1108   	; 0x107a <__cmpsf2>
     c26:	88 23       	and	r24, r24
     c28:	3c f3       	brlt	.-50     	; 0xbf8 <main+0x936>
				{
					stepperMove(&headMotor,1);
				}
				timer2Token=0;
     c2a:	10 92 18 01 	sts	0x0118, r1
				TIMSK &=(0<<OCIE2);
     c2e:	87 b7       	in	r24, 0x37	; 55
     c30:	17 be       	out	0x37, r1	; 55
				data=0;
     c32:	10 92 33 01 	sts	0x0133, r1
				break;
     c36:	9b cb       	rjmp	.-2250   	; 0x36e <main+0xac>
			case 'm':
				heightEx = headMotor.steps;
     c38:	40 90 21 01 	lds	r4, 0x0121
     c3c:	50 90 22 01 	lds	r5, 0x0122
     c40:	60 90 23 01 	lds	r6, 0x0123
     c44:	70 90 24 01 	lds	r7, 0x0124
				while (heightEx-headMotor.steps<heightMM/0.355+1)
     c48:	53 01       	movw	r10, r6
     c4a:	42 01       	movw	r8, r4
     c4c:	aa 24       	eor	r10, r10
     c4e:	bb 24       	eor	r11, r11
     c50:	4d 81       	ldd	r20, Y+5	; 0x05
     c52:	5e 81       	ldd	r21, Y+6	; 0x06
     c54:	ba 01       	movw	r22, r20
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	7b d2       	rcall	.+1270   	; 0x1152 <__floatunsisf>
     c5c:	2f e8       	ldi	r18, 0x8F	; 143
     c5e:	32 ec       	ldi	r19, 0xC2	; 194
     c60:	45 eb       	ldi	r20, 0xB5	; 181
     c62:	5e e3       	ldi	r21, 0x3E	; 62
     c64:	0e d2       	rcall	.+1052   	; 0x1082 <__divsf3>
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e8       	ldi	r20, 0x80	; 128
     c6c:	5f e3       	ldi	r21, 0x3F	; 63
     c6e:	a1 d1       	rcall	.+834    	; 0xfb2 <__addsf3>
     c70:	6b 01       	movw	r12, r22
     c72:	7c 01       	movw	r14, r24
     c74:	c5 01       	movw	r24, r10
     c76:	b4 01       	movw	r22, r8
     c78:	64 19       	sub	r22, r4
     c7a:	75 09       	sbc	r23, r5
     c7c:	86 09       	sbc	r24, r6
     c7e:	97 09       	sbc	r25, r7
     c80:	6a d2       	rcall	.+1236   	; 0x1156 <__floatsisf>
     c82:	a7 01       	movw	r20, r14
     c84:	96 01       	movw	r18, r12
     c86:	f9 d1       	rcall	.+1010   	; 0x107a <__cmpsf2>
     c88:	88 23       	and	r24, r24
     c8a:	dc f4       	brge	.+54     	; 0xcc2 <main+0xa00>
				{
					stepperMove(&headMotor,-1);
     c8c:	6f ef       	ldi	r22, 0xFF	; 255
     c8e:	7f ef       	ldi	r23, 0xFF	; 255
     c90:	89 e1       	ldi	r24, 0x19	; 25
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	28 d1       	rcall	.+592    	; 0xee6 <stepperMove>
				TIMSK &=(0<<OCIE2);
				data=0;
				break;
			case 'm':
				heightEx = headMotor.steps;
				while (heightEx-headMotor.steps<heightMM/0.355+1)
     c96:	80 91 21 01 	lds	r24, 0x0121
     c9a:	90 91 22 01 	lds	r25, 0x0122
     c9e:	a0 91 23 01 	lds	r26, 0x0123
     ca2:	b0 91 24 01 	lds	r27, 0x0124
     ca6:	a5 01       	movw	r20, r10
     ca8:	94 01       	movw	r18, r8
     caa:	28 1b       	sub	r18, r24
     cac:	39 0b       	sbc	r19, r25
     cae:	4a 0b       	sbc	r20, r26
     cb0:	5b 0b       	sbc	r21, r27
     cb2:	ca 01       	movw	r24, r20
     cb4:	b9 01       	movw	r22, r18
     cb6:	4f d2       	rcall	.+1182   	; 0x1156 <__floatsisf>
     cb8:	a7 01       	movw	r20, r14
     cba:	96 01       	movw	r18, r12
     cbc:	de d1       	rcall	.+956    	; 0x107a <__cmpsf2>
     cbe:	88 23       	and	r24, r24
     cc0:	2c f3       	brlt	.-54     	; 0xc8c <main+0x9ca>
				{
					stepperMove(&headMotor,-1);
				}
				timer2Token=0;
     cc2:	10 92 18 01 	sts	0x0118, r1
				TIMSK &=(0<<OCIE2);
     cc6:	87 b7       	in	r24, 0x37	; 55
     cc8:	17 be       	out	0x37, r1	; 55
				data=0;
     cca:	10 92 33 01 	sts	0x0133, r1
				break;
     cce:	4f cb       	rjmp	.-2402   	; 0x36e <main+0xac>
			case 'g':	//거리 증가
				heightMM+=10;
     cd0:	4d 81       	ldd	r20, Y+5	; 0x05
     cd2:	5e 81       	ldd	r21, Y+6	; 0x06
     cd4:	46 5f       	subi	r20, 0xF6	; 246
     cd6:	5f 4f       	sbci	r21, 0xFF	; 255
     cd8:	5e 83       	std	Y+6, r21	; 0x06
     cda:	4d 83       	std	Y+5, r20	; 0x05
				TX0_data(heightMM/10);
     cdc:	9a 01       	movw	r18, r20
     cde:	ad ec       	ldi	r26, 0xCD	; 205
     ce0:	bc ec       	ldi	r27, 0xCC	; 204
     ce2:	aa d3       	rcall	.+1876   	; 0x1438 <__umulhisi3>
     ce4:	96 95       	lsr	r25
     ce6:	87 95       	ror	r24
     ce8:	96 95       	lsr	r25
     cea:	87 95       	ror	r24
     cec:	96 95       	lsr	r25
     cee:	87 95       	ror	r24
     cf0:	13 d1       	rcall	.+550    	; 0xf18 <TX0_data>
				data=0;
     cf2:	10 92 33 01 	sts	0x0133, r1
				break;
     cf6:	3b cb       	rjmp	.-2442   	; 0x36e <main+0xac>
			case 'h':	//거리 감소
				heightMM-=10;
     cf8:	8d 81       	ldd	r24, Y+5	; 0x05
     cfa:	9e 81       	ldd	r25, Y+6	; 0x06
     cfc:	0a 97       	sbiw	r24, 0x0a	; 10
     cfe:	9e 83       	std	Y+6, r25	; 0x06
     d00:	8d 83       	std	Y+5, r24	; 0x05
				TX0_data(heightMM/10);
     d02:	9c 01       	movw	r18, r24
     d04:	ad ec       	ldi	r26, 0xCD	; 205
     d06:	bc ec       	ldi	r27, 0xCC	; 204
     d08:	97 d3       	rcall	.+1838   	; 0x1438 <__umulhisi3>
     d0a:	96 95       	lsr	r25
     d0c:	87 95       	ror	r24
     d0e:	96 95       	lsr	r25
     d10:	87 95       	ror	r24
     d12:	96 95       	lsr	r25
     d14:	87 95       	ror	r24
     d16:	00 d1       	rcall	.+512    	; 0xf18 <TX0_data>
				data= 0;
     d18:	10 92 33 01 	sts	0x0133, r1
				break;
     d1c:	28 cb       	rjmp	.-2480   	; 0x36e <main+0xac>
				
			case 'c':		//시리얼 연결 후 call
				TX0_string("^c");
     d1e:	8e e0       	ldi	r24, 0x0E	; 14
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	fe d0       	rcall	.+508    	; 0xf20 <TX0_string>
				data=0;
     d24:	10 92 33 01 	sts	0x0133, r1
				break;
     d28:	22 cb       	rjmp	.-2492   	; 0x36e <main+0xac>
			case 'q':
				//sensorInit();
				checkDist();
     d2a:	31 d1       	rcall	.+610    	; 0xf8e <checkDist>
				TX0_data(dist);
     d2c:	80 91 16 01 	lds	r24, 0x0116
     d30:	90 91 17 01 	lds	r25, 0x0117
     d34:	f1 d0       	rcall	.+482    	; 0xf18 <TX0_data>
				break;
     d36:	1b cb       	rjmp	.-2506   	; 0x36e <main+0xac>
			default:
				timer2Token=0;
     d38:	10 92 18 01 	sts	0x0118, r1
				TIMSK = (0<<OCIE2);
     d3c:	17 be       	out	0x37, r1	; 55
				sonicCNT=0;
     d3e:	10 92 14 01 	sts	0x0114, r1
     d42:	10 92 13 01 	sts	0x0113, r1
				hubMove(0,0);
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	8b d0       	rcall	.+278    	; 0xe64 <hubMove>
				servoMoveTo(1,servo1deg);
     d4e:	60 91 06 01 	lds	r22, 0x0106
     d52:	70 91 07 01 	lds	r23, 0x0107
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	2a d0       	rcall	.+84     	; 0xdae <servoMoveTo>
				servoMoveTo(2,servo2deg);
     d5a:	60 91 04 01 	lds	r22, 0x0104
     d5e:	70 91 05 01 	lds	r23, 0x0105
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	24 d0       	rcall	.+72     	; 0xdae <servoMoveTo>
				servoMoveTo(3,servo3deg);
     d66:	60 91 02 01 	lds	r22, 0x0102
     d6a:	70 91 03 01 	lds	r23, 0x0103
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	1e d0       	rcall	.+60     	; 0xdae <servoMoveTo>
				break;
     d72:	fd ca       	rjmp	.-2566   	; 0x36e <main+0xac>

00000d74 <servoInit>:

#include "Servo.h"

void servoInit()
{
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<COM1C1)|(0<<COM1C0)|(1<<WGM11)|(0<<WGM10);
     d74:	8a ea       	ldi	r24, 0xAA	; 170
     d76:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (0<<ICNC1)|(0<<ICES1)|(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
     d78:	2a e1       	ldi	r18, 0x1A	; 26
     d7a:	2e bd       	out	0x2e, r18	; 46
	ICR1 = 39999;		//period 20ms / motor1,2,3
     d7c:	8f e3       	ldi	r24, 0x3F	; 63
     d7e:	9c e9       	ldi	r25, 0x9C	; 156
     d80:	97 bd       	out	0x27, r25	; 39
     d82:	86 bd       	out	0x26, r24	; 38
	// ICRn, OCRnx 2 = 1us
	TCCR3A = (1<<COM3A1)|(0<<COM3A0)|(1<<COM3B1)|(0<<COM3B0)|(0<<COM3C1)|(0<<COM3C0)|(1<<WGM31)|(0<<WGM30);
     d84:	32 ea       	ldi	r19, 0xA2	; 162
     d86:	30 93 8b 00 	sts	0x008B, r19
	TCCR3B = (0<<ICNC3)|(0<<ICES3)|(1<<WGM33)|(1<<WGM32)|(0<<CS32)|(1<<CS31)|(0<<CS30);
     d8a:	20 93 8a 00 	sts	0x008A, r18
	ICR3 = 39999;
     d8e:	90 93 81 00 	sts	0x0081, r25
     d92:	80 93 80 00 	sts	0x0080, r24
	OCR3B = 0;
     d96:	10 92 85 00 	sts	0x0085, r1
     d9a:	10 92 84 00 	sts	0x0084, r1
	
	DDRA = 0x80;
     d9e:	80 e8       	ldi	r24, 0x80	; 128
     da0:	8a bb       	out	0x1a, r24	; 26
	DDRE|=(1<<PINE3)|(1<<PINE4)|(1<<PINE5);
     da2:	82 b1       	in	r24, 0x02	; 2
     da4:	88 63       	ori	r24, 0x38	; 56
     da6:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xE0;
     da8:	80 ee       	ldi	r24, 0xE0	; 224
     daa:	87 bb       	out	0x17, r24	; 23
     dac:	08 95       	ret

00000dae <servoMoveTo>:

void servoMoveTo(unsigned char motorNum, unsigned int deg)
{
	//OCR1x 2000 ~ 4000 (0 ~ 180)
	//OCR0  9 ~ 36.69
	switch(motorNum)
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	a1 f0       	breq	.+40     	; 0xdda <servoMoveTo+0x2c>
     db2:	18 f4       	brcc	.+6      	; 0xdba <servoMoveTo+0xc>
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	31 f0       	breq	.+12     	; 0xdc4 <servoMoveTo+0x16>
     db8:	08 95       	ret
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	c9 f0       	breq	.+50     	; 0xdf0 <servoMoveTo+0x42>
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	21 f1       	breq	.+72     	; 0xe0a <servoMoveTo+0x5c>
     dc2:	08 95       	ret
	{
		case 1:
			OCR1A = deg*20+1200;
     dc4:	24 e1       	ldi	r18, 0x14	; 20
     dc6:	26 9f       	mul	r18, r22
     dc8:	c0 01       	movw	r24, r0
     dca:	27 9f       	mul	r18, r23
     dcc:	90 0d       	add	r25, r0
     dce:	11 24       	eor	r1, r1
     dd0:	80 55       	subi	r24, 0x50	; 80
     dd2:	9b 4f       	sbci	r25, 0xFB	; 251
     dd4:	9b bd       	out	0x2b, r25	; 43
     dd6:	8a bd       	out	0x2a, r24	; 42
			break;
     dd8:	08 95       	ret
		case 2:
			OCR1B = deg*20+1200;
     dda:	24 e1       	ldi	r18, 0x14	; 20
     ddc:	26 9f       	mul	r18, r22
     dde:	c0 01       	movw	r24, r0
     de0:	27 9f       	mul	r18, r23
     de2:	90 0d       	add	r25, r0
     de4:	11 24       	eor	r1, r1
     de6:	80 55       	subi	r24, 0x50	; 80
     de8:	9b 4f       	sbci	r25, 0xFB	; 251
     dea:	99 bd       	out	0x29, r25	; 41
     dec:	88 bd       	out	0x28, r24	; 40
			break;
     dee:	08 95       	ret
		case 3:
			OCR1C = deg*20+1200;
     df0:	24 e1       	ldi	r18, 0x14	; 20
     df2:	26 9f       	mul	r18, r22
     df4:	c0 01       	movw	r24, r0
     df6:	27 9f       	mul	r18, r23
     df8:	90 0d       	add	r25, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	80 55       	subi	r24, 0x50	; 80
     dfe:	9b 4f       	sbci	r25, 0xFB	; 251
     e00:	90 93 79 00 	sts	0x0079, r25
     e04:	80 93 78 00 	sts	0x0078, r24
			break;
     e08:	08 95       	ret
		case 4:
			OCR3A = deg*20+1200;
     e0a:	24 e1       	ldi	r18, 0x14	; 20
     e0c:	26 9f       	mul	r18, r22
     e0e:	c0 01       	movw	r24, r0
     e10:	27 9f       	mul	r18, r23
     e12:	90 0d       	add	r25, r0
     e14:	11 24       	eor	r1, r1
     e16:	80 55       	subi	r24, 0x50	; 80
     e18:	9b 4f       	sbci	r25, 0xFB	; 251
     e1a:	90 93 87 00 	sts	0x0087, r25
     e1e:	80 93 86 00 	sts	0x0086, r24
     e22:	08 95       	ret

00000e24 <turnWheel>:
	//OCR1x 2000 ~ 4000 (0 ~ 180)
	//OCR0  9 ~ 36.69
	switch(motorNum)
	{
		case 1:
			OCR1A = deg*20+1200;
     e24:	24 e1       	ldi	r18, 0x14	; 20
     e26:	fc 01       	movw	r30, r24
     e28:	2e 9f       	mul	r18, r30
     e2a:	c0 01       	movw	r24, r0
     e2c:	2f 9f       	mul	r18, r31
     e2e:	90 0d       	add	r25, r0
     e30:	11 24       	eor	r1, r1
     e32:	80 55       	subi	r24, 0x50	; 80
     e34:	9b 4f       	sbci	r25, 0xFB	; 251
     e36:	9b bd       	out	0x2b, r25	; 43
     e38:	8a bd       	out	0x2a, r24	; 42
			break;
		case 2:
			OCR1B = deg*20+1200;
     e3a:	26 9f       	mul	r18, r22
     e3c:	c0 01       	movw	r24, r0
     e3e:	27 9f       	mul	r18, r23
     e40:	90 0d       	add	r25, r0
     e42:	11 24       	eor	r1, r1
     e44:	80 55       	subi	r24, 0x50	; 80
     e46:	9b 4f       	sbci	r25, 0xFB	; 251
     e48:	99 bd       	out	0x29, r25	; 41
     e4a:	88 bd       	out	0x28, r24	; 40
			break;
		case 3:
			OCR1C = deg*20+1200;
     e4c:	24 9f       	mul	r18, r20
     e4e:	c0 01       	movw	r24, r0
     e50:	25 9f       	mul	r18, r21
     e52:	90 0d       	add	r25, r0
     e54:	11 24       	eor	r1, r1
     e56:	80 55       	subi	r24, 0x50	; 80
     e58:	9b 4f       	sbci	r25, 0xFB	; 251
     e5a:	90 93 79 00 	sts	0x0079, r25
     e5e:	80 93 78 00 	sts	0x0078, r24
     e62:	08 95       	ret

00000e64 <hubMove>:
	servoMoveTo(3,m3);
}

void hubMove(char dir, int speed)
{
	if(dir==1) PORTA |= (1<<PINA7);
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	11 f4       	brne	.+4      	; 0xe6c <hubMove+0x8>
     e68:	df 9a       	sbi	0x1b, 7	; 27
     e6a:	04 c0       	rjmp	.+8      	; 0xe74 <hubMove+0x10>
	else if(dir==0) PORTA &= (0<<PINA7);
     e6c:	81 11       	cpse	r24, r1
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <hubMove+0x10>
     e70:	8b b3       	in	r24, 0x1b	; 27
     e72:	1b ba       	out	0x1b, r1	; 27
	
	OCR3B = speed;
     e74:	70 93 85 00 	sts	0x0085, r23
     e78:	60 93 84 00 	sts	0x0084, r22
     e7c:	08 95       	ret

00000e7e <stepperInit>:
 *  Author: JooHwanSang
 */ 
#include "stepper.h"

void stepperInit(struct STEPPER *stepper, unsigned char motorNum, unsigned char uSteps)
{
     e7e:	fc 01       	movw	r30, r24
	DDRC = 0xff;		// PORTC output
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;		// active low Enable
     e84:	15 ba       	out	0x15, r1	; 21
	
	stepper->motorNum = motorNum;
     e86:	60 83       	st	Z, r22
	stepper->uSteps = uSteps;	// 1/2 uSteps
     e88:	41 83       	std	Z+1, r20	; 0x01
	stepper->dir = 1;		//dir = 1 or -1
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	93 83       	std	Z+3, r25	; 0x03
     e90:	82 83       	std	Z+2, r24	; 0x02
	stepper->steps = 0;
     e92:	10 86       	std	Z+8, r1	; 0x08
     e94:	11 86       	std	Z+9, r1	; 0x09
     e96:	12 86       	std	Z+10, r1	; 0x0a
     e98:	13 86       	std	Z+11, r1	; 0x0b
	stepper->flag = 0;
     e9a:	14 8a       	std	Z+20, r1	; 0x14
	
	PORTC = (0<<USM21)|(1<<USM20);
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	85 bb       	out	0x15, r24	; 21
     ea0:	08 95       	ret

00000ea2 <stepSpeed>:
		break;
	}*/
}
void stepSpeed(struct STEPPER *stepper, unsigned int rpm)
{
	if(stepper->motorNum==2) OCR2 = 16000000/256/(rpm*200*2/60)/2;
     ea2:	fc 01       	movw	r30, r24
     ea4:	80 81       	ld	r24, Z
     ea6:	82 30       	cpi	r24, 0x02	; 2
     ea8:	e9 f4       	brne	.+58     	; 0xee4 <stepSpeed+0x42>
     eaa:	80 e9       	ldi	r24, 0x90	; 144
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	68 9f       	mul	r22, r24
     eb0:	90 01       	movw	r18, r0
     eb2:	69 9f       	mul	r22, r25
     eb4:	30 0d       	add	r19, r0
     eb6:	78 9f       	mul	r23, r24
     eb8:	30 0d       	add	r19, r0
     eba:	11 24       	eor	r1, r1
     ebc:	a9 e8       	ldi	r26, 0x89	; 137
     ebe:	b8 e8       	ldi	r27, 0x88	; 136
     ec0:	bb d2       	rcall	.+1398   	; 0x1438 <__umulhisi3>
     ec2:	96 95       	lsr	r25
     ec4:	87 95       	ror	r24
     ec6:	92 95       	swap	r25
     ec8:	82 95       	swap	r24
     eca:	8f 70       	andi	r24, 0x0F	; 15
     ecc:	89 27       	eor	r24, r25
     ece:	9f 70       	andi	r25, 0x0F	; 15
     ed0:	89 27       	eor	r24, r25
     ed2:	9c 01       	movw	r18, r24
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	62 e1       	ldi	r22, 0x12	; 18
     eda:	7a e7       	ldi	r23, 0x7A	; 122
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	86 d2       	rcall	.+1292   	; 0x13ee <__divmodsi4>
     ee2:	23 bd       	out	0x23, r18	; 35
     ee4:	08 95       	ret

00000ee6 <stepperMove>:
}
void stepperMove(struct STEPPER *stepper, int dir)
{	
	if(stepper->motorNum==2)
     ee6:	fc 01       	movw	r30, r24
     ee8:	20 81       	ld	r18, Z
     eea:	22 30       	cpi	r18, 0x02	; 2
     eec:	91 f4       	brne	.+36     	; 0xf12 <stepperMove+0x2c>
	{
		timer2Token=1;
     eee:	21 e0       	ldi	r18, 0x01	; 1
     ef0:	20 93 18 01 	sts	0x0118, r18
		TCCR2 = (1<<WGM21)|(0<<WGM20)|(0<<COM21)|(0<<COM20)|(1<<CS22)|(0<<CS21)|(0<<CS20);
     ef4:	2c e0       	ldi	r18, 0x0C	; 12
     ef6:	25 bd       	out	0x25, r18	; 37
		TIMSK = (1<<OCIE2);
     ef8:	20 e8       	ldi	r18, 0x80	; 128
     efa:	27 bf       	out	0x37, r18	; 55
		if(stepper->dir != dir)
     efc:	22 81       	ldd	r18, Z+2	; 0x02
     efe:	33 81       	ldd	r19, Z+3	; 0x03
     f00:	26 17       	cp	r18, r22
     f02:	37 07       	cpc	r19, r23
     f04:	31 f0       	breq	.+12     	; 0xf12 <stepperMove+0x2c>
		{
			PORTC = PORTC^(1<<DIR2);
     f06:	35 b3       	in	r19, 0x15	; 21
     f08:	24 e0       	ldi	r18, 0x04	; 4
     f0a:	23 27       	eor	r18, r19
     f0c:	25 bb       	out	0x15, r18	; 21
			stepper->dir = dir;
     f0e:	73 83       	std	Z+3, r23	; 0x03
     f10:	62 83       	std	Z+2, r22	; 0x02
     f12:	08 95       	ret

00000f14 <RX0_data>:
	while(str[i] != '\0')
	{
		TX1_data(str[i]);
		i++;
	}
}
     f14:	8c b1       	in	r24, 0x0c	; 12
     f16:	08 95       	ret

00000f18 <TX0_data>:
     f18:	5d 9b       	sbis	0x0b, 5	; 11
     f1a:	fe cf       	rjmp	.-4      	; 0xf18 <TX0_data>
     f1c:	8c b9       	out	0x0c, r24	; 12
     f1e:	08 95       	ret

00000f20 <TX0_string>:
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	ec 01       	movw	r28, r24
     f26:	88 81       	ld	r24, Y
     f28:	88 23       	and	r24, r24
     f2a:	29 f0       	breq	.+10     	; 0xf36 <TX0_string+0x16>
     f2c:	21 96       	adiw	r28, 0x01	; 1
     f2e:	f4 df       	rcall	.-24     	; 0xf18 <TX0_data>
     f30:	89 91       	ld	r24, Y+
     f32:	81 11       	cpse	r24, r1
     f34:	fc cf       	rjmp	.-8      	; 0xf2e <TX0_string+0xe>
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <USART_Init>:

void USART_Init(unsigned int baud)
{
	unsigned int ubrr;
	ubrr=(F_CPU/16/baud)-1;
     f3c:	9c 01       	movw	r18, r24
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	60 e4       	ldi	r22, 0x40	; 64
     f44:	72 e4       	ldi	r23, 0x42	; 66
     f46:	8f e0       	ldi	r24, 0x0F	; 15
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	2f d2       	rcall	.+1118   	; 0x13aa <__udivmodsi4>
     f4c:	21 50       	subi	r18, 0x01	; 1
     f4e:	31 09       	sbc	r19, r1
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     f50:	30 93 90 00 	sts	0x0090, r19
	UBRR0L = (unsigned char)ubrr;
     f54:	29 b9       	out	0x09, r18	; 9
	/* Enable receiver and transmitter */
	UCSR0A = 0x00;
     f56:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f58:	98 e1       	ldi	r25, 0x18	; 24
     f5a:	9a b9       	out	0x0a, r25	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     f5c:	86 e0       	ldi	r24, 0x06	; 6
     f5e:	80 93 95 00 	sts	0x0095, r24
	
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
     f62:	30 93 98 00 	sts	0x0098, r19
	UBRR1L = (unsigned char)ubrr;
     f66:	20 93 99 00 	sts	0x0099, r18
	/* Enable receiver and transmitter */
	UCSR1A = 0x00;
     f6a:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     f6e:	90 93 9a 00 	sts	0x009A, r25
	/* Set frame format: 8data, 1stop bit */
	UCSR1C = (1<<UCSZ10)|(1<<UCSZ11);
     f72:	80 93 9d 00 	sts	0x009D, r24
     f76:	08 95       	ret

00000f78 <sensorInit>:
#define F_CPU 16000000UL
#include "ultrasonic.h"

void sensorInit()
{
	DDRE |= (1<<PINE2);
     f78:	12 9a       	sbi	0x02, 2	; 2
	
	EICRB = (1<<ISC71)|(0<<ISC70)|(1<<ISC61)|(1<<ISC60);	//INT6 rising edge, INT7 falling edge
     f7a:	80 eb       	ldi	r24, 0xB0	; 176
     f7c:	8a bf       	out	0x3a, r24	; 58
	EIMSK = (1<<INT7)|(1<<INT6);
     f7e:	80 ec       	ldi	r24, 0xC0	; 192
     f80:	89 bf       	out	0x39, r24	; 57
	
	TCCR0 = (1<<WGM01)|(0<<WGM00)|(0<<COM01)|(0<<COM00)|(0<<CS02)|(1<<CS01)|(0<<CS00);
     f82:	8a e0       	ldi	r24, 0x0A	; 10
     f84:	83 bf       	out	0x33, r24	; 51
	TIMSK = (0<<OCIE0);
     f86:	17 be       	out	0x37, r1	; 55
	OCR0 = 19;
     f88:	83 e1       	ldi	r24, 0x13	; 19
     f8a:	81 bf       	out	0x31, r24	; 49
     f8c:	08 95       	ret

00000f8e <checkDist>:
}
void checkDist()
{
	PORTE |= (1<<PINE2);
     f8e:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f90:	25 e3       	ldi	r18, 0x35	; 53
     f92:	2a 95       	dec	r18
     f94:	f1 f7       	brne	.-4      	; 0xf92 <checkDist+0x4>
     f96:	00 00       	nop
	_delay_us(10);
	PORTE &= (0<<PINE2);
     f98:	83 b1       	in	r24, 0x03	; 3
     f9a:	13 b8       	out	0x03, r1	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	90 e7       	ldi	r25, 0x70	; 112
     fa0:	22 e0       	ldi	r18, 0x02	; 2
     fa2:	81 50       	subi	r24, 0x01	; 1
     fa4:	90 40       	sbci	r25, 0x00	; 0
     fa6:	20 40       	sbci	r18, 0x00	; 0
     fa8:	e1 f7       	brne	.-8      	; 0xfa2 <checkDist+0x14>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <checkDist+0x1e>
     fac:	00 00       	nop
     fae:	08 95       	ret

00000fb0 <__subsf3>:
     fb0:	50 58       	subi	r21, 0x80	; 128

00000fb2 <__addsf3>:
     fb2:	bb 27       	eor	r27, r27
     fb4:	aa 27       	eor	r26, r26
     fb6:	0e d0       	rcall	.+28     	; 0xfd4 <__addsf3x>
     fb8:	44 c1       	rjmp	.+648    	; 0x1242 <__fp_round>
     fba:	35 d1       	rcall	.+618    	; 0x1226 <__fp_pscA>
     fbc:	30 f0       	brcs	.+12     	; 0xfca <__addsf3+0x18>
     fbe:	3a d1       	rcall	.+628    	; 0x1234 <__fp_pscB>
     fc0:	20 f0       	brcs	.+8      	; 0xfca <__addsf3+0x18>
     fc2:	31 f4       	brne	.+12     	; 0xfd0 <__addsf3+0x1e>
     fc4:	9f 3f       	cpi	r25, 0xFF	; 255
     fc6:	11 f4       	brne	.+4      	; 0xfcc <__addsf3+0x1a>
     fc8:	1e f4       	brtc	.+6      	; 0xfd0 <__addsf3+0x1e>
     fca:	2a c1       	rjmp	.+596    	; 0x1220 <__fp_nan>
     fcc:	0e f4       	brtc	.+2      	; 0xfd0 <__addsf3+0x1e>
     fce:	e0 95       	com	r30
     fd0:	e7 fb       	bst	r30, 7
     fd2:	20 c1       	rjmp	.+576    	; 0x1214 <__fp_inf>

00000fd4 <__addsf3x>:
     fd4:	e9 2f       	mov	r30, r25
     fd6:	46 d1       	rcall	.+652    	; 0x1264 <__fp_split3>
     fd8:	80 f3       	brcs	.-32     	; 0xfba <__addsf3+0x8>
     fda:	ba 17       	cp	r27, r26
     fdc:	62 07       	cpc	r22, r18
     fde:	73 07       	cpc	r23, r19
     fe0:	84 07       	cpc	r24, r20
     fe2:	95 07       	cpc	r25, r21
     fe4:	18 f0       	brcs	.+6      	; 0xfec <__addsf3x+0x18>
     fe6:	71 f4       	brne	.+28     	; 0x1004 <__addsf3x+0x30>
     fe8:	9e f5       	brtc	.+102    	; 0x1050 <__addsf3x+0x7c>
     fea:	5e c1       	rjmp	.+700    	; 0x12a8 <__fp_zero>
     fec:	0e f4       	brtc	.+2      	; 0xff0 <__addsf3x+0x1c>
     fee:	e0 95       	com	r30
     ff0:	0b 2e       	mov	r0, r27
     ff2:	ba 2f       	mov	r27, r26
     ff4:	a0 2d       	mov	r26, r0
     ff6:	0b 01       	movw	r0, r22
     ff8:	b9 01       	movw	r22, r18
     ffa:	90 01       	movw	r18, r0
     ffc:	0c 01       	movw	r0, r24
     ffe:	ca 01       	movw	r24, r20
    1000:	a0 01       	movw	r20, r0
    1002:	11 24       	eor	r1, r1
    1004:	ff 27       	eor	r31, r31
    1006:	59 1b       	sub	r21, r25
    1008:	99 f0       	breq	.+38     	; 0x1030 <__addsf3x+0x5c>
    100a:	59 3f       	cpi	r21, 0xF9	; 249
    100c:	50 f4       	brcc	.+20     	; 0x1022 <__addsf3x+0x4e>
    100e:	50 3e       	cpi	r21, 0xE0	; 224
    1010:	68 f1       	brcs	.+90     	; 0x106c <__addsf3x+0x98>
    1012:	1a 16       	cp	r1, r26
    1014:	f0 40       	sbci	r31, 0x00	; 0
    1016:	a2 2f       	mov	r26, r18
    1018:	23 2f       	mov	r18, r19
    101a:	34 2f       	mov	r19, r20
    101c:	44 27       	eor	r20, r20
    101e:	58 5f       	subi	r21, 0xF8	; 248
    1020:	f3 cf       	rjmp	.-26     	; 0x1008 <__addsf3x+0x34>
    1022:	46 95       	lsr	r20
    1024:	37 95       	ror	r19
    1026:	27 95       	ror	r18
    1028:	a7 95       	ror	r26
    102a:	f0 40       	sbci	r31, 0x00	; 0
    102c:	53 95       	inc	r21
    102e:	c9 f7       	brne	.-14     	; 0x1022 <__addsf3x+0x4e>
    1030:	7e f4       	brtc	.+30     	; 0x1050 <__addsf3x+0x7c>
    1032:	1f 16       	cp	r1, r31
    1034:	ba 0b       	sbc	r27, r26
    1036:	62 0b       	sbc	r22, r18
    1038:	73 0b       	sbc	r23, r19
    103a:	84 0b       	sbc	r24, r20
    103c:	ba f0       	brmi	.+46     	; 0x106c <__addsf3x+0x98>
    103e:	91 50       	subi	r25, 0x01	; 1
    1040:	a1 f0       	breq	.+40     	; 0x106a <__addsf3x+0x96>
    1042:	ff 0f       	add	r31, r31
    1044:	bb 1f       	adc	r27, r27
    1046:	66 1f       	adc	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	88 1f       	adc	r24, r24
    104c:	c2 f7       	brpl	.-16     	; 0x103e <__addsf3x+0x6a>
    104e:	0e c0       	rjmp	.+28     	; 0x106c <__addsf3x+0x98>
    1050:	ba 0f       	add	r27, r26
    1052:	62 1f       	adc	r22, r18
    1054:	73 1f       	adc	r23, r19
    1056:	84 1f       	adc	r24, r20
    1058:	48 f4       	brcc	.+18     	; 0x106c <__addsf3x+0x98>
    105a:	87 95       	ror	r24
    105c:	77 95       	ror	r23
    105e:	67 95       	ror	r22
    1060:	b7 95       	ror	r27
    1062:	f7 95       	ror	r31
    1064:	9e 3f       	cpi	r25, 0xFE	; 254
    1066:	08 f0       	brcs	.+2      	; 0x106a <__addsf3x+0x96>
    1068:	b3 cf       	rjmp	.-154    	; 0xfd0 <__addsf3+0x1e>
    106a:	93 95       	inc	r25
    106c:	88 0f       	add	r24, r24
    106e:	08 f0       	brcs	.+2      	; 0x1072 <__addsf3x+0x9e>
    1070:	99 27       	eor	r25, r25
    1072:	ee 0f       	add	r30, r30
    1074:	97 95       	ror	r25
    1076:	87 95       	ror	r24
    1078:	08 95       	ret

0000107a <__cmpsf2>:
    107a:	a8 d0       	rcall	.+336    	; 0x11cc <__fp_cmp>
    107c:	08 f4       	brcc	.+2      	; 0x1080 <__cmpsf2+0x6>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	08 95       	ret

00001082 <__divsf3>:
    1082:	0c d0       	rcall	.+24     	; 0x109c <__divsf3x>
    1084:	de c0       	rjmp	.+444    	; 0x1242 <__fp_round>
    1086:	d6 d0       	rcall	.+428    	; 0x1234 <__fp_pscB>
    1088:	40 f0       	brcs	.+16     	; 0x109a <__divsf3+0x18>
    108a:	cd d0       	rcall	.+410    	; 0x1226 <__fp_pscA>
    108c:	30 f0       	brcs	.+12     	; 0x109a <__divsf3+0x18>
    108e:	21 f4       	brne	.+8      	; 0x1098 <__divsf3+0x16>
    1090:	5f 3f       	cpi	r21, 0xFF	; 255
    1092:	19 f0       	breq	.+6      	; 0x109a <__divsf3+0x18>
    1094:	bf c0       	rjmp	.+382    	; 0x1214 <__fp_inf>
    1096:	51 11       	cpse	r21, r1
    1098:	08 c1       	rjmp	.+528    	; 0x12aa <__fp_szero>
    109a:	c2 c0       	rjmp	.+388    	; 0x1220 <__fp_nan>

0000109c <__divsf3x>:
    109c:	e3 d0       	rcall	.+454    	; 0x1264 <__fp_split3>
    109e:	98 f3       	brcs	.-26     	; 0x1086 <__divsf3+0x4>

000010a0 <__divsf3_pse>:
    10a0:	99 23       	and	r25, r25
    10a2:	c9 f3       	breq	.-14     	; 0x1096 <__divsf3+0x14>
    10a4:	55 23       	and	r21, r21
    10a6:	b1 f3       	breq	.-20     	; 0x1094 <__divsf3+0x12>
    10a8:	95 1b       	sub	r25, r21
    10aa:	55 0b       	sbc	r21, r21
    10ac:	bb 27       	eor	r27, r27
    10ae:	aa 27       	eor	r26, r26
    10b0:	62 17       	cp	r22, r18
    10b2:	73 07       	cpc	r23, r19
    10b4:	84 07       	cpc	r24, r20
    10b6:	38 f0       	brcs	.+14     	; 0x10c6 <__divsf3_pse+0x26>
    10b8:	9f 5f       	subi	r25, 0xFF	; 255
    10ba:	5f 4f       	sbci	r21, 0xFF	; 255
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	44 1f       	adc	r20, r20
    10c2:	aa 1f       	adc	r26, r26
    10c4:	a9 f3       	breq	.-22     	; 0x10b0 <__divsf3_pse+0x10>
    10c6:	33 d0       	rcall	.+102    	; 0x112e <__stack+0x2f>
    10c8:	0e 2e       	mov	r0, r30
    10ca:	3a f0       	brmi	.+14     	; 0x10da <__divsf3_pse+0x3a>
    10cc:	e0 e8       	ldi	r30, 0x80	; 128
    10ce:	30 d0       	rcall	.+96     	; 0x1130 <__stack+0x31>
    10d0:	91 50       	subi	r25, 0x01	; 1
    10d2:	50 40       	sbci	r21, 0x00	; 0
    10d4:	e6 95       	lsr	r30
    10d6:	00 1c       	adc	r0, r0
    10d8:	ca f7       	brpl	.-14     	; 0x10cc <__divsf3_pse+0x2c>
    10da:	29 d0       	rcall	.+82     	; 0x112e <__stack+0x2f>
    10dc:	fe 2f       	mov	r31, r30
    10de:	27 d0       	rcall	.+78     	; 0x112e <__stack+0x2f>
    10e0:	66 0f       	add	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	bb 1f       	adc	r27, r27
    10e8:	26 17       	cp	r18, r22
    10ea:	37 07       	cpc	r19, r23
    10ec:	48 07       	cpc	r20, r24
    10ee:	ab 07       	cpc	r26, r27
    10f0:	b0 e8       	ldi	r27, 0x80	; 128
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <__divsf3_pse+0x56>
    10f4:	bb 0b       	sbc	r27, r27
    10f6:	80 2d       	mov	r24, r0
    10f8:	bf 01       	movw	r22, r30
    10fa:	ff 27       	eor	r31, r31
    10fc:	93 58       	subi	r25, 0x83	; 131
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	2a f0       	brmi	.+10     	; 0x110c <__stack+0xd>
    1102:	9e 3f       	cpi	r25, 0xFE	; 254
    1104:	51 05       	cpc	r21, r1
    1106:	68 f0       	brcs	.+26     	; 0x1122 <__stack+0x23>
    1108:	85 c0       	rjmp	.+266    	; 0x1214 <__fp_inf>
    110a:	cf c0       	rjmp	.+414    	; 0x12aa <__fp_szero>
    110c:	5f 3f       	cpi	r21, 0xFF	; 255
    110e:	ec f3       	brlt	.-6      	; 0x110a <__stack+0xb>
    1110:	98 3e       	cpi	r25, 0xE8	; 232
    1112:	dc f3       	brlt	.-10     	; 0x110a <__stack+0xb>
    1114:	86 95       	lsr	r24
    1116:	77 95       	ror	r23
    1118:	67 95       	ror	r22
    111a:	b7 95       	ror	r27
    111c:	f7 95       	ror	r31
    111e:	9f 5f       	subi	r25, 0xFF	; 255
    1120:	c9 f7       	brne	.-14     	; 0x1114 <__stack+0x15>
    1122:	88 0f       	add	r24, r24
    1124:	91 1d       	adc	r25, r1
    1126:	96 95       	lsr	r25
    1128:	87 95       	ror	r24
    112a:	97 f9       	bld	r25, 7
    112c:	08 95       	ret
    112e:	e1 e0       	ldi	r30, 0x01	; 1
    1130:	66 0f       	add	r22, r22
    1132:	77 1f       	adc	r23, r23
    1134:	88 1f       	adc	r24, r24
    1136:	bb 1f       	adc	r27, r27
    1138:	62 17       	cp	r22, r18
    113a:	73 07       	cpc	r23, r19
    113c:	84 07       	cpc	r24, r20
    113e:	ba 07       	cpc	r27, r26
    1140:	20 f0       	brcs	.+8      	; 0x114a <__stack+0x4b>
    1142:	62 1b       	sub	r22, r18
    1144:	73 0b       	sbc	r23, r19
    1146:	84 0b       	sbc	r24, r20
    1148:	ba 0b       	sbc	r27, r26
    114a:	ee 1f       	adc	r30, r30
    114c:	88 f7       	brcc	.-30     	; 0x1130 <__stack+0x31>
    114e:	e0 95       	com	r30
    1150:	08 95       	ret

00001152 <__floatunsisf>:
    1152:	e8 94       	clt
    1154:	09 c0       	rjmp	.+18     	; 0x1168 <__floatsisf+0x12>

00001156 <__floatsisf>:
    1156:	97 fb       	bst	r25, 7
    1158:	3e f4       	brtc	.+14     	; 0x1168 <__floatsisf+0x12>
    115a:	90 95       	com	r25
    115c:	80 95       	com	r24
    115e:	70 95       	com	r23
    1160:	61 95       	neg	r22
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	8f 4f       	sbci	r24, 0xFF	; 255
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	99 23       	and	r25, r25
    116a:	a9 f0       	breq	.+42     	; 0x1196 <__floatsisf+0x40>
    116c:	f9 2f       	mov	r31, r25
    116e:	96 e9       	ldi	r25, 0x96	; 150
    1170:	bb 27       	eor	r27, r27
    1172:	93 95       	inc	r25
    1174:	f6 95       	lsr	r31
    1176:	87 95       	ror	r24
    1178:	77 95       	ror	r23
    117a:	67 95       	ror	r22
    117c:	b7 95       	ror	r27
    117e:	f1 11       	cpse	r31, r1
    1180:	f8 cf       	rjmp	.-16     	; 0x1172 <__floatsisf+0x1c>
    1182:	fa f4       	brpl	.+62     	; 0x11c2 <__floatsisf+0x6c>
    1184:	bb 0f       	add	r27, r27
    1186:	11 f4       	brne	.+4      	; 0x118c <__floatsisf+0x36>
    1188:	60 ff       	sbrs	r22, 0
    118a:	1b c0       	rjmp	.+54     	; 0x11c2 <__floatsisf+0x6c>
    118c:	6f 5f       	subi	r22, 0xFF	; 255
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	8f 4f       	sbci	r24, 0xFF	; 255
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	16 c0       	rjmp	.+44     	; 0x11c2 <__floatsisf+0x6c>
    1196:	88 23       	and	r24, r24
    1198:	11 f0       	breq	.+4      	; 0x119e <__floatsisf+0x48>
    119a:	96 e9       	ldi	r25, 0x96	; 150
    119c:	11 c0       	rjmp	.+34     	; 0x11c0 <__floatsisf+0x6a>
    119e:	77 23       	and	r23, r23
    11a0:	21 f0       	breq	.+8      	; 0x11aa <__floatsisf+0x54>
    11a2:	9e e8       	ldi	r25, 0x8E	; 142
    11a4:	87 2f       	mov	r24, r23
    11a6:	76 2f       	mov	r23, r22
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <__floatsisf+0x5e>
    11aa:	66 23       	and	r22, r22
    11ac:	71 f0       	breq	.+28     	; 0x11ca <__floatsisf+0x74>
    11ae:	96 e8       	ldi	r25, 0x86	; 134
    11b0:	86 2f       	mov	r24, r22
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	2a f0       	brmi	.+10     	; 0x11c2 <__floatsisf+0x6c>
    11b8:	9a 95       	dec	r25
    11ba:	66 0f       	add	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	88 1f       	adc	r24, r24
    11c0:	da f7       	brpl	.-10     	; 0x11b8 <__floatsisf+0x62>
    11c2:	88 0f       	add	r24, r24
    11c4:	96 95       	lsr	r25
    11c6:	87 95       	ror	r24
    11c8:	97 f9       	bld	r25, 7
    11ca:	08 95       	ret

000011cc <__fp_cmp>:
    11cc:	99 0f       	add	r25, r25
    11ce:	00 08       	sbc	r0, r0
    11d0:	55 0f       	add	r21, r21
    11d2:	aa 0b       	sbc	r26, r26
    11d4:	e0 e8       	ldi	r30, 0x80	; 128
    11d6:	fe ef       	ldi	r31, 0xFE	; 254
    11d8:	16 16       	cp	r1, r22
    11da:	17 06       	cpc	r1, r23
    11dc:	e8 07       	cpc	r30, r24
    11de:	f9 07       	cpc	r31, r25
    11e0:	c0 f0       	brcs	.+48     	; 0x1212 <__fp_cmp+0x46>
    11e2:	12 16       	cp	r1, r18
    11e4:	13 06       	cpc	r1, r19
    11e6:	e4 07       	cpc	r30, r20
    11e8:	f5 07       	cpc	r31, r21
    11ea:	98 f0       	brcs	.+38     	; 0x1212 <__fp_cmp+0x46>
    11ec:	62 1b       	sub	r22, r18
    11ee:	73 0b       	sbc	r23, r19
    11f0:	84 0b       	sbc	r24, r20
    11f2:	95 0b       	sbc	r25, r21
    11f4:	39 f4       	brne	.+14     	; 0x1204 <__fp_cmp+0x38>
    11f6:	0a 26       	eor	r0, r26
    11f8:	61 f0       	breq	.+24     	; 0x1212 <__fp_cmp+0x46>
    11fa:	23 2b       	or	r18, r19
    11fc:	24 2b       	or	r18, r20
    11fe:	25 2b       	or	r18, r21
    1200:	21 f4       	brne	.+8      	; 0x120a <__fp_cmp+0x3e>
    1202:	08 95       	ret
    1204:	0a 26       	eor	r0, r26
    1206:	09 f4       	brne	.+2      	; 0x120a <__fp_cmp+0x3e>
    1208:	a1 40       	sbci	r26, 0x01	; 1
    120a:	a6 95       	lsr	r26
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	81 1d       	adc	r24, r1
    1210:	81 1d       	adc	r24, r1
    1212:	08 95       	ret

00001214 <__fp_inf>:
    1214:	97 f9       	bld	r25, 7
    1216:	9f 67       	ori	r25, 0x7F	; 127
    1218:	80 e8       	ldi	r24, 0x80	; 128
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	08 95       	ret

00001220 <__fp_nan>:
    1220:	9f ef       	ldi	r25, 0xFF	; 255
    1222:	80 ec       	ldi	r24, 0xC0	; 192
    1224:	08 95       	ret

00001226 <__fp_pscA>:
    1226:	00 24       	eor	r0, r0
    1228:	0a 94       	dec	r0
    122a:	16 16       	cp	r1, r22
    122c:	17 06       	cpc	r1, r23
    122e:	18 06       	cpc	r1, r24
    1230:	09 06       	cpc	r0, r25
    1232:	08 95       	ret

00001234 <__fp_pscB>:
    1234:	00 24       	eor	r0, r0
    1236:	0a 94       	dec	r0
    1238:	12 16       	cp	r1, r18
    123a:	13 06       	cpc	r1, r19
    123c:	14 06       	cpc	r1, r20
    123e:	05 06       	cpc	r0, r21
    1240:	08 95       	ret

00001242 <__fp_round>:
    1242:	09 2e       	mov	r0, r25
    1244:	03 94       	inc	r0
    1246:	00 0c       	add	r0, r0
    1248:	11 f4       	brne	.+4      	; 0x124e <__fp_round+0xc>
    124a:	88 23       	and	r24, r24
    124c:	52 f0       	brmi	.+20     	; 0x1262 <__fp_round+0x20>
    124e:	bb 0f       	add	r27, r27
    1250:	40 f4       	brcc	.+16     	; 0x1262 <__fp_round+0x20>
    1252:	bf 2b       	or	r27, r31
    1254:	11 f4       	brne	.+4      	; 0x125a <__fp_round+0x18>
    1256:	60 ff       	sbrs	r22, 0
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <__fp_round+0x20>
    125a:	6f 5f       	subi	r22, 0xFF	; 255
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	8f 4f       	sbci	r24, 0xFF	; 255
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	08 95       	ret

00001264 <__fp_split3>:
    1264:	57 fd       	sbrc	r21, 7
    1266:	90 58       	subi	r25, 0x80	; 128
    1268:	44 0f       	add	r20, r20
    126a:	55 1f       	adc	r21, r21
    126c:	59 f0       	breq	.+22     	; 0x1284 <__fp_splitA+0x10>
    126e:	5f 3f       	cpi	r21, 0xFF	; 255
    1270:	71 f0       	breq	.+28     	; 0x128e <__fp_splitA+0x1a>
    1272:	47 95       	ror	r20

00001274 <__fp_splitA>:
    1274:	88 0f       	add	r24, r24
    1276:	97 fb       	bst	r25, 7
    1278:	99 1f       	adc	r25, r25
    127a:	61 f0       	breq	.+24     	; 0x1294 <__fp_splitA+0x20>
    127c:	9f 3f       	cpi	r25, 0xFF	; 255
    127e:	79 f0       	breq	.+30     	; 0x129e <__fp_splitA+0x2a>
    1280:	87 95       	ror	r24
    1282:	08 95       	ret
    1284:	12 16       	cp	r1, r18
    1286:	13 06       	cpc	r1, r19
    1288:	14 06       	cpc	r1, r20
    128a:	55 1f       	adc	r21, r21
    128c:	f2 cf       	rjmp	.-28     	; 0x1272 <__fp_split3+0xe>
    128e:	46 95       	lsr	r20
    1290:	f1 df       	rcall	.-30     	; 0x1274 <__fp_splitA>
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <__fp_splitA+0x30>
    1294:	16 16       	cp	r1, r22
    1296:	17 06       	cpc	r1, r23
    1298:	18 06       	cpc	r1, r24
    129a:	99 1f       	adc	r25, r25
    129c:	f1 cf       	rjmp	.-30     	; 0x1280 <__fp_splitA+0xc>
    129e:	86 95       	lsr	r24
    12a0:	71 05       	cpc	r23, r1
    12a2:	61 05       	cpc	r22, r1
    12a4:	08 94       	sec
    12a6:	08 95       	ret

000012a8 <__fp_zero>:
    12a8:	e8 94       	clt

000012aa <__fp_szero>:
    12aa:	bb 27       	eor	r27, r27
    12ac:	66 27       	eor	r22, r22
    12ae:	77 27       	eor	r23, r23
    12b0:	cb 01       	movw	r24, r22
    12b2:	97 f9       	bld	r25, 7
    12b4:	08 95       	ret

000012b6 <__gesf2>:
    12b6:	8a df       	rcall	.-236    	; 0x11cc <__fp_cmp>
    12b8:	08 f4       	brcc	.+2      	; 0x12bc <__gesf2+0x6>
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	08 95       	ret

000012be <__mulsf3>:
    12be:	0b d0       	rcall	.+22     	; 0x12d6 <__mulsf3x>
    12c0:	c0 cf       	rjmp	.-128    	; 0x1242 <__fp_round>
    12c2:	b1 df       	rcall	.-158    	; 0x1226 <__fp_pscA>
    12c4:	28 f0       	brcs	.+10     	; 0x12d0 <__mulsf3+0x12>
    12c6:	b6 df       	rcall	.-148    	; 0x1234 <__fp_pscB>
    12c8:	18 f0       	brcs	.+6      	; 0x12d0 <__mulsf3+0x12>
    12ca:	95 23       	and	r25, r21
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <__mulsf3+0x12>
    12ce:	a2 cf       	rjmp	.-188    	; 0x1214 <__fp_inf>
    12d0:	a7 cf       	rjmp	.-178    	; 0x1220 <__fp_nan>
    12d2:	11 24       	eor	r1, r1
    12d4:	ea cf       	rjmp	.-44     	; 0x12aa <__fp_szero>

000012d6 <__mulsf3x>:
    12d6:	c6 df       	rcall	.-116    	; 0x1264 <__fp_split3>
    12d8:	a0 f3       	brcs	.-24     	; 0x12c2 <__mulsf3+0x4>

000012da <__mulsf3_pse>:
    12da:	95 9f       	mul	r25, r21
    12dc:	d1 f3       	breq	.-12     	; 0x12d2 <__mulsf3+0x14>
    12de:	95 0f       	add	r25, r21
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	55 1f       	adc	r21, r21
    12e4:	62 9f       	mul	r22, r18
    12e6:	f0 01       	movw	r30, r0
    12e8:	72 9f       	mul	r23, r18
    12ea:	bb 27       	eor	r27, r27
    12ec:	f0 0d       	add	r31, r0
    12ee:	b1 1d       	adc	r27, r1
    12f0:	63 9f       	mul	r22, r19
    12f2:	aa 27       	eor	r26, r26
    12f4:	f0 0d       	add	r31, r0
    12f6:	b1 1d       	adc	r27, r1
    12f8:	aa 1f       	adc	r26, r26
    12fa:	64 9f       	mul	r22, r20
    12fc:	66 27       	eor	r22, r22
    12fe:	b0 0d       	add	r27, r0
    1300:	a1 1d       	adc	r26, r1
    1302:	66 1f       	adc	r22, r22
    1304:	82 9f       	mul	r24, r18
    1306:	22 27       	eor	r18, r18
    1308:	b0 0d       	add	r27, r0
    130a:	a1 1d       	adc	r26, r1
    130c:	62 1f       	adc	r22, r18
    130e:	73 9f       	mul	r23, r19
    1310:	b0 0d       	add	r27, r0
    1312:	a1 1d       	adc	r26, r1
    1314:	62 1f       	adc	r22, r18
    1316:	83 9f       	mul	r24, r19
    1318:	a0 0d       	add	r26, r0
    131a:	61 1d       	adc	r22, r1
    131c:	22 1f       	adc	r18, r18
    131e:	74 9f       	mul	r23, r20
    1320:	33 27       	eor	r19, r19
    1322:	a0 0d       	add	r26, r0
    1324:	61 1d       	adc	r22, r1
    1326:	23 1f       	adc	r18, r19
    1328:	84 9f       	mul	r24, r20
    132a:	60 0d       	add	r22, r0
    132c:	21 1d       	adc	r18, r1
    132e:	82 2f       	mov	r24, r18
    1330:	76 2f       	mov	r23, r22
    1332:	6a 2f       	mov	r22, r26
    1334:	11 24       	eor	r1, r1
    1336:	9f 57       	subi	r25, 0x7F	; 127
    1338:	50 40       	sbci	r21, 0x00	; 0
    133a:	8a f0       	brmi	.+34     	; 0x135e <__mulsf3_pse+0x84>
    133c:	e1 f0       	breq	.+56     	; 0x1376 <__mulsf3_pse+0x9c>
    133e:	88 23       	and	r24, r24
    1340:	4a f0       	brmi	.+18     	; 0x1354 <__mulsf3_pse+0x7a>
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	bb 1f       	adc	r27, r27
    1348:	66 1f       	adc	r22, r22
    134a:	77 1f       	adc	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	91 50       	subi	r25, 0x01	; 1
    1350:	50 40       	sbci	r21, 0x00	; 0
    1352:	a9 f7       	brne	.-22     	; 0x133e <__mulsf3_pse+0x64>
    1354:	9e 3f       	cpi	r25, 0xFE	; 254
    1356:	51 05       	cpc	r21, r1
    1358:	70 f0       	brcs	.+28     	; 0x1376 <__mulsf3_pse+0x9c>
    135a:	5c cf       	rjmp	.-328    	; 0x1214 <__fp_inf>
    135c:	a6 cf       	rjmp	.-180    	; 0x12aa <__fp_szero>
    135e:	5f 3f       	cpi	r21, 0xFF	; 255
    1360:	ec f3       	brlt	.-6      	; 0x135c <__mulsf3_pse+0x82>
    1362:	98 3e       	cpi	r25, 0xE8	; 232
    1364:	dc f3       	brlt	.-10     	; 0x135c <__mulsf3_pse+0x82>
    1366:	86 95       	lsr	r24
    1368:	77 95       	ror	r23
    136a:	67 95       	ror	r22
    136c:	b7 95       	ror	r27
    136e:	f7 95       	ror	r31
    1370:	e7 95       	ror	r30
    1372:	9f 5f       	subi	r25, 0xFF	; 255
    1374:	c1 f7       	brne	.-16     	; 0x1366 <__mulsf3_pse+0x8c>
    1376:	fe 2b       	or	r31, r30
    1378:	88 0f       	add	r24, r24
    137a:	91 1d       	adc	r25, r1
    137c:	96 95       	lsr	r25
    137e:	87 95       	ror	r24
    1380:	97 f9       	bld	r25, 7
    1382:	08 95       	ret

00001384 <__divmodhi4>:
    1384:	97 fb       	bst	r25, 7
    1386:	07 2e       	mov	r0, r23
    1388:	16 f4       	brtc	.+4      	; 0x138e <__divmodhi4+0xa>
    138a:	00 94       	com	r0
    138c:	06 d0       	rcall	.+12     	; 0x139a <__divmodhi4_neg1>
    138e:	77 fd       	sbrc	r23, 7
    1390:	08 d0       	rcall	.+16     	; 0x13a2 <__divmodhi4_neg2>
    1392:	61 d0       	rcall	.+194    	; 0x1456 <__udivmodhi4>
    1394:	07 fc       	sbrc	r0, 7
    1396:	05 d0       	rcall	.+10     	; 0x13a2 <__divmodhi4_neg2>
    1398:	3e f4       	brtc	.+14     	; 0x13a8 <__divmodhi4_exit>

0000139a <__divmodhi4_neg1>:
    139a:	90 95       	com	r25
    139c:	81 95       	neg	r24
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	08 95       	ret

000013a2 <__divmodhi4_neg2>:
    13a2:	70 95       	com	r23
    13a4:	61 95       	neg	r22
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255

000013a8 <__divmodhi4_exit>:
    13a8:	08 95       	ret

000013aa <__udivmodsi4>:
    13aa:	a1 e2       	ldi	r26, 0x21	; 33
    13ac:	1a 2e       	mov	r1, r26
    13ae:	aa 1b       	sub	r26, r26
    13b0:	bb 1b       	sub	r27, r27
    13b2:	fd 01       	movw	r30, r26
    13b4:	0d c0       	rjmp	.+26     	; 0x13d0 <__udivmodsi4_ep>

000013b6 <__udivmodsi4_loop>:
    13b6:	aa 1f       	adc	r26, r26
    13b8:	bb 1f       	adc	r27, r27
    13ba:	ee 1f       	adc	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	a2 17       	cp	r26, r18
    13c0:	b3 07       	cpc	r27, r19
    13c2:	e4 07       	cpc	r30, r20
    13c4:	f5 07       	cpc	r31, r21
    13c6:	20 f0       	brcs	.+8      	; 0x13d0 <__udivmodsi4_ep>
    13c8:	a2 1b       	sub	r26, r18
    13ca:	b3 0b       	sbc	r27, r19
    13cc:	e4 0b       	sbc	r30, r20
    13ce:	f5 0b       	sbc	r31, r21

000013d0 <__udivmodsi4_ep>:
    13d0:	66 1f       	adc	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	1a 94       	dec	r1
    13da:	69 f7       	brne	.-38     	; 0x13b6 <__udivmodsi4_loop>
    13dc:	60 95       	com	r22
    13de:	70 95       	com	r23
    13e0:	80 95       	com	r24
    13e2:	90 95       	com	r25
    13e4:	9b 01       	movw	r18, r22
    13e6:	ac 01       	movw	r20, r24
    13e8:	bd 01       	movw	r22, r26
    13ea:	cf 01       	movw	r24, r30
    13ec:	08 95       	ret

000013ee <__divmodsi4>:
    13ee:	05 2e       	mov	r0, r21
    13f0:	97 fb       	bst	r25, 7
    13f2:	16 f4       	brtc	.+4      	; 0x13f8 <__divmodsi4+0xa>
    13f4:	00 94       	com	r0
    13f6:	0f d0       	rcall	.+30     	; 0x1416 <__negsi2>
    13f8:	57 fd       	sbrc	r21, 7
    13fa:	05 d0       	rcall	.+10     	; 0x1406 <__divmodsi4_neg2>
    13fc:	d6 df       	rcall	.-84     	; 0x13aa <__udivmodsi4>
    13fe:	07 fc       	sbrc	r0, 7
    1400:	02 d0       	rcall	.+4      	; 0x1406 <__divmodsi4_neg2>
    1402:	46 f4       	brtc	.+16     	; 0x1414 <__divmodsi4_exit>
    1404:	08 c0       	rjmp	.+16     	; 0x1416 <__negsi2>

00001406 <__divmodsi4_neg2>:
    1406:	50 95       	com	r21
    1408:	40 95       	com	r20
    140a:	30 95       	com	r19
    140c:	21 95       	neg	r18
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	4f 4f       	sbci	r20, 0xFF	; 255
    1412:	5f 4f       	sbci	r21, 0xFF	; 255

00001414 <__divmodsi4_exit>:
    1414:	08 95       	ret

00001416 <__negsi2>:
    1416:	90 95       	com	r25
    1418:	80 95       	com	r24
    141a:	70 95       	com	r23
    141c:	61 95       	neg	r22
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	8f 4f       	sbci	r24, 0xFF	; 255
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	08 95       	ret

00001426 <__tablejump2__>:
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	00 24       	eor	r0, r0
    142c:	00 1c       	adc	r0, r0
    142e:	0b be       	out	0x3b, r0	; 59
    1430:	07 90       	elpm	r0, Z+
    1432:	f6 91       	elpm	r31, Z
    1434:	e0 2d       	mov	r30, r0
    1436:	09 94       	ijmp

00001438 <__umulhisi3>:
    1438:	a2 9f       	mul	r26, r18
    143a:	b0 01       	movw	r22, r0
    143c:	b3 9f       	mul	r27, r19
    143e:	c0 01       	movw	r24, r0
    1440:	a3 9f       	mul	r26, r19
    1442:	70 0d       	add	r23, r0
    1444:	81 1d       	adc	r24, r1
    1446:	11 24       	eor	r1, r1
    1448:	91 1d       	adc	r25, r1
    144a:	b2 9f       	mul	r27, r18
    144c:	70 0d       	add	r23, r0
    144e:	81 1d       	adc	r24, r1
    1450:	11 24       	eor	r1, r1
    1452:	91 1d       	adc	r25, r1
    1454:	08 95       	ret

00001456 <__udivmodhi4>:
    1456:	aa 1b       	sub	r26, r26
    1458:	bb 1b       	sub	r27, r27
    145a:	51 e1       	ldi	r21, 0x11	; 17
    145c:	07 c0       	rjmp	.+14     	; 0x146c <__udivmodhi4_ep>

0000145e <__udivmodhi4_loop>:
    145e:	aa 1f       	adc	r26, r26
    1460:	bb 1f       	adc	r27, r27
    1462:	a6 17       	cp	r26, r22
    1464:	b7 07       	cpc	r27, r23
    1466:	10 f0       	brcs	.+4      	; 0x146c <__udivmodhi4_ep>
    1468:	a6 1b       	sub	r26, r22
    146a:	b7 0b       	sbc	r27, r23

0000146c <__udivmodhi4_ep>:
    146c:	88 1f       	adc	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	5a 95       	dec	r21
    1472:	a9 f7       	brne	.-22     	; 0x145e <__udivmodhi4_loop>
    1474:	80 95       	com	r24
    1476:	90 95       	com	r25
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	08 95       	ret

0000147e <_exit>:
    147e:	f8 94       	cli

00001480 <__stop_program>:
    1480:	ff cf       	rjmp	.-2      	; 0x1480 <__stop_program>
